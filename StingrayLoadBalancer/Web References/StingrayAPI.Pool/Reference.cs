//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18034.
// 
#pragma warning disable 1591

namespace StingrayLoadBalancer.StingrayAPI.Pool {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PoolBinding", Namespace="http://soap.zeus.com/zxtm/1.0/")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(PoolWeightingsDefinition))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(PoolPriorityValueDefinition))]
    public partial class Pool : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback addAutoScaledPoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDrainingNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDrainingNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMonitorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMonitorsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback addNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback addPoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback copyPoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback deletePoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback disableNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback disableNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback enableNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback enableNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleCloudcredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleCloudcredentialsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleClusterOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleClusterByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleDatacenterOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleDatacenterByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleDatastoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleDatastoreByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleEnabledByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleExternalOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleExternalByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleHysteresisOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleHysteresisByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleImageidOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleImageidByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleIpstouseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleIpstouseByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleLastnodeIdletimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleLastnodeIdletimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleMaxNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleMaxNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleMinNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleMinNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleNameByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscalePortOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscalePortByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleRefractoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleRefractoryByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleResponseTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleResponseTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleScaledownLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleScaledownLevelByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleScaleupLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleScaleupLevelByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleSizeidOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoscaleSizeidByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBandwidthClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBandwidthClassByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDisabledNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDisabledNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDrainingNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDrainingNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getErrorFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFTPSupportRfc2428OperationCompleted;
        
        private System.Threading.SendOrPostCallback getFTPSupportRfc2428ByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFailpoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFailpoolByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getKeepaliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback getKeepaliveByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getKeepaliveNonIdempotentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getKeepaliveNonIdempotentByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLoadBalancingAlgorithmOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLoadBalancingAlgorithmByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxConnectTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxConnectTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxConnectionsPernodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxConnectionsPernodeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxIdleConnectionsPerNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxIdleConnectionsPerNodeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxKeepalivesPerNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxKeepalivesPerNodeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxQueueSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxQueueSizeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxReplyTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMaxReplyTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMonitorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMonitorsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeConnCloseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeConnCloseByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeConnectionAttemptsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeConnectionAttemptsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeFailTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeFailTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeUseNagleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodeUseNagleByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesConnectionCountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesLastUsedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesPriorityValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesPriorityValueByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesWeightingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNodesWeightingsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPassiveMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPassiveMonitoringByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersistenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPersistenceByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPoolNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPriorityEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPriorityEnabledByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPriorityNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPriorityNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPriorityValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPriorityValuesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getQueueTimeoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback getQueueTimeoutByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSMTPSendStartTLSOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSMTPSendStartTLSByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLClientAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLClientAuthByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLEncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLEncryptByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLEnhanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLEnhanceByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLSendCloseAlertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLSendCloseAlertsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLServerNameExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLServerNameExtensionByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLStrictVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSSLStrictVerifyByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTransparentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTransparentByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUDPAcceptFromOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUDPAcceptFromByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUDPAcceptFromIPMaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUDPAcceptFromIPMaskByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWeightingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getWeightingsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeDrainingNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeDrainingNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeMonitorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeMonitorsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback renamePoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleCloudcredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleCloudcredentialsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleClusterOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleClusterByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleDatacenterOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleDatacenterByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleDatastoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleDatastoreByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleEnabledByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleExternalOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleExternalByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleHysteresisOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleHysteresisByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleImageidOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleImageidByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleIpstouseOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleIpstouseByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleLastnodeIdletimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleLastnodeIdletimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleMaxNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleMaxNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleMinNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleMinNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleNameByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscalePortOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscalePortByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleRefractoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleRefractoryByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleResponseTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleResponseTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleScaledownLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleScaledownLevelByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleScaleupLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleScaleupLevelByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleSizeidOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoscaleSizeidByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setBandwidthClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback setBandwidthClassByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDisabledNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDisabledNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDrainingNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDrainingNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setErrorFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback setFTPSupportRfc2428OperationCompleted;
        
        private System.Threading.SendOrPostCallback setFTPSupportRfc2428ByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setFailpoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback setFailpoolByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setKeepaliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback setKeepaliveByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setKeepaliveNonIdempotentOperationCompleted;
        
        private System.Threading.SendOrPostCallback setKeepaliveNonIdempotentByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setLoadBalancingAlgorithmOperationCompleted;
        
        private System.Threading.SendOrPostCallback setLoadBalancingAlgorithmByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxConnectTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxConnectTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxConnectionsPernodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxConnectionsPernodeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxIdleConnectionsPerNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxIdleConnectionsPerNodeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxKeepalivesPerNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxKeepalivesPerNodeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxQueueSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxQueueSizeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxReplyTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMaxReplyTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMonitorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMonitorsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeConnCloseOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeConnCloseByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeConnectionAttemptsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeConnectionAttemptsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeFailTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeFailTimeByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeUseNagleOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodeUseNagleByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodesPriorityValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodesPriorityValueByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodesWeightingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNodesWeightingsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPassiveMonitoringOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPassiveMonitoringByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPersistenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPersistenceByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPriorityEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPriorityEnabledByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPriorityNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback setPriorityNodesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setQueueTimeoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback setQueueTimeoutByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSMTPSendStartTLSOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSMTPSendStartTLSByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLClientAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLClientAuthByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLEncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLEncryptByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLEnhanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLEnhanceByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLSendCloseAlertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLSendCloseAlertsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLServerNameExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLServerNameExtensionByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLStrictVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSSLStrictVerifyByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTransparentOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTransparentByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setUDPAcceptFromOperationCompleted;
        
        private System.Threading.SendOrPostCallback setUDPAcceptFromByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback setUDPAcceptFromIPMaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback setUDPAcceptFromIPMaskByLocationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Pool() {
            this.Url = "https://admin_server:9090/soap";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event addAutoScaledPoolCompletedEventHandler addAutoScaledPoolCompleted;
        
        /// <remarks/>
        public event addDrainingNodesCompletedEventHandler addDrainingNodesCompleted;
        
        /// <remarks/>
        public event addDrainingNodesByLocationCompletedEventHandler addDrainingNodesByLocationCompleted;
        
        /// <remarks/>
        public event addMonitorsCompletedEventHandler addMonitorsCompleted;
        
        /// <remarks/>
        public event addMonitorsByLocationCompletedEventHandler addMonitorsByLocationCompleted;
        
        /// <remarks/>
        public event addNodesCompletedEventHandler addNodesCompleted;
        
        /// <remarks/>
        public event addNodesByLocationCompletedEventHandler addNodesByLocationCompleted;
        
        /// <remarks/>
        public event addPoolCompletedEventHandler addPoolCompleted;
        
        /// <remarks/>
        public event copyPoolCompletedEventHandler copyPoolCompleted;
        
        /// <remarks/>
        public event deletePoolCompletedEventHandler deletePoolCompleted;
        
        /// <remarks/>
        public event disableNodesCompletedEventHandler disableNodesCompleted;
        
        /// <remarks/>
        public event disableNodesByLocationCompletedEventHandler disableNodesByLocationCompleted;
        
        /// <remarks/>
        public event enableNodesCompletedEventHandler enableNodesCompleted;
        
        /// <remarks/>
        public event enableNodesByLocationCompletedEventHandler enableNodesByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleCloudcredentialsCompletedEventHandler getAutoscaleCloudcredentialsCompleted;
        
        /// <remarks/>
        public event getAutoscaleCloudcredentialsByLocationCompletedEventHandler getAutoscaleCloudcredentialsByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleClusterCompletedEventHandler getAutoscaleClusterCompleted;
        
        /// <remarks/>
        public event getAutoscaleClusterByLocationCompletedEventHandler getAutoscaleClusterByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleDatacenterCompletedEventHandler getAutoscaleDatacenterCompleted;
        
        /// <remarks/>
        public event getAutoscaleDatacenterByLocationCompletedEventHandler getAutoscaleDatacenterByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleDatastoreCompletedEventHandler getAutoscaleDatastoreCompleted;
        
        /// <remarks/>
        public event getAutoscaleDatastoreByLocationCompletedEventHandler getAutoscaleDatastoreByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleEnabledCompletedEventHandler getAutoscaleEnabledCompleted;
        
        /// <remarks/>
        public event getAutoscaleEnabledByLocationCompletedEventHandler getAutoscaleEnabledByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleExternalCompletedEventHandler getAutoscaleExternalCompleted;
        
        /// <remarks/>
        public event getAutoscaleExternalByLocationCompletedEventHandler getAutoscaleExternalByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleHysteresisCompletedEventHandler getAutoscaleHysteresisCompleted;
        
        /// <remarks/>
        public event getAutoscaleHysteresisByLocationCompletedEventHandler getAutoscaleHysteresisByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleImageidCompletedEventHandler getAutoscaleImageidCompleted;
        
        /// <remarks/>
        public event getAutoscaleImageidByLocationCompletedEventHandler getAutoscaleImageidByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleIpstouseCompletedEventHandler getAutoscaleIpstouseCompleted;
        
        /// <remarks/>
        public event getAutoscaleIpstouseByLocationCompletedEventHandler getAutoscaleIpstouseByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleLastnodeIdletimeCompletedEventHandler getAutoscaleLastnodeIdletimeCompleted;
        
        /// <remarks/>
        public event getAutoscaleLastnodeIdletimeByLocationCompletedEventHandler getAutoscaleLastnodeIdletimeByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleMaxNodesCompletedEventHandler getAutoscaleMaxNodesCompleted;
        
        /// <remarks/>
        public event getAutoscaleMaxNodesByLocationCompletedEventHandler getAutoscaleMaxNodesByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleMinNodesCompletedEventHandler getAutoscaleMinNodesCompleted;
        
        /// <remarks/>
        public event getAutoscaleMinNodesByLocationCompletedEventHandler getAutoscaleMinNodesByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleNameCompletedEventHandler getAutoscaleNameCompleted;
        
        /// <remarks/>
        public event getAutoscaleNameByLocationCompletedEventHandler getAutoscaleNameByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscalePortCompletedEventHandler getAutoscalePortCompleted;
        
        /// <remarks/>
        public event getAutoscalePortByLocationCompletedEventHandler getAutoscalePortByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleRefractoryCompletedEventHandler getAutoscaleRefractoryCompleted;
        
        /// <remarks/>
        public event getAutoscaleRefractoryByLocationCompletedEventHandler getAutoscaleRefractoryByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleResponseTimeCompletedEventHandler getAutoscaleResponseTimeCompleted;
        
        /// <remarks/>
        public event getAutoscaleResponseTimeByLocationCompletedEventHandler getAutoscaleResponseTimeByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleScaledownLevelCompletedEventHandler getAutoscaleScaledownLevelCompleted;
        
        /// <remarks/>
        public event getAutoscaleScaledownLevelByLocationCompletedEventHandler getAutoscaleScaledownLevelByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleScaleupLevelCompletedEventHandler getAutoscaleScaleupLevelCompleted;
        
        /// <remarks/>
        public event getAutoscaleScaleupLevelByLocationCompletedEventHandler getAutoscaleScaleupLevelByLocationCompleted;
        
        /// <remarks/>
        public event getAutoscaleSizeidCompletedEventHandler getAutoscaleSizeidCompleted;
        
        /// <remarks/>
        public event getAutoscaleSizeidByLocationCompletedEventHandler getAutoscaleSizeidByLocationCompleted;
        
        /// <remarks/>
        public event getBandwidthClassCompletedEventHandler getBandwidthClassCompleted;
        
        /// <remarks/>
        public event getBandwidthClassByLocationCompletedEventHandler getBandwidthClassByLocationCompleted;
        
        /// <remarks/>
        public event getDisabledNodesCompletedEventHandler getDisabledNodesCompleted;
        
        /// <remarks/>
        public event getDisabledNodesByLocationCompletedEventHandler getDisabledNodesByLocationCompleted;
        
        /// <remarks/>
        public event getDrainingNodesCompletedEventHandler getDrainingNodesCompleted;
        
        /// <remarks/>
        public event getDrainingNodesByLocationCompletedEventHandler getDrainingNodesByLocationCompleted;
        
        /// <remarks/>
        public event getErrorFileCompletedEventHandler getErrorFileCompleted;
        
        /// <remarks/>
        public event getFTPSupportRfc2428CompletedEventHandler getFTPSupportRfc2428Completed;
        
        /// <remarks/>
        public event getFTPSupportRfc2428ByLocationCompletedEventHandler getFTPSupportRfc2428ByLocationCompleted;
        
        /// <remarks/>
        public event getFailpoolCompletedEventHandler getFailpoolCompleted;
        
        /// <remarks/>
        public event getFailpoolByLocationCompletedEventHandler getFailpoolByLocationCompleted;
        
        /// <remarks/>
        public event getKeepaliveCompletedEventHandler getKeepaliveCompleted;
        
        /// <remarks/>
        public event getKeepaliveByLocationCompletedEventHandler getKeepaliveByLocationCompleted;
        
        /// <remarks/>
        public event getKeepaliveNonIdempotentCompletedEventHandler getKeepaliveNonIdempotentCompleted;
        
        /// <remarks/>
        public event getKeepaliveNonIdempotentByLocationCompletedEventHandler getKeepaliveNonIdempotentByLocationCompleted;
        
        /// <remarks/>
        public event getLoadBalancingAlgorithmCompletedEventHandler getLoadBalancingAlgorithmCompleted;
        
        /// <remarks/>
        public event getLoadBalancingAlgorithmByLocationCompletedEventHandler getLoadBalancingAlgorithmByLocationCompleted;
        
        /// <remarks/>
        public event getMaxConnectTimeCompletedEventHandler getMaxConnectTimeCompleted;
        
        /// <remarks/>
        public event getMaxConnectTimeByLocationCompletedEventHandler getMaxConnectTimeByLocationCompleted;
        
        /// <remarks/>
        public event getMaxConnectionsPernodeCompletedEventHandler getMaxConnectionsPernodeCompleted;
        
        /// <remarks/>
        public event getMaxConnectionsPernodeByLocationCompletedEventHandler getMaxConnectionsPernodeByLocationCompleted;
        
        /// <remarks/>
        public event getMaxIdleConnectionsPerNodeCompletedEventHandler getMaxIdleConnectionsPerNodeCompleted;
        
        /// <remarks/>
        public event getMaxIdleConnectionsPerNodeByLocationCompletedEventHandler getMaxIdleConnectionsPerNodeByLocationCompleted;
        
        /// <remarks/>
        public event getMaxKeepalivesPerNodeCompletedEventHandler getMaxKeepalivesPerNodeCompleted;
        
        /// <remarks/>
        public event getMaxKeepalivesPerNodeByLocationCompletedEventHandler getMaxKeepalivesPerNodeByLocationCompleted;
        
        /// <remarks/>
        public event getMaxQueueSizeCompletedEventHandler getMaxQueueSizeCompleted;
        
        /// <remarks/>
        public event getMaxQueueSizeByLocationCompletedEventHandler getMaxQueueSizeByLocationCompleted;
        
        /// <remarks/>
        public event getMaxReplyTimeCompletedEventHandler getMaxReplyTimeCompleted;
        
        /// <remarks/>
        public event getMaxReplyTimeByLocationCompletedEventHandler getMaxReplyTimeByLocationCompleted;
        
        /// <remarks/>
        public event getMonitorsCompletedEventHandler getMonitorsCompleted;
        
        /// <remarks/>
        public event getMonitorsByLocationCompletedEventHandler getMonitorsByLocationCompleted;
        
        /// <remarks/>
        public event getNodeConnCloseCompletedEventHandler getNodeConnCloseCompleted;
        
        /// <remarks/>
        public event getNodeConnCloseByLocationCompletedEventHandler getNodeConnCloseByLocationCompleted;
        
        /// <remarks/>
        public event getNodeConnectionAttemptsCompletedEventHandler getNodeConnectionAttemptsCompleted;
        
        /// <remarks/>
        public event getNodeConnectionAttemptsByLocationCompletedEventHandler getNodeConnectionAttemptsByLocationCompleted;
        
        /// <remarks/>
        public event getNodeFailTimeCompletedEventHandler getNodeFailTimeCompleted;
        
        /// <remarks/>
        public event getNodeFailTimeByLocationCompletedEventHandler getNodeFailTimeByLocationCompleted;
        
        /// <remarks/>
        public event getNodeUseNagleCompletedEventHandler getNodeUseNagleCompleted;
        
        /// <remarks/>
        public event getNodeUseNagleByLocationCompletedEventHandler getNodeUseNagleByLocationCompleted;
        
        /// <remarks/>
        public event getNodesCompletedEventHandler getNodesCompleted;
        
        /// <remarks/>
        public event getNodesByLocationCompletedEventHandler getNodesByLocationCompleted;
        
        /// <remarks/>
        public event getNodesConnectionCountsCompletedEventHandler getNodesConnectionCountsCompleted;
        
        /// <remarks/>
        public event getNodesLastUsedCompletedEventHandler getNodesLastUsedCompleted;
        
        /// <remarks/>
        public event getNodesPriorityValueCompletedEventHandler getNodesPriorityValueCompleted;
        
        /// <remarks/>
        public event getNodesPriorityValueByLocationCompletedEventHandler getNodesPriorityValueByLocationCompleted;
        
        /// <remarks/>
        public event getNodesWeightingsCompletedEventHandler getNodesWeightingsCompleted;
        
        /// <remarks/>
        public event getNodesWeightingsByLocationCompletedEventHandler getNodesWeightingsByLocationCompleted;
        
        /// <remarks/>
        public event getNoteCompletedEventHandler getNoteCompleted;
        
        /// <remarks/>
        public event getPassiveMonitoringCompletedEventHandler getPassiveMonitoringCompleted;
        
        /// <remarks/>
        public event getPassiveMonitoringByLocationCompletedEventHandler getPassiveMonitoringByLocationCompleted;
        
        /// <remarks/>
        public event getPersistenceCompletedEventHandler getPersistenceCompleted;
        
        /// <remarks/>
        public event getPersistenceByLocationCompletedEventHandler getPersistenceByLocationCompleted;
        
        /// <remarks/>
        public event getPoolNamesCompletedEventHandler getPoolNamesCompleted;
        
        /// <remarks/>
        public event getPriorityEnabledCompletedEventHandler getPriorityEnabledCompleted;
        
        /// <remarks/>
        public event getPriorityEnabledByLocationCompletedEventHandler getPriorityEnabledByLocationCompleted;
        
        /// <remarks/>
        public event getPriorityNodesCompletedEventHandler getPriorityNodesCompleted;
        
        /// <remarks/>
        public event getPriorityNodesByLocationCompletedEventHandler getPriorityNodesByLocationCompleted;
        
        /// <remarks/>
        public event getPriorityValuesCompletedEventHandler getPriorityValuesCompleted;
        
        /// <remarks/>
        public event getPriorityValuesByLocationCompletedEventHandler getPriorityValuesByLocationCompleted;
        
        /// <remarks/>
        public event getQueueTimeoutCompletedEventHandler getQueueTimeoutCompleted;
        
        /// <remarks/>
        public event getQueueTimeoutByLocationCompletedEventHandler getQueueTimeoutByLocationCompleted;
        
        /// <remarks/>
        public event getSMTPSendStartTLSCompletedEventHandler getSMTPSendStartTLSCompleted;
        
        /// <remarks/>
        public event getSMTPSendStartTLSByLocationCompletedEventHandler getSMTPSendStartTLSByLocationCompleted;
        
        /// <remarks/>
        public event getSSLClientAuthCompletedEventHandler getSSLClientAuthCompleted;
        
        /// <remarks/>
        public event getSSLClientAuthByLocationCompletedEventHandler getSSLClientAuthByLocationCompleted;
        
        /// <remarks/>
        public event getSSLEncryptCompletedEventHandler getSSLEncryptCompleted;
        
        /// <remarks/>
        public event getSSLEncryptByLocationCompletedEventHandler getSSLEncryptByLocationCompleted;
        
        /// <remarks/>
        public event getSSLEnhanceCompletedEventHandler getSSLEnhanceCompleted;
        
        /// <remarks/>
        public event getSSLEnhanceByLocationCompletedEventHandler getSSLEnhanceByLocationCompleted;
        
        /// <remarks/>
        public event getSSLSendCloseAlertsCompletedEventHandler getSSLSendCloseAlertsCompleted;
        
        /// <remarks/>
        public event getSSLSendCloseAlertsByLocationCompletedEventHandler getSSLSendCloseAlertsByLocationCompleted;
        
        /// <remarks/>
        public event getSSLServerNameExtensionCompletedEventHandler getSSLServerNameExtensionCompleted;
        
        /// <remarks/>
        public event getSSLServerNameExtensionByLocationCompletedEventHandler getSSLServerNameExtensionByLocationCompleted;
        
        /// <remarks/>
        public event getSSLStrictVerifyCompletedEventHandler getSSLStrictVerifyCompleted;
        
        /// <remarks/>
        public event getSSLStrictVerifyByLocationCompletedEventHandler getSSLStrictVerifyByLocationCompleted;
        
        /// <remarks/>
        public event getTransparentCompletedEventHandler getTransparentCompleted;
        
        /// <remarks/>
        public event getTransparentByLocationCompletedEventHandler getTransparentByLocationCompleted;
        
        /// <remarks/>
        public event getUDPAcceptFromCompletedEventHandler getUDPAcceptFromCompleted;
        
        /// <remarks/>
        public event getUDPAcceptFromByLocationCompletedEventHandler getUDPAcceptFromByLocationCompleted;
        
        /// <remarks/>
        public event getUDPAcceptFromIPMaskCompletedEventHandler getUDPAcceptFromIPMaskCompleted;
        
        /// <remarks/>
        public event getUDPAcceptFromIPMaskByLocationCompletedEventHandler getUDPAcceptFromIPMaskByLocationCompleted;
        
        /// <remarks/>
        public event getWeightingsCompletedEventHandler getWeightingsCompleted;
        
        /// <remarks/>
        public event getWeightingsByLocationCompletedEventHandler getWeightingsByLocationCompleted;
        
        /// <remarks/>
        public event removeDrainingNodesCompletedEventHandler removeDrainingNodesCompleted;
        
        /// <remarks/>
        public event removeDrainingNodesByLocationCompletedEventHandler removeDrainingNodesByLocationCompleted;
        
        /// <remarks/>
        public event removeMonitorsCompletedEventHandler removeMonitorsCompleted;
        
        /// <remarks/>
        public event removeMonitorsByLocationCompletedEventHandler removeMonitorsByLocationCompleted;
        
        /// <remarks/>
        public event removeNodesCompletedEventHandler removeNodesCompleted;
        
        /// <remarks/>
        public event removeNodesByLocationCompletedEventHandler removeNodesByLocationCompleted;
        
        /// <remarks/>
        public event renamePoolCompletedEventHandler renamePoolCompleted;
        
        /// <remarks/>
        public event setAutoscaleCloudcredentialsCompletedEventHandler setAutoscaleCloudcredentialsCompleted;
        
        /// <remarks/>
        public event setAutoscaleCloudcredentialsByLocationCompletedEventHandler setAutoscaleCloudcredentialsByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleClusterCompletedEventHandler setAutoscaleClusterCompleted;
        
        /// <remarks/>
        public event setAutoscaleClusterByLocationCompletedEventHandler setAutoscaleClusterByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleDatacenterCompletedEventHandler setAutoscaleDatacenterCompleted;
        
        /// <remarks/>
        public event setAutoscaleDatacenterByLocationCompletedEventHandler setAutoscaleDatacenterByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleDatastoreCompletedEventHandler setAutoscaleDatastoreCompleted;
        
        /// <remarks/>
        public event setAutoscaleDatastoreByLocationCompletedEventHandler setAutoscaleDatastoreByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleEnabledCompletedEventHandler setAutoscaleEnabledCompleted;
        
        /// <remarks/>
        public event setAutoscaleEnabledByLocationCompletedEventHandler setAutoscaleEnabledByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleExternalCompletedEventHandler setAutoscaleExternalCompleted;
        
        /// <remarks/>
        public event setAutoscaleExternalByLocationCompletedEventHandler setAutoscaleExternalByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleHysteresisCompletedEventHandler setAutoscaleHysteresisCompleted;
        
        /// <remarks/>
        public event setAutoscaleHysteresisByLocationCompletedEventHandler setAutoscaleHysteresisByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleImageidCompletedEventHandler setAutoscaleImageidCompleted;
        
        /// <remarks/>
        public event setAutoscaleImageidByLocationCompletedEventHandler setAutoscaleImageidByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleIpstouseCompletedEventHandler setAutoscaleIpstouseCompleted;
        
        /// <remarks/>
        public event setAutoscaleIpstouseByLocationCompletedEventHandler setAutoscaleIpstouseByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleLastnodeIdletimeCompletedEventHandler setAutoscaleLastnodeIdletimeCompleted;
        
        /// <remarks/>
        public event setAutoscaleLastnodeIdletimeByLocationCompletedEventHandler setAutoscaleLastnodeIdletimeByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleMaxNodesCompletedEventHandler setAutoscaleMaxNodesCompleted;
        
        /// <remarks/>
        public event setAutoscaleMaxNodesByLocationCompletedEventHandler setAutoscaleMaxNodesByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleMinNodesCompletedEventHandler setAutoscaleMinNodesCompleted;
        
        /// <remarks/>
        public event setAutoscaleMinNodesByLocationCompletedEventHandler setAutoscaleMinNodesByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleNameCompletedEventHandler setAutoscaleNameCompleted;
        
        /// <remarks/>
        public event setAutoscaleNameByLocationCompletedEventHandler setAutoscaleNameByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscalePortCompletedEventHandler setAutoscalePortCompleted;
        
        /// <remarks/>
        public event setAutoscalePortByLocationCompletedEventHandler setAutoscalePortByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleRefractoryCompletedEventHandler setAutoscaleRefractoryCompleted;
        
        /// <remarks/>
        public event setAutoscaleRefractoryByLocationCompletedEventHandler setAutoscaleRefractoryByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleResponseTimeCompletedEventHandler setAutoscaleResponseTimeCompleted;
        
        /// <remarks/>
        public event setAutoscaleResponseTimeByLocationCompletedEventHandler setAutoscaleResponseTimeByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleScaledownLevelCompletedEventHandler setAutoscaleScaledownLevelCompleted;
        
        /// <remarks/>
        public event setAutoscaleScaledownLevelByLocationCompletedEventHandler setAutoscaleScaledownLevelByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleScaleupLevelCompletedEventHandler setAutoscaleScaleupLevelCompleted;
        
        /// <remarks/>
        public event setAutoscaleScaleupLevelByLocationCompletedEventHandler setAutoscaleScaleupLevelByLocationCompleted;
        
        /// <remarks/>
        public event setAutoscaleSizeidCompletedEventHandler setAutoscaleSizeidCompleted;
        
        /// <remarks/>
        public event setAutoscaleSizeidByLocationCompletedEventHandler setAutoscaleSizeidByLocationCompleted;
        
        /// <remarks/>
        public event setBandwidthClassCompletedEventHandler setBandwidthClassCompleted;
        
        /// <remarks/>
        public event setBandwidthClassByLocationCompletedEventHandler setBandwidthClassByLocationCompleted;
        
        /// <remarks/>
        public event setDisabledNodesCompletedEventHandler setDisabledNodesCompleted;
        
        /// <remarks/>
        public event setDisabledNodesByLocationCompletedEventHandler setDisabledNodesByLocationCompleted;
        
        /// <remarks/>
        public event setDrainingNodesCompletedEventHandler setDrainingNodesCompleted;
        
        /// <remarks/>
        public event setDrainingNodesByLocationCompletedEventHandler setDrainingNodesByLocationCompleted;
        
        /// <remarks/>
        public event setErrorFileCompletedEventHandler setErrorFileCompleted;
        
        /// <remarks/>
        public event setFTPSupportRfc2428CompletedEventHandler setFTPSupportRfc2428Completed;
        
        /// <remarks/>
        public event setFTPSupportRfc2428ByLocationCompletedEventHandler setFTPSupportRfc2428ByLocationCompleted;
        
        /// <remarks/>
        public event setFailpoolCompletedEventHandler setFailpoolCompleted;
        
        /// <remarks/>
        public event setFailpoolByLocationCompletedEventHandler setFailpoolByLocationCompleted;
        
        /// <remarks/>
        public event setKeepaliveCompletedEventHandler setKeepaliveCompleted;
        
        /// <remarks/>
        public event setKeepaliveByLocationCompletedEventHandler setKeepaliveByLocationCompleted;
        
        /// <remarks/>
        public event setKeepaliveNonIdempotentCompletedEventHandler setKeepaliveNonIdempotentCompleted;
        
        /// <remarks/>
        public event setKeepaliveNonIdempotentByLocationCompletedEventHandler setKeepaliveNonIdempotentByLocationCompleted;
        
        /// <remarks/>
        public event setLoadBalancingAlgorithmCompletedEventHandler setLoadBalancingAlgorithmCompleted;
        
        /// <remarks/>
        public event setLoadBalancingAlgorithmByLocationCompletedEventHandler setLoadBalancingAlgorithmByLocationCompleted;
        
        /// <remarks/>
        public event setMaxConnectTimeCompletedEventHandler setMaxConnectTimeCompleted;
        
        /// <remarks/>
        public event setMaxConnectTimeByLocationCompletedEventHandler setMaxConnectTimeByLocationCompleted;
        
        /// <remarks/>
        public event setMaxConnectionsPernodeCompletedEventHandler setMaxConnectionsPernodeCompleted;
        
        /// <remarks/>
        public event setMaxConnectionsPernodeByLocationCompletedEventHandler setMaxConnectionsPernodeByLocationCompleted;
        
        /// <remarks/>
        public event setMaxIdleConnectionsPerNodeCompletedEventHandler setMaxIdleConnectionsPerNodeCompleted;
        
        /// <remarks/>
        public event setMaxIdleConnectionsPerNodeByLocationCompletedEventHandler setMaxIdleConnectionsPerNodeByLocationCompleted;
        
        /// <remarks/>
        public event setMaxKeepalivesPerNodeCompletedEventHandler setMaxKeepalivesPerNodeCompleted;
        
        /// <remarks/>
        public event setMaxKeepalivesPerNodeByLocationCompletedEventHandler setMaxKeepalivesPerNodeByLocationCompleted;
        
        /// <remarks/>
        public event setMaxQueueSizeCompletedEventHandler setMaxQueueSizeCompleted;
        
        /// <remarks/>
        public event setMaxQueueSizeByLocationCompletedEventHandler setMaxQueueSizeByLocationCompleted;
        
        /// <remarks/>
        public event setMaxReplyTimeCompletedEventHandler setMaxReplyTimeCompleted;
        
        /// <remarks/>
        public event setMaxReplyTimeByLocationCompletedEventHandler setMaxReplyTimeByLocationCompleted;
        
        /// <remarks/>
        public event setMonitorsCompletedEventHandler setMonitorsCompleted;
        
        /// <remarks/>
        public event setMonitorsByLocationCompletedEventHandler setMonitorsByLocationCompleted;
        
        /// <remarks/>
        public event setNodeConnCloseCompletedEventHandler setNodeConnCloseCompleted;
        
        /// <remarks/>
        public event setNodeConnCloseByLocationCompletedEventHandler setNodeConnCloseByLocationCompleted;
        
        /// <remarks/>
        public event setNodeConnectionAttemptsCompletedEventHandler setNodeConnectionAttemptsCompleted;
        
        /// <remarks/>
        public event setNodeConnectionAttemptsByLocationCompletedEventHandler setNodeConnectionAttemptsByLocationCompleted;
        
        /// <remarks/>
        public event setNodeFailTimeCompletedEventHandler setNodeFailTimeCompleted;
        
        /// <remarks/>
        public event setNodeFailTimeByLocationCompletedEventHandler setNodeFailTimeByLocationCompleted;
        
        /// <remarks/>
        public event setNodeUseNagleCompletedEventHandler setNodeUseNagleCompleted;
        
        /// <remarks/>
        public event setNodeUseNagleByLocationCompletedEventHandler setNodeUseNagleByLocationCompleted;
        
        /// <remarks/>
        public event setNodesCompletedEventHandler setNodesCompleted;
        
        /// <remarks/>
        public event setNodesByLocationCompletedEventHandler setNodesByLocationCompleted;
        
        /// <remarks/>
        public event setNodesPriorityValueCompletedEventHandler setNodesPriorityValueCompleted;
        
        /// <remarks/>
        public event setNodesPriorityValueByLocationCompletedEventHandler setNodesPriorityValueByLocationCompleted;
        
        /// <remarks/>
        public event setNodesWeightingsCompletedEventHandler setNodesWeightingsCompleted;
        
        /// <remarks/>
        public event setNodesWeightingsByLocationCompletedEventHandler setNodesWeightingsByLocationCompleted;
        
        /// <remarks/>
        public event setNoteCompletedEventHandler setNoteCompleted;
        
        /// <remarks/>
        public event setPassiveMonitoringCompletedEventHandler setPassiveMonitoringCompleted;
        
        /// <remarks/>
        public event setPassiveMonitoringByLocationCompletedEventHandler setPassiveMonitoringByLocationCompleted;
        
        /// <remarks/>
        public event setPersistenceCompletedEventHandler setPersistenceCompleted;
        
        /// <remarks/>
        public event setPersistenceByLocationCompletedEventHandler setPersistenceByLocationCompleted;
        
        /// <remarks/>
        public event setPriorityEnabledCompletedEventHandler setPriorityEnabledCompleted;
        
        /// <remarks/>
        public event setPriorityEnabledByLocationCompletedEventHandler setPriorityEnabledByLocationCompleted;
        
        /// <remarks/>
        public event setPriorityNodesCompletedEventHandler setPriorityNodesCompleted;
        
        /// <remarks/>
        public event setPriorityNodesByLocationCompletedEventHandler setPriorityNodesByLocationCompleted;
        
        /// <remarks/>
        public event setQueueTimeoutCompletedEventHandler setQueueTimeoutCompleted;
        
        /// <remarks/>
        public event setQueueTimeoutByLocationCompletedEventHandler setQueueTimeoutByLocationCompleted;
        
        /// <remarks/>
        public event setSMTPSendStartTLSCompletedEventHandler setSMTPSendStartTLSCompleted;
        
        /// <remarks/>
        public event setSMTPSendStartTLSByLocationCompletedEventHandler setSMTPSendStartTLSByLocationCompleted;
        
        /// <remarks/>
        public event setSSLClientAuthCompletedEventHandler setSSLClientAuthCompleted;
        
        /// <remarks/>
        public event setSSLClientAuthByLocationCompletedEventHandler setSSLClientAuthByLocationCompleted;
        
        /// <remarks/>
        public event setSSLEncryptCompletedEventHandler setSSLEncryptCompleted;
        
        /// <remarks/>
        public event setSSLEncryptByLocationCompletedEventHandler setSSLEncryptByLocationCompleted;
        
        /// <remarks/>
        public event setSSLEnhanceCompletedEventHandler setSSLEnhanceCompleted;
        
        /// <remarks/>
        public event setSSLEnhanceByLocationCompletedEventHandler setSSLEnhanceByLocationCompleted;
        
        /// <remarks/>
        public event setSSLSendCloseAlertsCompletedEventHandler setSSLSendCloseAlertsCompleted;
        
        /// <remarks/>
        public event setSSLSendCloseAlertsByLocationCompletedEventHandler setSSLSendCloseAlertsByLocationCompleted;
        
        /// <remarks/>
        public event setSSLServerNameExtensionCompletedEventHandler setSSLServerNameExtensionCompleted;
        
        /// <remarks/>
        public event setSSLServerNameExtensionByLocationCompletedEventHandler setSSLServerNameExtensionByLocationCompleted;
        
        /// <remarks/>
        public event setSSLStrictVerifyCompletedEventHandler setSSLStrictVerifyCompleted;
        
        /// <remarks/>
        public event setSSLStrictVerifyByLocationCompletedEventHandler setSSLStrictVerifyByLocationCompleted;
        
        /// <remarks/>
        public event setTransparentCompletedEventHandler setTransparentCompleted;
        
        /// <remarks/>
        public event setTransparentByLocationCompletedEventHandler setTransparentByLocationCompleted;
        
        /// <remarks/>
        public event setUDPAcceptFromCompletedEventHandler setUDPAcceptFromCompleted;
        
        /// <remarks/>
        public event setUDPAcceptFromByLocationCompletedEventHandler setUDPAcceptFromByLocationCompleted;
        
        /// <remarks/>
        public event setUDPAcceptFromIPMaskCompletedEventHandler setUDPAcceptFromIPMaskCompleted;
        
        /// <remarks/>
        public event setUDPAcceptFromIPMaskByLocationCompletedEventHandler setUDPAcceptFromIPMaskByLocationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addAutoScaledPool", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addAutoScaledPool(string[] names, string[][] nodes) {
            this.Invoke("addAutoScaledPool", new object[] {
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void addAutoScaledPoolAsync(string[] names, string[][] nodes) {
            this.addAutoScaledPoolAsync(names, nodes, null);
        }
        
        /// <remarks/>
        public void addAutoScaledPoolAsync(string[] names, string[][] nodes, object userState) {
            if ((this.addAutoScaledPoolOperationCompleted == null)) {
                this.addAutoScaledPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddAutoScaledPoolOperationCompleted);
            }
            this.InvokeAsync("addAutoScaledPool", new object[] {
                        names,
                        nodes}, this.addAutoScaledPoolOperationCompleted, userState);
        }
        
        private void OnaddAutoScaledPoolOperationCompleted(object arg) {
            if ((this.addAutoScaledPoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addAutoScaledPoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addDrainingNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addDrainingNodes(string[] names, string[][] values) {
            this.Invoke("addDrainingNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void addDrainingNodesAsync(string[] names, string[][] values) {
            this.addDrainingNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void addDrainingNodesAsync(string[] names, string[][] values, object userState) {
            if ((this.addDrainingNodesOperationCompleted == null)) {
                this.addDrainingNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDrainingNodesOperationCompleted);
            }
            this.InvokeAsync("addDrainingNodes", new object[] {
                        names,
                        values}, this.addDrainingNodesOperationCompleted, userState);
        }
        
        private void OnaddDrainingNodesOperationCompleted(object arg) {
            if ((this.addDrainingNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDrainingNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addDrainingNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addDrainingNodesByLocation(string location, string[] names, string[][] values) {
            this.Invoke("addDrainingNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void addDrainingNodesByLocationAsync(string location, string[] names, string[][] values) {
            this.addDrainingNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void addDrainingNodesByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.addDrainingNodesByLocationOperationCompleted == null)) {
                this.addDrainingNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDrainingNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("addDrainingNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.addDrainingNodesByLocationOperationCompleted, userState);
        }
        
        private void OnaddDrainingNodesByLocationOperationCompleted(object arg) {
            if ((this.addDrainingNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDrainingNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addMonitors", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addMonitors(string[] names, string[][] values) {
            this.Invoke("addMonitors", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void addMonitorsAsync(string[] names, string[][] values) {
            this.addMonitorsAsync(names, values, null);
        }
        
        /// <remarks/>
        public void addMonitorsAsync(string[] names, string[][] values, object userState) {
            if ((this.addMonitorsOperationCompleted == null)) {
                this.addMonitorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMonitorsOperationCompleted);
            }
            this.InvokeAsync("addMonitors", new object[] {
                        names,
                        values}, this.addMonitorsOperationCompleted, userState);
        }
        
        private void OnaddMonitorsOperationCompleted(object arg) {
            if ((this.addMonitorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMonitorsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addMonitorsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addMonitorsByLocation(string location, string[] names, string[][] values) {
            this.Invoke("addMonitorsByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void addMonitorsByLocationAsync(string location, string[] names, string[][] values) {
            this.addMonitorsByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void addMonitorsByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.addMonitorsByLocationOperationCompleted == null)) {
                this.addMonitorsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMonitorsByLocationOperationCompleted);
            }
            this.InvokeAsync("addMonitorsByLocation", new object[] {
                        location,
                        names,
                        values}, this.addMonitorsByLocationOperationCompleted, userState);
        }
        
        private void OnaddMonitorsByLocationOperationCompleted(object arg) {
            if ((this.addMonitorsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMonitorsByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addNodes(string[] names, string[][] values) {
            this.Invoke("addNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void addNodesAsync(string[] names, string[][] values) {
            this.addNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void addNodesAsync(string[] names, string[][] values, object userState) {
            if ((this.addNodesOperationCompleted == null)) {
                this.addNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddNodesOperationCompleted);
            }
            this.InvokeAsync("addNodes", new object[] {
                        names,
                        values}, this.addNodesOperationCompleted, userState);
        }
        
        private void OnaddNodesOperationCompleted(object arg) {
            if ((this.addNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addNodesByLocation(string location, string[] names, string[][] values) {
            this.Invoke("addNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void addNodesByLocationAsync(string location, string[] names, string[][] values) {
            this.addNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void addNodesByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.addNodesByLocationOperationCompleted == null)) {
                this.addNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("addNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.addNodesByLocationOperationCompleted, userState);
        }
        
        private void OnaddNodesByLocationOperationCompleted(object arg) {
            if ((this.addNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/addPool", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void addPool(string[] names, string[][] nodes) {
            this.Invoke("addPool", new object[] {
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void addPoolAsync(string[] names, string[][] nodes) {
            this.addPoolAsync(names, nodes, null);
        }
        
        /// <remarks/>
        public void addPoolAsync(string[] names, string[][] nodes, object userState) {
            if ((this.addPoolOperationCompleted == null)) {
                this.addPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddPoolOperationCompleted);
            }
            this.InvokeAsync("addPool", new object[] {
                        names,
                        nodes}, this.addPoolOperationCompleted, userState);
        }
        
        private void OnaddPoolOperationCompleted(object arg) {
            if ((this.addPoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addPoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/copyPool", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void copyPool(string[] names, string[] new_names) {
            this.Invoke("copyPool", new object[] {
                        names,
                        new_names});
        }
        
        /// <remarks/>
        public void copyPoolAsync(string[] names, string[] new_names) {
            this.copyPoolAsync(names, new_names, null);
        }
        
        /// <remarks/>
        public void copyPoolAsync(string[] names, string[] new_names, object userState) {
            if ((this.copyPoolOperationCompleted == null)) {
                this.copyPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OncopyPoolOperationCompleted);
            }
            this.InvokeAsync("copyPool", new object[] {
                        names,
                        new_names}, this.copyPoolOperationCompleted, userState);
        }
        
        private void OncopyPoolOperationCompleted(object arg) {
            if ((this.copyPoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.copyPoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/deletePool", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void deletePool(string[] names) {
            this.Invoke("deletePool", new object[] {
                        names});
        }
        
        /// <remarks/>
        public void deletePoolAsync(string[] names) {
            this.deletePoolAsync(names, null);
        }
        
        /// <remarks/>
        public void deletePoolAsync(string[] names, object userState) {
            if ((this.deletePoolOperationCompleted == null)) {
                this.deletePoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletePoolOperationCompleted);
            }
            this.InvokeAsync("deletePool", new object[] {
                        names}, this.deletePoolOperationCompleted, userState);
        }
        
        private void OndeletePoolOperationCompleted(object arg) {
            if ((this.deletePoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletePoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/disableNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void disableNodes(string[] names, string[][] nodes) {
            this.Invoke("disableNodes", new object[] {
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void disableNodesAsync(string[] names, string[][] nodes) {
            this.disableNodesAsync(names, nodes, null);
        }
        
        /// <remarks/>
        public void disableNodesAsync(string[] names, string[][] nodes, object userState) {
            if ((this.disableNodesOperationCompleted == null)) {
                this.disableNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndisableNodesOperationCompleted);
            }
            this.InvokeAsync("disableNodes", new object[] {
                        names,
                        nodes}, this.disableNodesOperationCompleted, userState);
        }
        
        private void OndisableNodesOperationCompleted(object arg) {
            if ((this.disableNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.disableNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/disableNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void disableNodesByLocation(string location, string[] names, string[][] nodes) {
            this.Invoke("disableNodesByLocation", new object[] {
                        location,
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void disableNodesByLocationAsync(string location, string[] names, string[][] nodes) {
            this.disableNodesByLocationAsync(location, names, nodes, null);
        }
        
        /// <remarks/>
        public void disableNodesByLocationAsync(string location, string[] names, string[][] nodes, object userState) {
            if ((this.disableNodesByLocationOperationCompleted == null)) {
                this.disableNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OndisableNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("disableNodesByLocation", new object[] {
                        location,
                        names,
                        nodes}, this.disableNodesByLocationOperationCompleted, userState);
        }
        
        private void OndisableNodesByLocationOperationCompleted(object arg) {
            if ((this.disableNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.disableNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/enableNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void enableNodes(string[] names, string[][] nodes) {
            this.Invoke("enableNodes", new object[] {
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void enableNodesAsync(string[] names, string[][] nodes) {
            this.enableNodesAsync(names, nodes, null);
        }
        
        /// <remarks/>
        public void enableNodesAsync(string[] names, string[][] nodes, object userState) {
            if ((this.enableNodesOperationCompleted == null)) {
                this.enableNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnenableNodesOperationCompleted);
            }
            this.InvokeAsync("enableNodes", new object[] {
                        names,
                        nodes}, this.enableNodesOperationCompleted, userState);
        }
        
        private void OnenableNodesOperationCompleted(object arg) {
            if ((this.enableNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.enableNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/enableNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void enableNodesByLocation(string location, string[] names, string[][] nodes) {
            this.Invoke("enableNodesByLocation", new object[] {
                        location,
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void enableNodesByLocationAsync(string location, string[] names, string[][] nodes) {
            this.enableNodesByLocationAsync(location, names, nodes, null);
        }
        
        /// <remarks/>
        public void enableNodesByLocationAsync(string location, string[] names, string[][] nodes, object userState) {
            if ((this.enableNodesByLocationOperationCompleted == null)) {
                this.enableNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnenableNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("enableNodesByLocation", new object[] {
                        location,
                        names,
                        nodes}, this.enableNodesByLocationOperationCompleted, userState);
        }
        
        private void OnenableNodesByLocationOperationCompleted(object arg) {
            if ((this.enableNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.enableNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleCloudcredentials", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleCloudcredentials(string[] names) {
            object[] results = this.Invoke("getAutoscaleCloudcredentials", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleCloudcredentialsAsync(string[] names) {
            this.getAutoscaleCloudcredentialsAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleCloudcredentialsAsync(string[] names, object userState) {
            if ((this.getAutoscaleCloudcredentialsOperationCompleted == null)) {
                this.getAutoscaleCloudcredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleCloudcredentialsOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleCloudcredentials", new object[] {
                        names}, this.getAutoscaleCloudcredentialsOperationCompleted, userState);
        }
        
        private void OngetAutoscaleCloudcredentialsOperationCompleted(object arg) {
            if ((this.getAutoscaleCloudcredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleCloudcredentialsCompleted(this, new getAutoscaleCloudcredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleCloudcredentialsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleCloudcredentialsByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleCloudcredentialsByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleCloudcredentialsByLocationAsync(string location, string[] names) {
            this.getAutoscaleCloudcredentialsByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleCloudcredentialsByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleCloudcredentialsByLocationOperationCompleted == null)) {
                this.getAutoscaleCloudcredentialsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleCloudcredentialsByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleCloudcredentialsByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleCloudcredentialsByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleCloudcredentialsByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleCloudcredentialsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleCloudcredentialsByLocationCompleted(this, new getAutoscaleCloudcredentialsByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleCluster", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleCluster(string[] names) {
            object[] results = this.Invoke("getAutoscaleCluster", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleClusterAsync(string[] names) {
            this.getAutoscaleClusterAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleClusterAsync(string[] names, object userState) {
            if ((this.getAutoscaleClusterOperationCompleted == null)) {
                this.getAutoscaleClusterOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleClusterOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleCluster", new object[] {
                        names}, this.getAutoscaleClusterOperationCompleted, userState);
        }
        
        private void OngetAutoscaleClusterOperationCompleted(object arg) {
            if ((this.getAutoscaleClusterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleClusterCompleted(this, new getAutoscaleClusterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleClusterByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleClusterByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleClusterByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleClusterByLocationAsync(string location, string[] names) {
            this.getAutoscaleClusterByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleClusterByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleClusterByLocationOperationCompleted == null)) {
                this.getAutoscaleClusterByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleClusterByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleClusterByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleClusterByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleClusterByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleClusterByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleClusterByLocationCompleted(this, new getAutoscaleClusterByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatacenter", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleDatacenter(string[] names) {
            object[] results = this.Invoke("getAutoscaleDatacenter", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleDatacenterAsync(string[] names) {
            this.getAutoscaleDatacenterAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleDatacenterAsync(string[] names, object userState) {
            if ((this.getAutoscaleDatacenterOperationCompleted == null)) {
                this.getAutoscaleDatacenterOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleDatacenterOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleDatacenter", new object[] {
                        names}, this.getAutoscaleDatacenterOperationCompleted, userState);
        }
        
        private void OngetAutoscaleDatacenterOperationCompleted(object arg) {
            if ((this.getAutoscaleDatacenterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleDatacenterCompleted(this, new getAutoscaleDatacenterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatacenterByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleDatacenterByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleDatacenterByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleDatacenterByLocationAsync(string location, string[] names) {
            this.getAutoscaleDatacenterByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleDatacenterByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleDatacenterByLocationOperationCompleted == null)) {
                this.getAutoscaleDatacenterByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleDatacenterByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleDatacenterByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleDatacenterByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleDatacenterByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleDatacenterByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleDatacenterByLocationCompleted(this, new getAutoscaleDatacenterByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatastore", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleDatastore(string[] names) {
            object[] results = this.Invoke("getAutoscaleDatastore", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleDatastoreAsync(string[] names) {
            this.getAutoscaleDatastoreAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleDatastoreAsync(string[] names, object userState) {
            if ((this.getAutoscaleDatastoreOperationCompleted == null)) {
                this.getAutoscaleDatastoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleDatastoreOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleDatastore", new object[] {
                        names}, this.getAutoscaleDatastoreOperationCompleted, userState);
        }
        
        private void OngetAutoscaleDatastoreOperationCompleted(object arg) {
            if ((this.getAutoscaleDatastoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleDatastoreCompleted(this, new getAutoscaleDatastoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatastoreByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleDatastoreByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleDatastoreByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleDatastoreByLocationAsync(string location, string[] names) {
            this.getAutoscaleDatastoreByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleDatastoreByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleDatastoreByLocationOperationCompleted == null)) {
                this.getAutoscaleDatastoreByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleDatastoreByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleDatastoreByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleDatastoreByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleDatastoreByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleDatastoreByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleDatastoreByLocationCompleted(this, new getAutoscaleDatastoreByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleEnabled", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getAutoscaleEnabled(string[] names) {
            object[] results = this.Invoke("getAutoscaleEnabled", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleEnabledAsync(string[] names) {
            this.getAutoscaleEnabledAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleEnabledAsync(string[] names, object userState) {
            if ((this.getAutoscaleEnabledOperationCompleted == null)) {
                this.getAutoscaleEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleEnabledOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleEnabled", new object[] {
                        names}, this.getAutoscaleEnabledOperationCompleted, userState);
        }
        
        private void OngetAutoscaleEnabledOperationCompleted(object arg) {
            if ((this.getAutoscaleEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleEnabledCompleted(this, new getAutoscaleEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleEnabledByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getAutoscaleEnabledByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleEnabledByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleEnabledByLocationAsync(string location, string[] names) {
            this.getAutoscaleEnabledByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleEnabledByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleEnabledByLocationOperationCompleted == null)) {
                this.getAutoscaleEnabledByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleEnabledByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleEnabledByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleEnabledByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleEnabledByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleEnabledByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleEnabledByLocationCompleted(this, new getAutoscaleEnabledByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleExternal", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getAutoscaleExternal(string[] names) {
            object[] results = this.Invoke("getAutoscaleExternal", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleExternalAsync(string[] names) {
            this.getAutoscaleExternalAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleExternalAsync(string[] names, object userState) {
            if ((this.getAutoscaleExternalOperationCompleted == null)) {
                this.getAutoscaleExternalOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleExternalOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleExternal", new object[] {
                        names}, this.getAutoscaleExternalOperationCompleted, userState);
        }
        
        private void OngetAutoscaleExternalOperationCompleted(object arg) {
            if ((this.getAutoscaleExternalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleExternalCompleted(this, new getAutoscaleExternalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleExternalByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getAutoscaleExternalByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleExternalByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleExternalByLocationAsync(string location, string[] names) {
            this.getAutoscaleExternalByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleExternalByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleExternalByLocationOperationCompleted == null)) {
                this.getAutoscaleExternalByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleExternalByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleExternalByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleExternalByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleExternalByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleExternalByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleExternalByLocationCompleted(this, new getAutoscaleExternalByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleHysteresis", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleHysteresis(string[] names) {
            object[] results = this.Invoke("getAutoscaleHysteresis", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleHysteresisAsync(string[] names) {
            this.getAutoscaleHysteresisAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleHysteresisAsync(string[] names, object userState) {
            if ((this.getAutoscaleHysteresisOperationCompleted == null)) {
                this.getAutoscaleHysteresisOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleHysteresisOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleHysteresis", new object[] {
                        names}, this.getAutoscaleHysteresisOperationCompleted, userState);
        }
        
        private void OngetAutoscaleHysteresisOperationCompleted(object arg) {
            if ((this.getAutoscaleHysteresisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleHysteresisCompleted(this, new getAutoscaleHysteresisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleHysteresisByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleHysteresisByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleHysteresisByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleHysteresisByLocationAsync(string location, string[] names) {
            this.getAutoscaleHysteresisByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleHysteresisByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleHysteresisByLocationOperationCompleted == null)) {
                this.getAutoscaleHysteresisByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleHysteresisByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleHysteresisByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleHysteresisByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleHysteresisByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleHysteresisByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleHysteresisByLocationCompleted(this, new getAutoscaleHysteresisByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleImageid", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleImageid(string[] names) {
            object[] results = this.Invoke("getAutoscaleImageid", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleImageidAsync(string[] names) {
            this.getAutoscaleImageidAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleImageidAsync(string[] names, object userState) {
            if ((this.getAutoscaleImageidOperationCompleted == null)) {
                this.getAutoscaleImageidOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleImageidOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleImageid", new object[] {
                        names}, this.getAutoscaleImageidOperationCompleted, userState);
        }
        
        private void OngetAutoscaleImageidOperationCompleted(object arg) {
            if ((this.getAutoscaleImageidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleImageidCompleted(this, new getAutoscaleImageidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleImageidByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleImageidByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleImageidByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleImageidByLocationAsync(string location, string[] names) {
            this.getAutoscaleImageidByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleImageidByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleImageidByLocationOperationCompleted == null)) {
                this.getAutoscaleImageidByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleImageidByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleImageidByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleImageidByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleImageidByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleImageidByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleImageidByLocationCompleted(this, new getAutoscaleImageidByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleIpstouse", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public PoolAutoscaleIpstouse[] getAutoscaleIpstouse(string[] names) {
            object[] results = this.Invoke("getAutoscaleIpstouse", new object[] {
                        names});
            return ((PoolAutoscaleIpstouse[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleIpstouseAsync(string[] names) {
            this.getAutoscaleIpstouseAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleIpstouseAsync(string[] names, object userState) {
            if ((this.getAutoscaleIpstouseOperationCompleted == null)) {
                this.getAutoscaleIpstouseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleIpstouseOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleIpstouse", new object[] {
                        names}, this.getAutoscaleIpstouseOperationCompleted, userState);
        }
        
        private void OngetAutoscaleIpstouseOperationCompleted(object arg) {
            if ((this.getAutoscaleIpstouseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleIpstouseCompleted(this, new getAutoscaleIpstouseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleIpstouseByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public PoolAutoscaleIpstouse[] getAutoscaleIpstouseByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleIpstouseByLocation", new object[] {
                        location,
                        names});
            return ((PoolAutoscaleIpstouse[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleIpstouseByLocationAsync(string location, string[] names) {
            this.getAutoscaleIpstouseByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleIpstouseByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleIpstouseByLocationOperationCompleted == null)) {
                this.getAutoscaleIpstouseByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleIpstouseByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleIpstouseByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleIpstouseByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleIpstouseByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleIpstouseByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleIpstouseByLocationCompleted(this, new getAutoscaleIpstouseByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleLastnodeIdletime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleLastnodeIdletime(string[] names) {
            object[] results = this.Invoke("getAutoscaleLastnodeIdletime", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleLastnodeIdletimeAsync(string[] names) {
            this.getAutoscaleLastnodeIdletimeAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleLastnodeIdletimeAsync(string[] names, object userState) {
            if ((this.getAutoscaleLastnodeIdletimeOperationCompleted == null)) {
                this.getAutoscaleLastnodeIdletimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleLastnodeIdletimeOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleLastnodeIdletime", new object[] {
                        names}, this.getAutoscaleLastnodeIdletimeOperationCompleted, userState);
        }
        
        private void OngetAutoscaleLastnodeIdletimeOperationCompleted(object arg) {
            if ((this.getAutoscaleLastnodeIdletimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleLastnodeIdletimeCompleted(this, new getAutoscaleLastnodeIdletimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleLastnodeIdletimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleLastnodeIdletimeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleLastnodeIdletimeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleLastnodeIdletimeByLocationAsync(string location, string[] names) {
            this.getAutoscaleLastnodeIdletimeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleLastnodeIdletimeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleLastnodeIdletimeByLocationOperationCompleted == null)) {
                this.getAutoscaleLastnodeIdletimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleLastnodeIdletimeByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleLastnodeIdletimeByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleLastnodeIdletimeByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleLastnodeIdletimeByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleLastnodeIdletimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleLastnodeIdletimeByLocationCompleted(this, new getAutoscaleLastnodeIdletimeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMaxNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleMaxNodes(string[] names) {
            object[] results = this.Invoke("getAutoscaleMaxNodes", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleMaxNodesAsync(string[] names) {
            this.getAutoscaleMaxNodesAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleMaxNodesAsync(string[] names, object userState) {
            if ((this.getAutoscaleMaxNodesOperationCompleted == null)) {
                this.getAutoscaleMaxNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleMaxNodesOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleMaxNodes", new object[] {
                        names}, this.getAutoscaleMaxNodesOperationCompleted, userState);
        }
        
        private void OngetAutoscaleMaxNodesOperationCompleted(object arg) {
            if ((this.getAutoscaleMaxNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleMaxNodesCompleted(this, new getAutoscaleMaxNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMaxNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleMaxNodesByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleMaxNodesByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleMaxNodesByLocationAsync(string location, string[] names) {
            this.getAutoscaleMaxNodesByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleMaxNodesByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleMaxNodesByLocationOperationCompleted == null)) {
                this.getAutoscaleMaxNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleMaxNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleMaxNodesByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleMaxNodesByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleMaxNodesByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleMaxNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleMaxNodesByLocationCompleted(this, new getAutoscaleMaxNodesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMinNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleMinNodes(string[] names) {
            object[] results = this.Invoke("getAutoscaleMinNodes", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleMinNodesAsync(string[] names) {
            this.getAutoscaleMinNodesAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleMinNodesAsync(string[] names, object userState) {
            if ((this.getAutoscaleMinNodesOperationCompleted == null)) {
                this.getAutoscaleMinNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleMinNodesOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleMinNodes", new object[] {
                        names}, this.getAutoscaleMinNodesOperationCompleted, userState);
        }
        
        private void OngetAutoscaleMinNodesOperationCompleted(object arg) {
            if ((this.getAutoscaleMinNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleMinNodesCompleted(this, new getAutoscaleMinNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMinNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleMinNodesByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleMinNodesByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleMinNodesByLocationAsync(string location, string[] names) {
            this.getAutoscaleMinNodesByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleMinNodesByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleMinNodesByLocationOperationCompleted == null)) {
                this.getAutoscaleMinNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleMinNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleMinNodesByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleMinNodesByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleMinNodesByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleMinNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleMinNodesByLocationCompleted(this, new getAutoscaleMinNodesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleName", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleName(string[] names) {
            object[] results = this.Invoke("getAutoscaleName", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleNameAsync(string[] names) {
            this.getAutoscaleNameAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleNameAsync(string[] names, object userState) {
            if ((this.getAutoscaleNameOperationCompleted == null)) {
                this.getAutoscaleNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleNameOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleName", new object[] {
                        names}, this.getAutoscaleNameOperationCompleted, userState);
        }
        
        private void OngetAutoscaleNameOperationCompleted(object arg) {
            if ((this.getAutoscaleNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleNameCompleted(this, new getAutoscaleNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleNameByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleNameByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleNameByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleNameByLocationAsync(string location, string[] names) {
            this.getAutoscaleNameByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleNameByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleNameByLocationOperationCompleted == null)) {
                this.getAutoscaleNameByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleNameByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleNameByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleNameByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleNameByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleNameByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleNameByLocationCompleted(this, new getAutoscaleNameByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscalePort", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscalePort(string[] names) {
            object[] results = this.Invoke("getAutoscalePort", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscalePortAsync(string[] names) {
            this.getAutoscalePortAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscalePortAsync(string[] names, object userState) {
            if ((this.getAutoscalePortOperationCompleted == null)) {
                this.getAutoscalePortOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscalePortOperationCompleted);
            }
            this.InvokeAsync("getAutoscalePort", new object[] {
                        names}, this.getAutoscalePortOperationCompleted, userState);
        }
        
        private void OngetAutoscalePortOperationCompleted(object arg) {
            if ((this.getAutoscalePortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscalePortCompleted(this, new getAutoscalePortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscalePortByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscalePortByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscalePortByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscalePortByLocationAsync(string location, string[] names) {
            this.getAutoscalePortByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscalePortByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscalePortByLocationOperationCompleted == null)) {
                this.getAutoscalePortByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscalePortByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscalePortByLocation", new object[] {
                        location,
                        names}, this.getAutoscalePortByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscalePortByLocationOperationCompleted(object arg) {
            if ((this.getAutoscalePortByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscalePortByLocationCompleted(this, new getAutoscalePortByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleRefractory", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleRefractory(string[] names) {
            object[] results = this.Invoke("getAutoscaleRefractory", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleRefractoryAsync(string[] names) {
            this.getAutoscaleRefractoryAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleRefractoryAsync(string[] names, object userState) {
            if ((this.getAutoscaleRefractoryOperationCompleted == null)) {
                this.getAutoscaleRefractoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleRefractoryOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleRefractory", new object[] {
                        names}, this.getAutoscaleRefractoryOperationCompleted, userState);
        }
        
        private void OngetAutoscaleRefractoryOperationCompleted(object arg) {
            if ((this.getAutoscaleRefractoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleRefractoryCompleted(this, new getAutoscaleRefractoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleRefractoryByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleRefractoryByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleRefractoryByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleRefractoryByLocationAsync(string location, string[] names) {
            this.getAutoscaleRefractoryByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleRefractoryByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleRefractoryByLocationOperationCompleted == null)) {
                this.getAutoscaleRefractoryByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleRefractoryByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleRefractoryByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleRefractoryByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleRefractoryByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleRefractoryByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleRefractoryByLocationCompleted(this, new getAutoscaleRefractoryByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleResponseTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleResponseTime(string[] names) {
            object[] results = this.Invoke("getAutoscaleResponseTime", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleResponseTimeAsync(string[] names) {
            this.getAutoscaleResponseTimeAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleResponseTimeAsync(string[] names, object userState) {
            if ((this.getAutoscaleResponseTimeOperationCompleted == null)) {
                this.getAutoscaleResponseTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleResponseTimeOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleResponseTime", new object[] {
                        names}, this.getAutoscaleResponseTimeOperationCompleted, userState);
        }
        
        private void OngetAutoscaleResponseTimeOperationCompleted(object arg) {
            if ((this.getAutoscaleResponseTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleResponseTimeCompleted(this, new getAutoscaleResponseTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleResponseTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleResponseTimeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleResponseTimeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleResponseTimeByLocationAsync(string location, string[] names) {
            this.getAutoscaleResponseTimeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleResponseTimeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleResponseTimeByLocationOperationCompleted == null)) {
                this.getAutoscaleResponseTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleResponseTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleResponseTimeByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleResponseTimeByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleResponseTimeByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleResponseTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleResponseTimeByLocationCompleted(this, new getAutoscaleResponseTimeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaledownLevel", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleScaledownLevel(string[] names) {
            object[] results = this.Invoke("getAutoscaleScaledownLevel", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleScaledownLevelAsync(string[] names) {
            this.getAutoscaleScaledownLevelAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleScaledownLevelAsync(string[] names, object userState) {
            if ((this.getAutoscaleScaledownLevelOperationCompleted == null)) {
                this.getAutoscaleScaledownLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleScaledownLevelOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleScaledownLevel", new object[] {
                        names}, this.getAutoscaleScaledownLevelOperationCompleted, userState);
        }
        
        private void OngetAutoscaleScaledownLevelOperationCompleted(object arg) {
            if ((this.getAutoscaleScaledownLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleScaledownLevelCompleted(this, new getAutoscaleScaledownLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaledownLevelByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleScaledownLevelByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleScaledownLevelByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleScaledownLevelByLocationAsync(string location, string[] names) {
            this.getAutoscaleScaledownLevelByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleScaledownLevelByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleScaledownLevelByLocationOperationCompleted == null)) {
                this.getAutoscaleScaledownLevelByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleScaledownLevelByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleScaledownLevelByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleScaledownLevelByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleScaledownLevelByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleScaledownLevelByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleScaledownLevelByLocationCompleted(this, new getAutoscaleScaledownLevelByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaleupLevel", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleScaleupLevel(string[] names) {
            object[] results = this.Invoke("getAutoscaleScaleupLevel", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleScaleupLevelAsync(string[] names) {
            this.getAutoscaleScaleupLevelAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleScaleupLevelAsync(string[] names, object userState) {
            if ((this.getAutoscaleScaleupLevelOperationCompleted == null)) {
                this.getAutoscaleScaleupLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleScaleupLevelOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleScaleupLevel", new object[] {
                        names}, this.getAutoscaleScaleupLevelOperationCompleted, userState);
        }
        
        private void OngetAutoscaleScaleupLevelOperationCompleted(object arg) {
            if ((this.getAutoscaleScaleupLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleScaleupLevelCompleted(this, new getAutoscaleScaleupLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaleupLevelByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getAutoscaleScaleupLevelByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleScaleupLevelByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleScaleupLevelByLocationAsync(string location, string[] names) {
            this.getAutoscaleScaleupLevelByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleScaleupLevelByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleScaleupLevelByLocationOperationCompleted == null)) {
                this.getAutoscaleScaleupLevelByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleScaleupLevelByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleScaleupLevelByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleScaleupLevelByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleScaleupLevelByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleScaleupLevelByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleScaleupLevelByLocationCompleted(this, new getAutoscaleScaleupLevelByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleSizeid", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleSizeid(string[] names) {
            object[] results = this.Invoke("getAutoscaleSizeid", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleSizeidAsync(string[] names) {
            this.getAutoscaleSizeidAsync(names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleSizeidAsync(string[] names, object userState) {
            if ((this.getAutoscaleSizeidOperationCompleted == null)) {
                this.getAutoscaleSizeidOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleSizeidOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleSizeid", new object[] {
                        names}, this.getAutoscaleSizeidOperationCompleted, userState);
        }
        
        private void OngetAutoscaleSizeidOperationCompleted(object arg) {
            if ((this.getAutoscaleSizeidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleSizeidCompleted(this, new getAutoscaleSizeidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleSizeidByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getAutoscaleSizeidByLocation(string location, string[] names) {
            object[] results = this.Invoke("getAutoscaleSizeidByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAutoscaleSizeidByLocationAsync(string location, string[] names) {
            this.getAutoscaleSizeidByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getAutoscaleSizeidByLocationAsync(string location, string[] names, object userState) {
            if ((this.getAutoscaleSizeidByLocationOperationCompleted == null)) {
                this.getAutoscaleSizeidByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoscaleSizeidByLocationOperationCompleted);
            }
            this.InvokeAsync("getAutoscaleSizeidByLocation", new object[] {
                        location,
                        names}, this.getAutoscaleSizeidByLocationOperationCompleted, userState);
        }
        
        private void OngetAutoscaleSizeidByLocationOperationCompleted(object arg) {
            if ((this.getAutoscaleSizeidByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoscaleSizeidByLocationCompleted(this, new getAutoscaleSizeidByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getBandwidthClass", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getBandwidthClass(string[] names) {
            object[] results = this.Invoke("getBandwidthClass", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getBandwidthClassAsync(string[] names) {
            this.getBandwidthClassAsync(names, null);
        }
        
        /// <remarks/>
        public void getBandwidthClassAsync(string[] names, object userState) {
            if ((this.getBandwidthClassOperationCompleted == null)) {
                this.getBandwidthClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBandwidthClassOperationCompleted);
            }
            this.InvokeAsync("getBandwidthClass", new object[] {
                        names}, this.getBandwidthClassOperationCompleted, userState);
        }
        
        private void OngetBandwidthClassOperationCompleted(object arg) {
            if ((this.getBandwidthClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBandwidthClassCompleted(this, new getBandwidthClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getBandwidthClassByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getBandwidthClassByLocation(string location, string[] names) {
            object[] results = this.Invoke("getBandwidthClassByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getBandwidthClassByLocationAsync(string location, string[] names) {
            this.getBandwidthClassByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getBandwidthClassByLocationAsync(string location, string[] names, object userState) {
            if ((this.getBandwidthClassByLocationOperationCompleted == null)) {
                this.getBandwidthClassByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBandwidthClassByLocationOperationCompleted);
            }
            this.InvokeAsync("getBandwidthClassByLocation", new object[] {
                        location,
                        names}, this.getBandwidthClassByLocationOperationCompleted, userState);
        }
        
        private void OngetBandwidthClassByLocationOperationCompleted(object arg) {
            if ((this.getBandwidthClassByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBandwidthClassByLocationCompleted(this, new getBandwidthClassByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getDisabledNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("nodes")]
        public string[][] getDisabledNodes(string[] names) {
            object[] results = this.Invoke("getDisabledNodes", new object[] {
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getDisabledNodesAsync(string[] names) {
            this.getDisabledNodesAsync(names, null);
        }
        
        /// <remarks/>
        public void getDisabledNodesAsync(string[] names, object userState) {
            if ((this.getDisabledNodesOperationCompleted == null)) {
                this.getDisabledNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDisabledNodesOperationCompleted);
            }
            this.InvokeAsync("getDisabledNodes", new object[] {
                        names}, this.getDisabledNodesOperationCompleted, userState);
        }
        
        private void OngetDisabledNodesOperationCompleted(object arg) {
            if ((this.getDisabledNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDisabledNodesCompleted(this, new getDisabledNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getDisabledNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("nodes")]
        public string[][] getDisabledNodesByLocation(string location, string[] names) {
            object[] results = this.Invoke("getDisabledNodesByLocation", new object[] {
                        location,
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getDisabledNodesByLocationAsync(string location, string[] names) {
            this.getDisabledNodesByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getDisabledNodesByLocationAsync(string location, string[] names, object userState) {
            if ((this.getDisabledNodesByLocationOperationCompleted == null)) {
                this.getDisabledNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDisabledNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("getDisabledNodesByLocation", new object[] {
                        location,
                        names}, this.getDisabledNodesByLocationOperationCompleted, userState);
        }
        
        private void OngetDisabledNodesByLocationOperationCompleted(object arg) {
            if ((this.getDisabledNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDisabledNodesByLocationCompleted(this, new getDisabledNodesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getDrainingNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[][] getDrainingNodes(string[] names) {
            object[] results = this.Invoke("getDrainingNodes", new object[] {
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getDrainingNodesAsync(string[] names) {
            this.getDrainingNodesAsync(names, null);
        }
        
        /// <remarks/>
        public void getDrainingNodesAsync(string[] names, object userState) {
            if ((this.getDrainingNodesOperationCompleted == null)) {
                this.getDrainingNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDrainingNodesOperationCompleted);
            }
            this.InvokeAsync("getDrainingNodes", new object[] {
                        names}, this.getDrainingNodesOperationCompleted, userState);
        }
        
        private void OngetDrainingNodesOperationCompleted(object arg) {
            if ((this.getDrainingNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDrainingNodesCompleted(this, new getDrainingNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getDrainingNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[][] getDrainingNodesByLocation(string location, string[] names) {
            object[] results = this.Invoke("getDrainingNodesByLocation", new object[] {
                        location,
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getDrainingNodesByLocationAsync(string location, string[] names) {
            this.getDrainingNodesByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getDrainingNodesByLocationAsync(string location, string[] names, object userState) {
            if ((this.getDrainingNodesByLocationOperationCompleted == null)) {
                this.getDrainingNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDrainingNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("getDrainingNodesByLocation", new object[] {
                        location,
                        names}, this.getDrainingNodesByLocationOperationCompleted, userState);
        }
        
        private void OngetDrainingNodesByLocationOperationCompleted(object arg) {
            if ((this.getDrainingNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDrainingNodesByLocationCompleted(this, new getDrainingNodesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getErrorFile", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getErrorFile(string[] names) {
            object[] results = this.Invoke("getErrorFile", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getErrorFileAsync(string[] names) {
            this.getErrorFileAsync(names, null);
        }
        
        /// <remarks/>
        public void getErrorFileAsync(string[] names, object userState) {
            if ((this.getErrorFileOperationCompleted == null)) {
                this.getErrorFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetErrorFileOperationCompleted);
            }
            this.InvokeAsync("getErrorFile", new object[] {
                        names}, this.getErrorFileOperationCompleted, userState);
        }
        
        private void OngetErrorFileOperationCompleted(object arg) {
            if ((this.getErrorFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getErrorFileCompleted(this, new getErrorFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getFTPSupportRfc2428", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getFTPSupportRfc2428(string[] names) {
            object[] results = this.Invoke("getFTPSupportRfc2428", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getFTPSupportRfc2428Async(string[] names) {
            this.getFTPSupportRfc2428Async(names, null);
        }
        
        /// <remarks/>
        public void getFTPSupportRfc2428Async(string[] names, object userState) {
            if ((this.getFTPSupportRfc2428OperationCompleted == null)) {
                this.getFTPSupportRfc2428OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFTPSupportRfc2428OperationCompleted);
            }
            this.InvokeAsync("getFTPSupportRfc2428", new object[] {
                        names}, this.getFTPSupportRfc2428OperationCompleted, userState);
        }
        
        private void OngetFTPSupportRfc2428OperationCompleted(object arg) {
            if ((this.getFTPSupportRfc2428Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFTPSupportRfc2428Completed(this, new getFTPSupportRfc2428CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getFTPSupportRfc2428ByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getFTPSupportRfc2428ByLocation(string location, string[] names) {
            object[] results = this.Invoke("getFTPSupportRfc2428ByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getFTPSupportRfc2428ByLocationAsync(string location, string[] names) {
            this.getFTPSupportRfc2428ByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getFTPSupportRfc2428ByLocationAsync(string location, string[] names, object userState) {
            if ((this.getFTPSupportRfc2428ByLocationOperationCompleted == null)) {
                this.getFTPSupportRfc2428ByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFTPSupportRfc2428ByLocationOperationCompleted);
            }
            this.InvokeAsync("getFTPSupportRfc2428ByLocation", new object[] {
                        location,
                        names}, this.getFTPSupportRfc2428ByLocationOperationCompleted, userState);
        }
        
        private void OngetFTPSupportRfc2428ByLocationOperationCompleted(object arg) {
            if ((this.getFTPSupportRfc2428ByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFTPSupportRfc2428ByLocationCompleted(this, new getFTPSupportRfc2428ByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getFailpool", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getFailpool(string[] names) {
            object[] results = this.Invoke("getFailpool", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getFailpoolAsync(string[] names) {
            this.getFailpoolAsync(names, null);
        }
        
        /// <remarks/>
        public void getFailpoolAsync(string[] names, object userState) {
            if ((this.getFailpoolOperationCompleted == null)) {
                this.getFailpoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFailpoolOperationCompleted);
            }
            this.InvokeAsync("getFailpool", new object[] {
                        names}, this.getFailpoolOperationCompleted, userState);
        }
        
        private void OngetFailpoolOperationCompleted(object arg) {
            if ((this.getFailpoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFailpoolCompleted(this, new getFailpoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getFailpoolByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getFailpoolByLocation(string location, string[] names) {
            object[] results = this.Invoke("getFailpoolByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getFailpoolByLocationAsync(string location, string[] names) {
            this.getFailpoolByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getFailpoolByLocationAsync(string location, string[] names, object userState) {
            if ((this.getFailpoolByLocationOperationCompleted == null)) {
                this.getFailpoolByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFailpoolByLocationOperationCompleted);
            }
            this.InvokeAsync("getFailpoolByLocation", new object[] {
                        location,
                        names}, this.getFailpoolByLocationOperationCompleted, userState);
        }
        
        private void OngetFailpoolByLocationOperationCompleted(object arg) {
            if ((this.getFailpoolByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFailpoolByLocationCompleted(this, new getFailpoolByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getKeepalive", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getKeepalive(string[] names) {
            object[] results = this.Invoke("getKeepalive", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getKeepaliveAsync(string[] names) {
            this.getKeepaliveAsync(names, null);
        }
        
        /// <remarks/>
        public void getKeepaliveAsync(string[] names, object userState) {
            if ((this.getKeepaliveOperationCompleted == null)) {
                this.getKeepaliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetKeepaliveOperationCompleted);
            }
            this.InvokeAsync("getKeepalive", new object[] {
                        names}, this.getKeepaliveOperationCompleted, userState);
        }
        
        private void OngetKeepaliveOperationCompleted(object arg) {
            if ((this.getKeepaliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getKeepaliveCompleted(this, new getKeepaliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getKeepaliveByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getKeepaliveByLocation(string location, string[] names) {
            object[] results = this.Invoke("getKeepaliveByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getKeepaliveByLocationAsync(string location, string[] names) {
            this.getKeepaliveByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getKeepaliveByLocationAsync(string location, string[] names, object userState) {
            if ((this.getKeepaliveByLocationOperationCompleted == null)) {
                this.getKeepaliveByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetKeepaliveByLocationOperationCompleted);
            }
            this.InvokeAsync("getKeepaliveByLocation", new object[] {
                        location,
                        names}, this.getKeepaliveByLocationOperationCompleted, userState);
        }
        
        private void OngetKeepaliveByLocationOperationCompleted(object arg) {
            if ((this.getKeepaliveByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getKeepaliveByLocationCompleted(this, new getKeepaliveByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getKeepaliveNonIdempotent", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getKeepaliveNonIdempotent(string[] names) {
            object[] results = this.Invoke("getKeepaliveNonIdempotent", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getKeepaliveNonIdempotentAsync(string[] names) {
            this.getKeepaliveNonIdempotentAsync(names, null);
        }
        
        /// <remarks/>
        public void getKeepaliveNonIdempotentAsync(string[] names, object userState) {
            if ((this.getKeepaliveNonIdempotentOperationCompleted == null)) {
                this.getKeepaliveNonIdempotentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetKeepaliveNonIdempotentOperationCompleted);
            }
            this.InvokeAsync("getKeepaliveNonIdempotent", new object[] {
                        names}, this.getKeepaliveNonIdempotentOperationCompleted, userState);
        }
        
        private void OngetKeepaliveNonIdempotentOperationCompleted(object arg) {
            if ((this.getKeepaliveNonIdempotentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getKeepaliveNonIdempotentCompleted(this, new getKeepaliveNonIdempotentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getKeepaliveNonIdempotentByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getKeepaliveNonIdempotentByLocation(string location, string[] names) {
            object[] results = this.Invoke("getKeepaliveNonIdempotentByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getKeepaliveNonIdempotentByLocationAsync(string location, string[] names) {
            this.getKeepaliveNonIdempotentByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getKeepaliveNonIdempotentByLocationAsync(string location, string[] names, object userState) {
            if ((this.getKeepaliveNonIdempotentByLocationOperationCompleted == null)) {
                this.getKeepaliveNonIdempotentByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetKeepaliveNonIdempotentByLocationOperationCompleted);
            }
            this.InvokeAsync("getKeepaliveNonIdempotentByLocation", new object[] {
                        location,
                        names}, this.getKeepaliveNonIdempotentByLocationOperationCompleted, userState);
        }
        
        private void OngetKeepaliveNonIdempotentByLocationOperationCompleted(object arg) {
            if ((this.getKeepaliveNonIdempotentByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getKeepaliveNonIdempotentByLocationCompleted(this, new getKeepaliveNonIdempotentByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getLoadBalancingAlgorithm", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public PoolLoadBalancingAlgorithm[] getLoadBalancingAlgorithm(string[] names) {
            object[] results = this.Invoke("getLoadBalancingAlgorithm", new object[] {
                        names});
            return ((PoolLoadBalancingAlgorithm[])(results[0]));
        }
        
        /// <remarks/>
        public void getLoadBalancingAlgorithmAsync(string[] names) {
            this.getLoadBalancingAlgorithmAsync(names, null);
        }
        
        /// <remarks/>
        public void getLoadBalancingAlgorithmAsync(string[] names, object userState) {
            if ((this.getLoadBalancingAlgorithmOperationCompleted == null)) {
                this.getLoadBalancingAlgorithmOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLoadBalancingAlgorithmOperationCompleted);
            }
            this.InvokeAsync("getLoadBalancingAlgorithm", new object[] {
                        names}, this.getLoadBalancingAlgorithmOperationCompleted, userState);
        }
        
        private void OngetLoadBalancingAlgorithmOperationCompleted(object arg) {
            if ((this.getLoadBalancingAlgorithmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLoadBalancingAlgorithmCompleted(this, new getLoadBalancingAlgorithmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getLoadBalancingAlgorithmByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public PoolLoadBalancingAlgorithm[] getLoadBalancingAlgorithmByLocation(string location, string[] names) {
            object[] results = this.Invoke("getLoadBalancingAlgorithmByLocation", new object[] {
                        location,
                        names});
            return ((PoolLoadBalancingAlgorithm[])(results[0]));
        }
        
        /// <remarks/>
        public void getLoadBalancingAlgorithmByLocationAsync(string location, string[] names) {
            this.getLoadBalancingAlgorithmByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getLoadBalancingAlgorithmByLocationAsync(string location, string[] names, object userState) {
            if ((this.getLoadBalancingAlgorithmByLocationOperationCompleted == null)) {
                this.getLoadBalancingAlgorithmByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLoadBalancingAlgorithmByLocationOperationCompleted);
            }
            this.InvokeAsync("getLoadBalancingAlgorithmByLocation", new object[] {
                        location,
                        names}, this.getLoadBalancingAlgorithmByLocationOperationCompleted, userState);
        }
        
        private void OngetLoadBalancingAlgorithmByLocationOperationCompleted(object arg) {
            if ((this.getLoadBalancingAlgorithmByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLoadBalancingAlgorithmByLocationCompleted(this, new getLoadBalancingAlgorithmByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxConnectTime(string[] names) {
            object[] results = this.Invoke("getMaxConnectTime", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxConnectTimeAsync(string[] names) {
            this.getMaxConnectTimeAsync(names, null);
        }
        
        /// <remarks/>
        public void getMaxConnectTimeAsync(string[] names, object userState) {
            if ((this.getMaxConnectTimeOperationCompleted == null)) {
                this.getMaxConnectTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxConnectTimeOperationCompleted);
            }
            this.InvokeAsync("getMaxConnectTime", new object[] {
                        names}, this.getMaxConnectTimeOperationCompleted, userState);
        }
        
        private void OngetMaxConnectTimeOperationCompleted(object arg) {
            if ((this.getMaxConnectTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxConnectTimeCompleted(this, new getMaxConnectTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxConnectTimeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getMaxConnectTimeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxConnectTimeByLocationAsync(string location, string[] names) {
            this.getMaxConnectTimeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getMaxConnectTimeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getMaxConnectTimeByLocationOperationCompleted == null)) {
                this.getMaxConnectTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxConnectTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("getMaxConnectTimeByLocation", new object[] {
                        location,
                        names}, this.getMaxConnectTimeByLocationOperationCompleted, userState);
        }
        
        private void OngetMaxConnectTimeByLocationOperationCompleted(object arg) {
            if ((this.getMaxConnectTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxConnectTimeByLocationCompleted(this, new getMaxConnectTimeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectionsPernode", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxConnectionsPernode(string[] names) {
            object[] results = this.Invoke("getMaxConnectionsPernode", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxConnectionsPernodeAsync(string[] names) {
            this.getMaxConnectionsPernodeAsync(names, null);
        }
        
        /// <remarks/>
        public void getMaxConnectionsPernodeAsync(string[] names, object userState) {
            if ((this.getMaxConnectionsPernodeOperationCompleted == null)) {
                this.getMaxConnectionsPernodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxConnectionsPernodeOperationCompleted);
            }
            this.InvokeAsync("getMaxConnectionsPernode", new object[] {
                        names}, this.getMaxConnectionsPernodeOperationCompleted, userState);
        }
        
        private void OngetMaxConnectionsPernodeOperationCompleted(object arg) {
            if ((this.getMaxConnectionsPernodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxConnectionsPernodeCompleted(this, new getMaxConnectionsPernodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectionsPernodeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxConnectionsPernodeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getMaxConnectionsPernodeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxConnectionsPernodeByLocationAsync(string location, string[] names) {
            this.getMaxConnectionsPernodeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getMaxConnectionsPernodeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getMaxConnectionsPernodeByLocationOperationCompleted == null)) {
                this.getMaxConnectionsPernodeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxConnectionsPernodeByLocationOperationCompleted);
            }
            this.InvokeAsync("getMaxConnectionsPernodeByLocation", new object[] {
                        location,
                        names}, this.getMaxConnectionsPernodeByLocationOperationCompleted, userState);
        }
        
        private void OngetMaxConnectionsPernodeByLocationOperationCompleted(object arg) {
            if ((this.getMaxConnectionsPernodeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxConnectionsPernodeByLocationCompleted(this, new getMaxConnectionsPernodeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxIdleConnectionsPerNode", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxIdleConnectionsPerNode(string[] names) {
            object[] results = this.Invoke("getMaxIdleConnectionsPerNode", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxIdleConnectionsPerNodeAsync(string[] names) {
            this.getMaxIdleConnectionsPerNodeAsync(names, null);
        }
        
        /// <remarks/>
        public void getMaxIdleConnectionsPerNodeAsync(string[] names, object userState) {
            if ((this.getMaxIdleConnectionsPerNodeOperationCompleted == null)) {
                this.getMaxIdleConnectionsPerNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxIdleConnectionsPerNodeOperationCompleted);
            }
            this.InvokeAsync("getMaxIdleConnectionsPerNode", new object[] {
                        names}, this.getMaxIdleConnectionsPerNodeOperationCompleted, userState);
        }
        
        private void OngetMaxIdleConnectionsPerNodeOperationCompleted(object arg) {
            if ((this.getMaxIdleConnectionsPerNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxIdleConnectionsPerNodeCompleted(this, new getMaxIdleConnectionsPerNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxIdleConnectionsPerNodeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxIdleConnectionsPerNodeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getMaxIdleConnectionsPerNodeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxIdleConnectionsPerNodeByLocationAsync(string location, string[] names) {
            this.getMaxIdleConnectionsPerNodeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getMaxIdleConnectionsPerNodeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getMaxIdleConnectionsPerNodeByLocationOperationCompleted == null)) {
                this.getMaxIdleConnectionsPerNodeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxIdleConnectionsPerNodeByLocationOperationCompleted);
            }
            this.InvokeAsync("getMaxIdleConnectionsPerNodeByLocation", new object[] {
                        location,
                        names}, this.getMaxIdleConnectionsPerNodeByLocationOperationCompleted, userState);
        }
        
        private void OngetMaxIdleConnectionsPerNodeByLocationOperationCompleted(object arg) {
            if ((this.getMaxIdleConnectionsPerNodeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxIdleConnectionsPerNodeByLocationCompleted(this, new getMaxIdleConnectionsPerNodeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxKeepalivesPerNode", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxKeepalivesPerNode(string[] names) {
            object[] results = this.Invoke("getMaxKeepalivesPerNode", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxKeepalivesPerNodeAsync(string[] names) {
            this.getMaxKeepalivesPerNodeAsync(names, null);
        }
        
        /// <remarks/>
        public void getMaxKeepalivesPerNodeAsync(string[] names, object userState) {
            if ((this.getMaxKeepalivesPerNodeOperationCompleted == null)) {
                this.getMaxKeepalivesPerNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxKeepalivesPerNodeOperationCompleted);
            }
            this.InvokeAsync("getMaxKeepalivesPerNode", new object[] {
                        names}, this.getMaxKeepalivesPerNodeOperationCompleted, userState);
        }
        
        private void OngetMaxKeepalivesPerNodeOperationCompleted(object arg) {
            if ((this.getMaxKeepalivesPerNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxKeepalivesPerNodeCompleted(this, new getMaxKeepalivesPerNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxKeepalivesPerNodeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxKeepalivesPerNodeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getMaxKeepalivesPerNodeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxKeepalivesPerNodeByLocationAsync(string location, string[] names) {
            this.getMaxKeepalivesPerNodeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getMaxKeepalivesPerNodeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getMaxKeepalivesPerNodeByLocationOperationCompleted == null)) {
                this.getMaxKeepalivesPerNodeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxKeepalivesPerNodeByLocationOperationCompleted);
            }
            this.InvokeAsync("getMaxKeepalivesPerNodeByLocation", new object[] {
                        location,
                        names}, this.getMaxKeepalivesPerNodeByLocationOperationCompleted, userState);
        }
        
        private void OngetMaxKeepalivesPerNodeByLocationOperationCompleted(object arg) {
            if ((this.getMaxKeepalivesPerNodeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxKeepalivesPerNodeByLocationCompleted(this, new getMaxKeepalivesPerNodeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxQueueSize", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxQueueSize(string[] names) {
            object[] results = this.Invoke("getMaxQueueSize", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxQueueSizeAsync(string[] names) {
            this.getMaxQueueSizeAsync(names, null);
        }
        
        /// <remarks/>
        public void getMaxQueueSizeAsync(string[] names, object userState) {
            if ((this.getMaxQueueSizeOperationCompleted == null)) {
                this.getMaxQueueSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxQueueSizeOperationCompleted);
            }
            this.InvokeAsync("getMaxQueueSize", new object[] {
                        names}, this.getMaxQueueSizeOperationCompleted, userState);
        }
        
        private void OngetMaxQueueSizeOperationCompleted(object arg) {
            if ((this.getMaxQueueSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxQueueSizeCompleted(this, new getMaxQueueSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxQueueSizeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxQueueSizeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getMaxQueueSizeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxQueueSizeByLocationAsync(string location, string[] names) {
            this.getMaxQueueSizeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getMaxQueueSizeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getMaxQueueSizeByLocationOperationCompleted == null)) {
                this.getMaxQueueSizeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxQueueSizeByLocationOperationCompleted);
            }
            this.InvokeAsync("getMaxQueueSizeByLocation", new object[] {
                        location,
                        names}, this.getMaxQueueSizeByLocationOperationCompleted, userState);
        }
        
        private void OngetMaxQueueSizeByLocationOperationCompleted(object arg) {
            if ((this.getMaxQueueSizeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxQueueSizeByLocationCompleted(this, new getMaxQueueSizeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxReplyTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxReplyTime(string[] names) {
            object[] results = this.Invoke("getMaxReplyTime", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxReplyTimeAsync(string[] names) {
            this.getMaxReplyTimeAsync(names, null);
        }
        
        /// <remarks/>
        public void getMaxReplyTimeAsync(string[] names, object userState) {
            if ((this.getMaxReplyTimeOperationCompleted == null)) {
                this.getMaxReplyTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxReplyTimeOperationCompleted);
            }
            this.InvokeAsync("getMaxReplyTime", new object[] {
                        names}, this.getMaxReplyTimeOperationCompleted, userState);
        }
        
        private void OngetMaxReplyTimeOperationCompleted(object arg) {
            if ((this.getMaxReplyTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxReplyTimeCompleted(this, new getMaxReplyTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMaxReplyTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getMaxReplyTimeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getMaxReplyTimeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getMaxReplyTimeByLocationAsync(string location, string[] names) {
            this.getMaxReplyTimeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getMaxReplyTimeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getMaxReplyTimeByLocationOperationCompleted == null)) {
                this.getMaxReplyTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMaxReplyTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("getMaxReplyTimeByLocation", new object[] {
                        location,
                        names}, this.getMaxReplyTimeByLocationOperationCompleted, userState);
        }
        
        private void OngetMaxReplyTimeByLocationOperationCompleted(object arg) {
            if ((this.getMaxReplyTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMaxReplyTimeByLocationCompleted(this, new getMaxReplyTimeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMonitors", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[][] getMonitors(string[] names) {
            object[] results = this.Invoke("getMonitors", new object[] {
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getMonitorsAsync(string[] names) {
            this.getMonitorsAsync(names, null);
        }
        
        /// <remarks/>
        public void getMonitorsAsync(string[] names, object userState) {
            if ((this.getMonitorsOperationCompleted == null)) {
                this.getMonitorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMonitorsOperationCompleted);
            }
            this.InvokeAsync("getMonitors", new object[] {
                        names}, this.getMonitorsOperationCompleted, userState);
        }
        
        private void OngetMonitorsOperationCompleted(object arg) {
            if ((this.getMonitorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMonitorsCompleted(this, new getMonitorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getMonitorsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[][] getMonitorsByLocation(string location, string[] names) {
            object[] results = this.Invoke("getMonitorsByLocation", new object[] {
                        location,
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getMonitorsByLocationAsync(string location, string[] names) {
            this.getMonitorsByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getMonitorsByLocationAsync(string location, string[] names, object userState) {
            if ((this.getMonitorsByLocationOperationCompleted == null)) {
                this.getMonitorsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMonitorsByLocationOperationCompleted);
            }
            this.InvokeAsync("getMonitorsByLocation", new object[] {
                        location,
                        names}, this.getMonitorsByLocationOperationCompleted, userState);
        }
        
        private void OngetMonitorsByLocationOperationCompleted(object arg) {
            if ((this.getMonitorsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMonitorsByLocationCompleted(this, new getMonitorsByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnClose", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getNodeConnClose(string[] names) {
            object[] results = this.Invoke("getNodeConnClose", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeConnCloseAsync(string[] names) {
            this.getNodeConnCloseAsync(names, null);
        }
        
        /// <remarks/>
        public void getNodeConnCloseAsync(string[] names, object userState) {
            if ((this.getNodeConnCloseOperationCompleted == null)) {
                this.getNodeConnCloseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeConnCloseOperationCompleted);
            }
            this.InvokeAsync("getNodeConnClose", new object[] {
                        names}, this.getNodeConnCloseOperationCompleted, userState);
        }
        
        private void OngetNodeConnCloseOperationCompleted(object arg) {
            if ((this.getNodeConnCloseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeConnCloseCompleted(this, new getNodeConnCloseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnCloseByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getNodeConnCloseByLocation(string location, string[] names) {
            object[] results = this.Invoke("getNodeConnCloseByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeConnCloseByLocationAsync(string location, string[] names) {
            this.getNodeConnCloseByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getNodeConnCloseByLocationAsync(string location, string[] names, object userState) {
            if ((this.getNodeConnCloseByLocationOperationCompleted == null)) {
                this.getNodeConnCloseByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeConnCloseByLocationOperationCompleted);
            }
            this.InvokeAsync("getNodeConnCloseByLocation", new object[] {
                        location,
                        names}, this.getNodeConnCloseByLocationOperationCompleted, userState);
        }
        
        private void OngetNodeConnCloseByLocationOperationCompleted(object arg) {
            if ((this.getNodeConnCloseByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeConnCloseByLocationCompleted(this, new getNodeConnCloseByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnectionAttempts", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getNodeConnectionAttempts(string[] names) {
            object[] results = this.Invoke("getNodeConnectionAttempts", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeConnectionAttemptsAsync(string[] names) {
            this.getNodeConnectionAttemptsAsync(names, null);
        }
        
        /// <remarks/>
        public void getNodeConnectionAttemptsAsync(string[] names, object userState) {
            if ((this.getNodeConnectionAttemptsOperationCompleted == null)) {
                this.getNodeConnectionAttemptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeConnectionAttemptsOperationCompleted);
            }
            this.InvokeAsync("getNodeConnectionAttempts", new object[] {
                        names}, this.getNodeConnectionAttemptsOperationCompleted, userState);
        }
        
        private void OngetNodeConnectionAttemptsOperationCompleted(object arg) {
            if ((this.getNodeConnectionAttemptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeConnectionAttemptsCompleted(this, new getNodeConnectionAttemptsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnectionAttemptsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getNodeConnectionAttemptsByLocation(string location, string[] names) {
            object[] results = this.Invoke("getNodeConnectionAttemptsByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeConnectionAttemptsByLocationAsync(string location, string[] names) {
            this.getNodeConnectionAttemptsByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getNodeConnectionAttemptsByLocationAsync(string location, string[] names, object userState) {
            if ((this.getNodeConnectionAttemptsByLocationOperationCompleted == null)) {
                this.getNodeConnectionAttemptsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeConnectionAttemptsByLocationOperationCompleted);
            }
            this.InvokeAsync("getNodeConnectionAttemptsByLocation", new object[] {
                        location,
                        names}, this.getNodeConnectionAttemptsByLocationOperationCompleted, userState);
        }
        
        private void OngetNodeConnectionAttemptsByLocationOperationCompleted(object arg) {
            if ((this.getNodeConnectionAttemptsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeConnectionAttemptsByLocationCompleted(this, new getNodeConnectionAttemptsByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeFailTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getNodeFailTime(string[] names) {
            object[] results = this.Invoke("getNodeFailTime", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeFailTimeAsync(string[] names) {
            this.getNodeFailTimeAsync(names, null);
        }
        
        /// <remarks/>
        public void getNodeFailTimeAsync(string[] names, object userState) {
            if ((this.getNodeFailTimeOperationCompleted == null)) {
                this.getNodeFailTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeFailTimeOperationCompleted);
            }
            this.InvokeAsync("getNodeFailTime", new object[] {
                        names}, this.getNodeFailTimeOperationCompleted, userState);
        }
        
        private void OngetNodeFailTimeOperationCompleted(object arg) {
            if ((this.getNodeFailTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeFailTimeCompleted(this, new getNodeFailTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeFailTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getNodeFailTimeByLocation(string location, string[] names) {
            object[] results = this.Invoke("getNodeFailTimeByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeFailTimeByLocationAsync(string location, string[] names) {
            this.getNodeFailTimeByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getNodeFailTimeByLocationAsync(string location, string[] names, object userState) {
            if ((this.getNodeFailTimeByLocationOperationCompleted == null)) {
                this.getNodeFailTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeFailTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("getNodeFailTimeByLocation", new object[] {
                        location,
                        names}, this.getNodeFailTimeByLocationOperationCompleted, userState);
        }
        
        private void OngetNodeFailTimeByLocationOperationCompleted(object arg) {
            if ((this.getNodeFailTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeFailTimeByLocationCompleted(this, new getNodeFailTimeByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeUseNagle", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getNodeUseNagle(string[] names) {
            object[] results = this.Invoke("getNodeUseNagle", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeUseNagleAsync(string[] names) {
            this.getNodeUseNagleAsync(names, null);
        }
        
        /// <remarks/>
        public void getNodeUseNagleAsync(string[] names, object userState) {
            if ((this.getNodeUseNagleOperationCompleted == null)) {
                this.getNodeUseNagleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeUseNagleOperationCompleted);
            }
            this.InvokeAsync("getNodeUseNagle", new object[] {
                        names}, this.getNodeUseNagleOperationCompleted, userState);
        }
        
        private void OngetNodeUseNagleOperationCompleted(object arg) {
            if ((this.getNodeUseNagleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeUseNagleCompleted(this, new getNodeUseNagleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodeUseNagleByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getNodeUseNagleByLocation(string location, string[] names) {
            object[] results = this.Invoke("getNodeUseNagleByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodeUseNagleByLocationAsync(string location, string[] names) {
            this.getNodeUseNagleByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getNodeUseNagleByLocationAsync(string location, string[] names, object userState) {
            if ((this.getNodeUseNagleByLocationOperationCompleted == null)) {
                this.getNodeUseNagleByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodeUseNagleByLocationOperationCompleted);
            }
            this.InvokeAsync("getNodeUseNagleByLocation", new object[] {
                        location,
                        names}, this.getNodeUseNagleByLocationOperationCompleted, userState);
        }
        
        private void OngetNodeUseNagleByLocationOperationCompleted(object arg) {
            if ((this.getNodeUseNagleByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodeUseNagleByLocationCompleted(this, new getNodeUseNagleByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("nodes")]
        public string[][] getNodes(string[] names) {
            object[] results = this.Invoke("getNodes", new object[] {
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesAsync(string[] names) {
            this.getNodesAsync(names, null);
        }
        
        /// <remarks/>
        public void getNodesAsync(string[] names, object userState) {
            if ((this.getNodesOperationCompleted == null)) {
                this.getNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesOperationCompleted);
            }
            this.InvokeAsync("getNodes", new object[] {
                        names}, this.getNodesOperationCompleted, userState);
        }
        
        private void OngetNodesOperationCompleted(object arg) {
            if ((this.getNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesCompleted(this, new getNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("nodes")]
        public string[][] getNodesByLocation(string location, string[] names) {
            object[] results = this.Invoke("getNodesByLocation", new object[] {
                        location,
                        names});
            return ((string[][])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesByLocationAsync(string location, string[] names) {
            this.getNodesByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getNodesByLocationAsync(string location, string[] names, object userState) {
            if ((this.getNodesByLocationOperationCompleted == null)) {
                this.getNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("getNodesByLocation", new object[] {
                        location,
                        names}, this.getNodesByLocationOperationCompleted, userState);
        }
        
        private void OngetNodesByLocationOperationCompleted(object arg) {
            if ((this.getNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesByLocationCompleted(this, new getNodesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodesConnectionCounts", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("nodes_connection_counts")]
        public int[] getNodesConnectionCounts(string[] nodes) {
            object[] results = this.Invoke("getNodesConnectionCounts", new object[] {
                        nodes});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesConnectionCountsAsync(string[] nodes) {
            this.getNodesConnectionCountsAsync(nodes, null);
        }
        
        /// <remarks/>
        public void getNodesConnectionCountsAsync(string[] nodes, object userState) {
            if ((this.getNodesConnectionCountsOperationCompleted == null)) {
                this.getNodesConnectionCountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesConnectionCountsOperationCompleted);
            }
            this.InvokeAsync("getNodesConnectionCounts", new object[] {
                        nodes}, this.getNodesConnectionCountsOperationCompleted, userState);
        }
        
        private void OngetNodesConnectionCountsOperationCompleted(object arg) {
            if ((this.getNodesConnectionCountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesConnectionCountsCompleted(this, new getNodesConnectionCountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodesLastUsed", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("nodes_last_used")]
        public int[] getNodesLastUsed(string[] nodes) {
            object[] results = this.Invoke("getNodesLastUsed", new object[] {
                        nodes});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesLastUsedAsync(string[] nodes) {
            this.getNodesLastUsedAsync(nodes, null);
        }
        
        /// <remarks/>
        public void getNodesLastUsedAsync(string[] nodes, object userState) {
            if ((this.getNodesLastUsedOperationCompleted == null)) {
                this.getNodesLastUsedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesLastUsedOperationCompleted);
            }
            this.InvokeAsync("getNodesLastUsed", new object[] {
                        nodes}, this.getNodesLastUsedOperationCompleted, userState);
        }
        
        private void OngetNodesLastUsedOperationCompleted(object arg) {
            if ((this.getNodesLastUsedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesLastUsedCompleted(this, new getNodesLastUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodesPriorityValue", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolPriorityValueDefinition[][] getNodesPriorityValue(string[] names, string[][] nodes) {
            object[] results = this.Invoke("getNodesPriorityValue", new object[] {
                        names,
                        nodes});
            return ((PoolPriorityValueDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesPriorityValueAsync(string[] names, string[][] nodes) {
            this.getNodesPriorityValueAsync(names, nodes, null);
        }
        
        /// <remarks/>
        public void getNodesPriorityValueAsync(string[] names, string[][] nodes, object userState) {
            if ((this.getNodesPriorityValueOperationCompleted == null)) {
                this.getNodesPriorityValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesPriorityValueOperationCompleted);
            }
            this.InvokeAsync("getNodesPriorityValue", new object[] {
                        names,
                        nodes}, this.getNodesPriorityValueOperationCompleted, userState);
        }
        
        private void OngetNodesPriorityValueOperationCompleted(object arg) {
            if ((this.getNodesPriorityValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesPriorityValueCompleted(this, new getNodesPriorityValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodesPriorityValueByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolPriorityValueDefinition[][] getNodesPriorityValueByLocation(string location, string[] names, string[][] nodes) {
            object[] results = this.Invoke("getNodesPriorityValueByLocation", new object[] {
                        location,
                        names,
                        nodes});
            return ((PoolPriorityValueDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesPriorityValueByLocationAsync(string location, string[] names, string[][] nodes) {
            this.getNodesPriorityValueByLocationAsync(location, names, nodes, null);
        }
        
        /// <remarks/>
        public void getNodesPriorityValueByLocationAsync(string location, string[] names, string[][] nodes, object userState) {
            if ((this.getNodesPriorityValueByLocationOperationCompleted == null)) {
                this.getNodesPriorityValueByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesPriorityValueByLocationOperationCompleted);
            }
            this.InvokeAsync("getNodesPriorityValueByLocation", new object[] {
                        location,
                        names,
                        nodes}, this.getNodesPriorityValueByLocationOperationCompleted, userState);
        }
        
        private void OngetNodesPriorityValueByLocationOperationCompleted(object arg) {
            if ((this.getNodesPriorityValueByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesPriorityValueByLocationCompleted(this, new getNodesPriorityValueByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodesWeightings", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolWeightingsDefinition[][] getNodesWeightings(string[] names, string[][] nodes) {
            object[] results = this.Invoke("getNodesWeightings", new object[] {
                        names,
                        nodes});
            return ((PoolWeightingsDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesWeightingsAsync(string[] names, string[][] nodes) {
            this.getNodesWeightingsAsync(names, nodes, null);
        }
        
        /// <remarks/>
        public void getNodesWeightingsAsync(string[] names, string[][] nodes, object userState) {
            if ((this.getNodesWeightingsOperationCompleted == null)) {
                this.getNodesWeightingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesWeightingsOperationCompleted);
            }
            this.InvokeAsync("getNodesWeightings", new object[] {
                        names,
                        nodes}, this.getNodesWeightingsOperationCompleted, userState);
        }
        
        private void OngetNodesWeightingsOperationCompleted(object arg) {
            if ((this.getNodesWeightingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesWeightingsCompleted(this, new getNodesWeightingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNodesWeightingsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolWeightingsDefinition[][] getNodesWeightingsByLocation(string location, string[] names, string[][] nodes) {
            object[] results = this.Invoke("getNodesWeightingsByLocation", new object[] {
                        location,
                        names,
                        nodes});
            return ((PoolWeightingsDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getNodesWeightingsByLocationAsync(string location, string[] names, string[][] nodes) {
            this.getNodesWeightingsByLocationAsync(location, names, nodes, null);
        }
        
        /// <remarks/>
        public void getNodesWeightingsByLocationAsync(string location, string[] names, string[][] nodes, object userState) {
            if ((this.getNodesWeightingsByLocationOperationCompleted == null)) {
                this.getNodesWeightingsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNodesWeightingsByLocationOperationCompleted);
            }
            this.InvokeAsync("getNodesWeightingsByLocation", new object[] {
                        location,
                        names,
                        nodes}, this.getNodesWeightingsByLocationOperationCompleted, userState);
        }
        
        private void OngetNodesWeightingsByLocationOperationCompleted(object arg) {
            if ((this.getNodesWeightingsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNodesWeightingsByLocationCompleted(this, new getNodesWeightingsByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getNote", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getNote(string[] names) {
            object[] results = this.Invoke("getNote", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getNoteAsync(string[] names) {
            this.getNoteAsync(names, null);
        }
        
        /// <remarks/>
        public void getNoteAsync(string[] names, object userState) {
            if ((this.getNoteOperationCompleted == null)) {
                this.getNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNoteOperationCompleted);
            }
            this.InvokeAsync("getNote", new object[] {
                        names}, this.getNoteOperationCompleted, userState);
        }
        
        private void OngetNoteOperationCompleted(object arg) {
            if ((this.getNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNoteCompleted(this, new getNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPassiveMonitoring", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getPassiveMonitoring(string[] names) {
            object[] results = this.Invoke("getPassiveMonitoring", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getPassiveMonitoringAsync(string[] names) {
            this.getPassiveMonitoringAsync(names, null);
        }
        
        /// <remarks/>
        public void getPassiveMonitoringAsync(string[] names, object userState) {
            if ((this.getPassiveMonitoringOperationCompleted == null)) {
                this.getPassiveMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPassiveMonitoringOperationCompleted);
            }
            this.InvokeAsync("getPassiveMonitoring", new object[] {
                        names}, this.getPassiveMonitoringOperationCompleted, userState);
        }
        
        private void OngetPassiveMonitoringOperationCompleted(object arg) {
            if ((this.getPassiveMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPassiveMonitoringCompleted(this, new getPassiveMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPassiveMonitoringByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getPassiveMonitoringByLocation(string location, string[] names) {
            object[] results = this.Invoke("getPassiveMonitoringByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getPassiveMonitoringByLocationAsync(string location, string[] names) {
            this.getPassiveMonitoringByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getPassiveMonitoringByLocationAsync(string location, string[] names, object userState) {
            if ((this.getPassiveMonitoringByLocationOperationCompleted == null)) {
                this.getPassiveMonitoringByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPassiveMonitoringByLocationOperationCompleted);
            }
            this.InvokeAsync("getPassiveMonitoringByLocation", new object[] {
                        location,
                        names}, this.getPassiveMonitoringByLocationOperationCompleted, userState);
        }
        
        private void OngetPassiveMonitoringByLocationOperationCompleted(object arg) {
            if ((this.getPassiveMonitoringByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPassiveMonitoringByLocationCompleted(this, new getPassiveMonitoringByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPersistence", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getPersistence(string[] names) {
            object[] results = this.Invoke("getPersistence", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersistenceAsync(string[] names) {
            this.getPersistenceAsync(names, null);
        }
        
        /// <remarks/>
        public void getPersistenceAsync(string[] names, object userState) {
            if ((this.getPersistenceOperationCompleted == null)) {
                this.getPersistenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersistenceOperationCompleted);
            }
            this.InvokeAsync("getPersistence", new object[] {
                        names}, this.getPersistenceOperationCompleted, userState);
        }
        
        private void OngetPersistenceOperationCompleted(object arg) {
            if ((this.getPersistenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersistenceCompleted(this, new getPersistenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPersistenceByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getPersistenceByLocation(string location, string[] names) {
            object[] results = this.Invoke("getPersistenceByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getPersistenceByLocationAsync(string location, string[] names) {
            this.getPersistenceByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getPersistenceByLocationAsync(string location, string[] names, object userState) {
            if ((this.getPersistenceByLocationOperationCompleted == null)) {
                this.getPersistenceByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersistenceByLocationOperationCompleted);
            }
            this.InvokeAsync("getPersistenceByLocation", new object[] {
                        location,
                        names}, this.getPersistenceByLocationOperationCompleted, userState);
        }
        
        private void OngetPersistenceByLocationOperationCompleted(object arg) {
            if ((this.getPersistenceByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersistenceByLocationCompleted(this, new getPersistenceByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPoolNames", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("names")]
        public string[] getPoolNames() {
            object[] results = this.Invoke("getPoolNames", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getPoolNamesAsync() {
            this.getPoolNamesAsync(null);
        }
        
        /// <remarks/>
        public void getPoolNamesAsync(object userState) {
            if ((this.getPoolNamesOperationCompleted == null)) {
                this.getPoolNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPoolNamesOperationCompleted);
            }
            this.InvokeAsync("getPoolNames", new object[0], this.getPoolNamesOperationCompleted, userState);
        }
        
        private void OngetPoolNamesOperationCompleted(object arg) {
            if ((this.getPoolNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPoolNamesCompleted(this, new getPoolNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPriorityEnabled", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getPriorityEnabled(string[] names) {
            object[] results = this.Invoke("getPriorityEnabled", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getPriorityEnabledAsync(string[] names) {
            this.getPriorityEnabledAsync(names, null);
        }
        
        /// <remarks/>
        public void getPriorityEnabledAsync(string[] names, object userState) {
            if ((this.getPriorityEnabledOperationCompleted == null)) {
                this.getPriorityEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPriorityEnabledOperationCompleted);
            }
            this.InvokeAsync("getPriorityEnabled", new object[] {
                        names}, this.getPriorityEnabledOperationCompleted, userState);
        }
        
        private void OngetPriorityEnabledOperationCompleted(object arg) {
            if ((this.getPriorityEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPriorityEnabledCompleted(this, new getPriorityEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPriorityEnabledByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getPriorityEnabledByLocation(string location, string[] names) {
            object[] results = this.Invoke("getPriorityEnabledByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getPriorityEnabledByLocationAsync(string location, string[] names) {
            this.getPriorityEnabledByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getPriorityEnabledByLocationAsync(string location, string[] names, object userState) {
            if ((this.getPriorityEnabledByLocationOperationCompleted == null)) {
                this.getPriorityEnabledByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPriorityEnabledByLocationOperationCompleted);
            }
            this.InvokeAsync("getPriorityEnabledByLocation", new object[] {
                        location,
                        names}, this.getPriorityEnabledByLocationOperationCompleted, userState);
        }
        
        private void OngetPriorityEnabledByLocationOperationCompleted(object arg) {
            if ((this.getPriorityEnabledByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPriorityEnabledByLocationCompleted(this, new getPriorityEnabledByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPriorityNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getPriorityNodes(string[] names) {
            object[] results = this.Invoke("getPriorityNodes", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getPriorityNodesAsync(string[] names) {
            this.getPriorityNodesAsync(names, null);
        }
        
        /// <remarks/>
        public void getPriorityNodesAsync(string[] names, object userState) {
            if ((this.getPriorityNodesOperationCompleted == null)) {
                this.getPriorityNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPriorityNodesOperationCompleted);
            }
            this.InvokeAsync("getPriorityNodes", new object[] {
                        names}, this.getPriorityNodesOperationCompleted, userState);
        }
        
        private void OngetPriorityNodesOperationCompleted(object arg) {
            if ((this.getPriorityNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPriorityNodesCompleted(this, new getPriorityNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPriorityNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getPriorityNodesByLocation(string location, string[] names) {
            object[] results = this.Invoke("getPriorityNodesByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getPriorityNodesByLocationAsync(string location, string[] names) {
            this.getPriorityNodesByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getPriorityNodesByLocationAsync(string location, string[] names, object userState) {
            if ((this.getPriorityNodesByLocationOperationCompleted == null)) {
                this.getPriorityNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPriorityNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("getPriorityNodesByLocation", new object[] {
                        location,
                        names}, this.getPriorityNodesByLocationOperationCompleted, userState);
        }
        
        private void OngetPriorityNodesByLocationOperationCompleted(object arg) {
            if ((this.getPriorityNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPriorityNodesByLocationCompleted(this, new getPriorityNodesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPriorityValues", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolPriorityValueDefinition[][] getPriorityValues(string[] names) {
            object[] results = this.Invoke("getPriorityValues", new object[] {
                        names});
            return ((PoolPriorityValueDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getPriorityValuesAsync(string[] names) {
            this.getPriorityValuesAsync(names, null);
        }
        
        /// <remarks/>
        public void getPriorityValuesAsync(string[] names, object userState) {
            if ((this.getPriorityValuesOperationCompleted == null)) {
                this.getPriorityValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPriorityValuesOperationCompleted);
            }
            this.InvokeAsync("getPriorityValues", new object[] {
                        names}, this.getPriorityValuesOperationCompleted, userState);
        }
        
        private void OngetPriorityValuesOperationCompleted(object arg) {
            if ((this.getPriorityValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPriorityValuesCompleted(this, new getPriorityValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getPriorityValuesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolPriorityValueDefinition[][] getPriorityValuesByLocation(string location, string[] names) {
            object[] results = this.Invoke("getPriorityValuesByLocation", new object[] {
                        location,
                        names});
            return ((PoolPriorityValueDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getPriorityValuesByLocationAsync(string location, string[] names) {
            this.getPriorityValuesByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getPriorityValuesByLocationAsync(string location, string[] names, object userState) {
            if ((this.getPriorityValuesByLocationOperationCompleted == null)) {
                this.getPriorityValuesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPriorityValuesByLocationOperationCompleted);
            }
            this.InvokeAsync("getPriorityValuesByLocation", new object[] {
                        location,
                        names}, this.getPriorityValuesByLocationOperationCompleted, userState);
        }
        
        private void OngetPriorityValuesByLocationOperationCompleted(object arg) {
            if ((this.getPriorityValuesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPriorityValuesByLocationCompleted(this, new getPriorityValuesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getQueueTimeout", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getQueueTimeout(string[] names) {
            object[] results = this.Invoke("getQueueTimeout", new object[] {
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getQueueTimeoutAsync(string[] names) {
            this.getQueueTimeoutAsync(names, null);
        }
        
        /// <remarks/>
        public void getQueueTimeoutAsync(string[] names, object userState) {
            if ((this.getQueueTimeoutOperationCompleted == null)) {
                this.getQueueTimeoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetQueueTimeoutOperationCompleted);
            }
            this.InvokeAsync("getQueueTimeout", new object[] {
                        names}, this.getQueueTimeoutOperationCompleted, userState);
        }
        
        private void OngetQueueTimeoutOperationCompleted(object arg) {
            if ((this.getQueueTimeoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getQueueTimeoutCompleted(this, new getQueueTimeoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getQueueTimeoutByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public uint[] getQueueTimeoutByLocation(string location, string[] names) {
            object[] results = this.Invoke("getQueueTimeoutByLocation", new object[] {
                        location,
                        names});
            return ((uint[])(results[0]));
        }
        
        /// <remarks/>
        public void getQueueTimeoutByLocationAsync(string location, string[] names) {
            this.getQueueTimeoutByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getQueueTimeoutByLocationAsync(string location, string[] names, object userState) {
            if ((this.getQueueTimeoutByLocationOperationCompleted == null)) {
                this.getQueueTimeoutByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetQueueTimeoutByLocationOperationCompleted);
            }
            this.InvokeAsync("getQueueTimeoutByLocation", new object[] {
                        location,
                        names}, this.getQueueTimeoutByLocationOperationCompleted, userState);
        }
        
        private void OngetQueueTimeoutByLocationOperationCompleted(object arg) {
            if ((this.getQueueTimeoutByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getQueueTimeoutByLocationCompleted(this, new getQueueTimeoutByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSMTPSendStartTLS", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSMTPSendStartTLS(string[] names) {
            object[] results = this.Invoke("getSMTPSendStartTLS", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSMTPSendStartTLSAsync(string[] names) {
            this.getSMTPSendStartTLSAsync(names, null);
        }
        
        /// <remarks/>
        public void getSMTPSendStartTLSAsync(string[] names, object userState) {
            if ((this.getSMTPSendStartTLSOperationCompleted == null)) {
                this.getSMTPSendStartTLSOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSMTPSendStartTLSOperationCompleted);
            }
            this.InvokeAsync("getSMTPSendStartTLS", new object[] {
                        names}, this.getSMTPSendStartTLSOperationCompleted, userState);
        }
        
        private void OngetSMTPSendStartTLSOperationCompleted(object arg) {
            if ((this.getSMTPSendStartTLSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSMTPSendStartTLSCompleted(this, new getSMTPSendStartTLSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSMTPSendStartTLSByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSMTPSendStartTLSByLocation(string location, string[] names) {
            object[] results = this.Invoke("getSMTPSendStartTLSByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSMTPSendStartTLSByLocationAsync(string location, string[] names) {
            this.getSMTPSendStartTLSByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getSMTPSendStartTLSByLocationAsync(string location, string[] names, object userState) {
            if ((this.getSMTPSendStartTLSByLocationOperationCompleted == null)) {
                this.getSMTPSendStartTLSByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSMTPSendStartTLSByLocationOperationCompleted);
            }
            this.InvokeAsync("getSMTPSendStartTLSByLocation", new object[] {
                        location,
                        names}, this.getSMTPSendStartTLSByLocationOperationCompleted, userState);
        }
        
        private void OngetSMTPSendStartTLSByLocationOperationCompleted(object arg) {
            if ((this.getSMTPSendStartTLSByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSMTPSendStartTLSByLocationCompleted(this, new getSMTPSendStartTLSByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLClientAuth", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLClientAuth(string[] names) {
            object[] results = this.Invoke("getSSLClientAuth", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLClientAuthAsync(string[] names) {
            this.getSSLClientAuthAsync(names, null);
        }
        
        /// <remarks/>
        public void getSSLClientAuthAsync(string[] names, object userState) {
            if ((this.getSSLClientAuthOperationCompleted == null)) {
                this.getSSLClientAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLClientAuthOperationCompleted);
            }
            this.InvokeAsync("getSSLClientAuth", new object[] {
                        names}, this.getSSLClientAuthOperationCompleted, userState);
        }
        
        private void OngetSSLClientAuthOperationCompleted(object arg) {
            if ((this.getSSLClientAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLClientAuthCompleted(this, new getSSLClientAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLClientAuthByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLClientAuthByLocation(string location, string[] names) {
            object[] results = this.Invoke("getSSLClientAuthByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLClientAuthByLocationAsync(string location, string[] names) {
            this.getSSLClientAuthByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getSSLClientAuthByLocationAsync(string location, string[] names, object userState) {
            if ((this.getSSLClientAuthByLocationOperationCompleted == null)) {
                this.getSSLClientAuthByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLClientAuthByLocationOperationCompleted);
            }
            this.InvokeAsync("getSSLClientAuthByLocation", new object[] {
                        location,
                        names}, this.getSSLClientAuthByLocationOperationCompleted, userState);
        }
        
        private void OngetSSLClientAuthByLocationOperationCompleted(object arg) {
            if ((this.getSSLClientAuthByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLClientAuthByLocationCompleted(this, new getSSLClientAuthByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLEncrypt", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLEncrypt(string[] names) {
            object[] results = this.Invoke("getSSLEncrypt", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLEncryptAsync(string[] names) {
            this.getSSLEncryptAsync(names, null);
        }
        
        /// <remarks/>
        public void getSSLEncryptAsync(string[] names, object userState) {
            if ((this.getSSLEncryptOperationCompleted == null)) {
                this.getSSLEncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLEncryptOperationCompleted);
            }
            this.InvokeAsync("getSSLEncrypt", new object[] {
                        names}, this.getSSLEncryptOperationCompleted, userState);
        }
        
        private void OngetSSLEncryptOperationCompleted(object arg) {
            if ((this.getSSLEncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLEncryptCompleted(this, new getSSLEncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLEncryptByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLEncryptByLocation(string location, string[] names) {
            object[] results = this.Invoke("getSSLEncryptByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLEncryptByLocationAsync(string location, string[] names) {
            this.getSSLEncryptByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getSSLEncryptByLocationAsync(string location, string[] names, object userState) {
            if ((this.getSSLEncryptByLocationOperationCompleted == null)) {
                this.getSSLEncryptByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLEncryptByLocationOperationCompleted);
            }
            this.InvokeAsync("getSSLEncryptByLocation", new object[] {
                        location,
                        names}, this.getSSLEncryptByLocationOperationCompleted, userState);
        }
        
        private void OngetSSLEncryptByLocationOperationCompleted(object arg) {
            if ((this.getSSLEncryptByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLEncryptByLocationCompleted(this, new getSSLEncryptByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLEnhance", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLEnhance(string[] names) {
            object[] results = this.Invoke("getSSLEnhance", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLEnhanceAsync(string[] names) {
            this.getSSLEnhanceAsync(names, null);
        }
        
        /// <remarks/>
        public void getSSLEnhanceAsync(string[] names, object userState) {
            if ((this.getSSLEnhanceOperationCompleted == null)) {
                this.getSSLEnhanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLEnhanceOperationCompleted);
            }
            this.InvokeAsync("getSSLEnhance", new object[] {
                        names}, this.getSSLEnhanceOperationCompleted, userState);
        }
        
        private void OngetSSLEnhanceOperationCompleted(object arg) {
            if ((this.getSSLEnhanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLEnhanceCompleted(this, new getSSLEnhanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLEnhanceByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLEnhanceByLocation(string location, string[] names) {
            object[] results = this.Invoke("getSSLEnhanceByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLEnhanceByLocationAsync(string location, string[] names) {
            this.getSSLEnhanceByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getSSLEnhanceByLocationAsync(string location, string[] names, object userState) {
            if ((this.getSSLEnhanceByLocationOperationCompleted == null)) {
                this.getSSLEnhanceByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLEnhanceByLocationOperationCompleted);
            }
            this.InvokeAsync("getSSLEnhanceByLocation", new object[] {
                        location,
                        names}, this.getSSLEnhanceByLocationOperationCompleted, userState);
        }
        
        private void OngetSSLEnhanceByLocationOperationCompleted(object arg) {
            if ((this.getSSLEnhanceByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLEnhanceByLocationCompleted(this, new getSSLEnhanceByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLSendCloseAlerts", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLSendCloseAlerts(string[] names) {
            object[] results = this.Invoke("getSSLSendCloseAlerts", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLSendCloseAlertsAsync(string[] names) {
            this.getSSLSendCloseAlertsAsync(names, null);
        }
        
        /// <remarks/>
        public void getSSLSendCloseAlertsAsync(string[] names, object userState) {
            if ((this.getSSLSendCloseAlertsOperationCompleted == null)) {
                this.getSSLSendCloseAlertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLSendCloseAlertsOperationCompleted);
            }
            this.InvokeAsync("getSSLSendCloseAlerts", new object[] {
                        names}, this.getSSLSendCloseAlertsOperationCompleted, userState);
        }
        
        private void OngetSSLSendCloseAlertsOperationCompleted(object arg) {
            if ((this.getSSLSendCloseAlertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLSendCloseAlertsCompleted(this, new getSSLSendCloseAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLSendCloseAlertsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLSendCloseAlertsByLocation(string location, string[] names) {
            object[] results = this.Invoke("getSSLSendCloseAlertsByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLSendCloseAlertsByLocationAsync(string location, string[] names) {
            this.getSSLSendCloseAlertsByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getSSLSendCloseAlertsByLocationAsync(string location, string[] names, object userState) {
            if ((this.getSSLSendCloseAlertsByLocationOperationCompleted == null)) {
                this.getSSLSendCloseAlertsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLSendCloseAlertsByLocationOperationCompleted);
            }
            this.InvokeAsync("getSSLSendCloseAlertsByLocation", new object[] {
                        location,
                        names}, this.getSSLSendCloseAlertsByLocationOperationCompleted, userState);
        }
        
        private void OngetSSLSendCloseAlertsByLocationOperationCompleted(object arg) {
            if ((this.getSSLSendCloseAlertsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLSendCloseAlertsByLocationCompleted(this, new getSSLSendCloseAlertsByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLServerNameExtension", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLServerNameExtension(string[] names) {
            object[] results = this.Invoke("getSSLServerNameExtension", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLServerNameExtensionAsync(string[] names) {
            this.getSSLServerNameExtensionAsync(names, null);
        }
        
        /// <remarks/>
        public void getSSLServerNameExtensionAsync(string[] names, object userState) {
            if ((this.getSSLServerNameExtensionOperationCompleted == null)) {
                this.getSSLServerNameExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLServerNameExtensionOperationCompleted);
            }
            this.InvokeAsync("getSSLServerNameExtension", new object[] {
                        names}, this.getSSLServerNameExtensionOperationCompleted, userState);
        }
        
        private void OngetSSLServerNameExtensionOperationCompleted(object arg) {
            if ((this.getSSLServerNameExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLServerNameExtensionCompleted(this, new getSSLServerNameExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLServerNameExtensionByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLServerNameExtensionByLocation(string location, string[] names) {
            object[] results = this.Invoke("getSSLServerNameExtensionByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLServerNameExtensionByLocationAsync(string location, string[] names) {
            this.getSSLServerNameExtensionByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getSSLServerNameExtensionByLocationAsync(string location, string[] names, object userState) {
            if ((this.getSSLServerNameExtensionByLocationOperationCompleted == null)) {
                this.getSSLServerNameExtensionByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLServerNameExtensionByLocationOperationCompleted);
            }
            this.InvokeAsync("getSSLServerNameExtensionByLocation", new object[] {
                        location,
                        names}, this.getSSLServerNameExtensionByLocationOperationCompleted, userState);
        }
        
        private void OngetSSLServerNameExtensionByLocationOperationCompleted(object arg) {
            if ((this.getSSLServerNameExtensionByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLServerNameExtensionByLocationCompleted(this, new getSSLServerNameExtensionByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLStrictVerify", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLStrictVerify(string[] names) {
            object[] results = this.Invoke("getSSLStrictVerify", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLStrictVerifyAsync(string[] names) {
            this.getSSLStrictVerifyAsync(names, null);
        }
        
        /// <remarks/>
        public void getSSLStrictVerifyAsync(string[] names, object userState) {
            if ((this.getSSLStrictVerifyOperationCompleted == null)) {
                this.getSSLStrictVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLStrictVerifyOperationCompleted);
            }
            this.InvokeAsync("getSSLStrictVerify", new object[] {
                        names}, this.getSSLStrictVerifyOperationCompleted, userState);
        }
        
        private void OngetSSLStrictVerifyOperationCompleted(object arg) {
            if ((this.getSSLStrictVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLStrictVerifyCompleted(this, new getSSLStrictVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getSSLStrictVerifyByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getSSLStrictVerifyByLocation(string location, string[] names) {
            object[] results = this.Invoke("getSSLStrictVerifyByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getSSLStrictVerifyByLocationAsync(string location, string[] names) {
            this.getSSLStrictVerifyByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getSSLStrictVerifyByLocationAsync(string location, string[] names, object userState) {
            if ((this.getSSLStrictVerifyByLocationOperationCompleted == null)) {
                this.getSSLStrictVerifyByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSSLStrictVerifyByLocationOperationCompleted);
            }
            this.InvokeAsync("getSSLStrictVerifyByLocation", new object[] {
                        location,
                        names}, this.getSSLStrictVerifyByLocationOperationCompleted, userState);
        }
        
        private void OngetSSLStrictVerifyByLocationOperationCompleted(object arg) {
            if ((this.getSSLStrictVerifyByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSSLStrictVerifyByLocationCompleted(this, new getSSLStrictVerifyByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getTransparent", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getTransparent(string[] names) {
            object[] results = this.Invoke("getTransparent", new object[] {
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getTransparentAsync(string[] names) {
            this.getTransparentAsync(names, null);
        }
        
        /// <remarks/>
        public void getTransparentAsync(string[] names, object userState) {
            if ((this.getTransparentOperationCompleted == null)) {
                this.getTransparentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTransparentOperationCompleted);
            }
            this.InvokeAsync("getTransparent", new object[] {
                        names}, this.getTransparentOperationCompleted, userState);
        }
        
        private void OngetTransparentOperationCompleted(object arg) {
            if ((this.getTransparentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTransparentCompleted(this, new getTransparentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getTransparentByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public bool[] getTransparentByLocation(string location, string[] names) {
            object[] results = this.Invoke("getTransparentByLocation", new object[] {
                        location,
                        names});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void getTransparentByLocationAsync(string location, string[] names) {
            this.getTransparentByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getTransparentByLocationAsync(string location, string[] names, object userState) {
            if ((this.getTransparentByLocationOperationCompleted == null)) {
                this.getTransparentByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTransparentByLocationOperationCompleted);
            }
            this.InvokeAsync("getTransparentByLocation", new object[] {
                        location,
                        names}, this.getTransparentByLocationOperationCompleted, userState);
        }
        
        private void OngetTransparentByLocationOperationCompleted(object arg) {
            if ((this.getTransparentByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTransparentByLocationCompleted(this, new getTransparentByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFrom", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public PoolUDPAcceptFrom[] getUDPAcceptFrom(string[] names) {
            object[] results = this.Invoke("getUDPAcceptFrom", new object[] {
                        names});
            return ((PoolUDPAcceptFrom[])(results[0]));
        }
        
        /// <remarks/>
        public void getUDPAcceptFromAsync(string[] names) {
            this.getUDPAcceptFromAsync(names, null);
        }
        
        /// <remarks/>
        public void getUDPAcceptFromAsync(string[] names, object userState) {
            if ((this.getUDPAcceptFromOperationCompleted == null)) {
                this.getUDPAcceptFromOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUDPAcceptFromOperationCompleted);
            }
            this.InvokeAsync("getUDPAcceptFrom", new object[] {
                        names}, this.getUDPAcceptFromOperationCompleted, userState);
        }
        
        private void OngetUDPAcceptFromOperationCompleted(object arg) {
            if ((this.getUDPAcceptFromCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUDPAcceptFromCompleted(this, new getUDPAcceptFromCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFromByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public PoolUDPAcceptFrom[] getUDPAcceptFromByLocation(string location, string[] names) {
            object[] results = this.Invoke("getUDPAcceptFromByLocation", new object[] {
                        location,
                        names});
            return ((PoolUDPAcceptFrom[])(results[0]));
        }
        
        /// <remarks/>
        public void getUDPAcceptFromByLocationAsync(string location, string[] names) {
            this.getUDPAcceptFromByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getUDPAcceptFromByLocationAsync(string location, string[] names, object userState) {
            if ((this.getUDPAcceptFromByLocationOperationCompleted == null)) {
                this.getUDPAcceptFromByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUDPAcceptFromByLocationOperationCompleted);
            }
            this.InvokeAsync("getUDPAcceptFromByLocation", new object[] {
                        location,
                        names}, this.getUDPAcceptFromByLocationOperationCompleted, userState);
        }
        
        private void OngetUDPAcceptFromByLocationOperationCompleted(object arg) {
            if ((this.getUDPAcceptFromByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUDPAcceptFromByLocationCompleted(this, new getUDPAcceptFromByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFromIPMask", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getUDPAcceptFromIPMask(string[] names) {
            object[] results = this.Invoke("getUDPAcceptFromIPMask", new object[] {
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getUDPAcceptFromIPMaskAsync(string[] names) {
            this.getUDPAcceptFromIPMaskAsync(names, null);
        }
        
        /// <remarks/>
        public void getUDPAcceptFromIPMaskAsync(string[] names, object userState) {
            if ((this.getUDPAcceptFromIPMaskOperationCompleted == null)) {
                this.getUDPAcceptFromIPMaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUDPAcceptFromIPMaskOperationCompleted);
            }
            this.InvokeAsync("getUDPAcceptFromIPMask", new object[] {
                        names}, this.getUDPAcceptFromIPMaskOperationCompleted, userState);
        }
        
        private void OngetUDPAcceptFromIPMaskOperationCompleted(object arg) {
            if ((this.getUDPAcceptFromIPMaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUDPAcceptFromIPMaskCompleted(this, new getUDPAcceptFromIPMaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFromIPMaskByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("values")]
        public string[] getUDPAcceptFromIPMaskByLocation(string location, string[] names) {
            object[] results = this.Invoke("getUDPAcceptFromIPMaskByLocation", new object[] {
                        location,
                        names});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getUDPAcceptFromIPMaskByLocationAsync(string location, string[] names) {
            this.getUDPAcceptFromIPMaskByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getUDPAcceptFromIPMaskByLocationAsync(string location, string[] names, object userState) {
            if ((this.getUDPAcceptFromIPMaskByLocationOperationCompleted == null)) {
                this.getUDPAcceptFromIPMaskByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUDPAcceptFromIPMaskByLocationOperationCompleted);
            }
            this.InvokeAsync("getUDPAcceptFromIPMaskByLocation", new object[] {
                        location,
                        names}, this.getUDPAcceptFromIPMaskByLocationOperationCompleted, userState);
        }
        
        private void OngetUDPAcceptFromIPMaskByLocationOperationCompleted(object arg) {
            if ((this.getUDPAcceptFromIPMaskByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUDPAcceptFromIPMaskByLocationCompleted(this, new getUDPAcceptFromIPMaskByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getWeightings", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolWeightingsDefinition[][] getWeightings(string[] names) {
            object[] results = this.Invoke("getWeightings", new object[] {
                        names});
            return ((PoolWeightingsDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getWeightingsAsync(string[] names) {
            this.getWeightingsAsync(names, null);
        }
        
        /// <remarks/>
        public void getWeightingsAsync(string[] names, object userState) {
            if ((this.getWeightingsOperationCompleted == null)) {
                this.getWeightingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWeightingsOperationCompleted);
            }
            this.InvokeAsync("getWeightings", new object[] {
                        names}, this.getWeightingsOperationCompleted, userState);
        }
        
        private void OngetWeightingsOperationCompleted(object arg) {
            if ((this.getWeightingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWeightingsCompleted(this, new getWeightingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/getWeightingsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        [return: System.Xml.Serialization.SoapElementAttribute("node_values")]
        public PoolWeightingsDefinition[][] getWeightingsByLocation(string location, string[] names) {
            object[] results = this.Invoke("getWeightingsByLocation", new object[] {
                        location,
                        names});
            return ((PoolWeightingsDefinition[][])(results[0]));
        }
        
        /// <remarks/>
        public void getWeightingsByLocationAsync(string location, string[] names) {
            this.getWeightingsByLocationAsync(location, names, null);
        }
        
        /// <remarks/>
        public void getWeightingsByLocationAsync(string location, string[] names, object userState) {
            if ((this.getWeightingsByLocationOperationCompleted == null)) {
                this.getWeightingsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetWeightingsByLocationOperationCompleted);
            }
            this.InvokeAsync("getWeightingsByLocation", new object[] {
                        location,
                        names}, this.getWeightingsByLocationOperationCompleted, userState);
        }
        
        private void OngetWeightingsByLocationOperationCompleted(object arg) {
            if ((this.getWeightingsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getWeightingsByLocationCompleted(this, new getWeightingsByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/removeDrainingNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void removeDrainingNodes(string[] names, string[][] values) {
            this.Invoke("removeDrainingNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void removeDrainingNodesAsync(string[] names, string[][] values) {
            this.removeDrainingNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void removeDrainingNodesAsync(string[] names, string[][] values, object userState) {
            if ((this.removeDrainingNodesOperationCompleted == null)) {
                this.removeDrainingNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveDrainingNodesOperationCompleted);
            }
            this.InvokeAsync("removeDrainingNodes", new object[] {
                        names,
                        values}, this.removeDrainingNodesOperationCompleted, userState);
        }
        
        private void OnremoveDrainingNodesOperationCompleted(object arg) {
            if ((this.removeDrainingNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeDrainingNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/removeDrainingNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void removeDrainingNodesByLocation(string location, string[] names, string[][] values) {
            this.Invoke("removeDrainingNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void removeDrainingNodesByLocationAsync(string location, string[] names, string[][] values) {
            this.removeDrainingNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void removeDrainingNodesByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.removeDrainingNodesByLocationOperationCompleted == null)) {
                this.removeDrainingNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveDrainingNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("removeDrainingNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.removeDrainingNodesByLocationOperationCompleted, userState);
        }
        
        private void OnremoveDrainingNodesByLocationOperationCompleted(object arg) {
            if ((this.removeDrainingNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeDrainingNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/removeMonitors", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void removeMonitors(string[] names, string[][] values) {
            this.Invoke("removeMonitors", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void removeMonitorsAsync(string[] names, string[][] values) {
            this.removeMonitorsAsync(names, values, null);
        }
        
        /// <remarks/>
        public void removeMonitorsAsync(string[] names, string[][] values, object userState) {
            if ((this.removeMonitorsOperationCompleted == null)) {
                this.removeMonitorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveMonitorsOperationCompleted);
            }
            this.InvokeAsync("removeMonitors", new object[] {
                        names,
                        values}, this.removeMonitorsOperationCompleted, userState);
        }
        
        private void OnremoveMonitorsOperationCompleted(object arg) {
            if ((this.removeMonitorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeMonitorsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/removeMonitorsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void removeMonitorsByLocation(string location, string[] names, string[][] values) {
            this.Invoke("removeMonitorsByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void removeMonitorsByLocationAsync(string location, string[] names, string[][] values) {
            this.removeMonitorsByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void removeMonitorsByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.removeMonitorsByLocationOperationCompleted == null)) {
                this.removeMonitorsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveMonitorsByLocationOperationCompleted);
            }
            this.InvokeAsync("removeMonitorsByLocation", new object[] {
                        location,
                        names,
                        values}, this.removeMonitorsByLocationOperationCompleted, userState);
        }
        
        private void OnremoveMonitorsByLocationOperationCompleted(object arg) {
            if ((this.removeMonitorsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeMonitorsByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/removeNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void removeNodes(string[] names, string[][] values) {
            this.Invoke("removeNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void removeNodesAsync(string[] names, string[][] values) {
            this.removeNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void removeNodesAsync(string[] names, string[][] values, object userState) {
            if ((this.removeNodesOperationCompleted == null)) {
                this.removeNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveNodesOperationCompleted);
            }
            this.InvokeAsync("removeNodes", new object[] {
                        names,
                        values}, this.removeNodesOperationCompleted, userState);
        }
        
        private void OnremoveNodesOperationCompleted(object arg) {
            if ((this.removeNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/removeNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void removeNodesByLocation(string location, string[] names, string[][] values) {
            this.Invoke("removeNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void removeNodesByLocationAsync(string location, string[] names, string[][] values) {
            this.removeNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void removeNodesByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.removeNodesByLocationOperationCompleted == null)) {
                this.removeNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("removeNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.removeNodesByLocationOperationCompleted, userState);
        }
        
        private void OnremoveNodesByLocationOperationCompleted(object arg) {
            if ((this.removeNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/renamePool", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void renamePool(string[] names, string[] new_names) {
            this.Invoke("renamePool", new object[] {
                        names,
                        new_names});
        }
        
        /// <remarks/>
        public void renamePoolAsync(string[] names, string[] new_names) {
            this.renamePoolAsync(names, new_names, null);
        }
        
        /// <remarks/>
        public void renamePoolAsync(string[] names, string[] new_names, object userState) {
            if ((this.renamePoolOperationCompleted == null)) {
                this.renamePoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenamePoolOperationCompleted);
            }
            this.InvokeAsync("renamePool", new object[] {
                        names,
                        new_names}, this.renamePoolOperationCompleted, userState);
        }
        
        private void OnrenamePoolOperationCompleted(object arg) {
            if ((this.renamePoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renamePoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleCloudcredentials", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleCloudcredentials(string[] names, string[] values) {
            this.Invoke("setAutoscaleCloudcredentials", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleCloudcredentialsAsync(string[] names, string[] values) {
            this.setAutoscaleCloudcredentialsAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleCloudcredentialsAsync(string[] names, string[] values, object userState) {
            if ((this.setAutoscaleCloudcredentialsOperationCompleted == null)) {
                this.setAutoscaleCloudcredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleCloudcredentialsOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleCloudcredentials", new object[] {
                        names,
                        values}, this.setAutoscaleCloudcredentialsOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleCloudcredentialsOperationCompleted(object arg) {
            if ((this.setAutoscaleCloudcredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleCloudcredentialsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleCloudcredentialsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleCloudcredentialsByLocation(string location, string[] names, string[] values) {
            this.Invoke("setAutoscaleCloudcredentialsByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleCloudcredentialsByLocationAsync(string location, string[] names, string[] values) {
            this.setAutoscaleCloudcredentialsByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleCloudcredentialsByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setAutoscaleCloudcredentialsByLocationOperationCompleted == null)) {
                this.setAutoscaleCloudcredentialsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleCloudcredentialsByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleCloudcredentialsByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleCloudcredentialsByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleCloudcredentialsByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleCloudcredentialsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleCloudcredentialsByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleCluster", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleCluster(string[] names, string[] values) {
            this.Invoke("setAutoscaleCluster", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleClusterAsync(string[] names, string[] values) {
            this.setAutoscaleClusterAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleClusterAsync(string[] names, string[] values, object userState) {
            if ((this.setAutoscaleClusterOperationCompleted == null)) {
                this.setAutoscaleClusterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleClusterOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleCluster", new object[] {
                        names,
                        values}, this.setAutoscaleClusterOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleClusterOperationCompleted(object arg) {
            if ((this.setAutoscaleClusterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleClusterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleClusterByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleClusterByLocation(string location, string[] names, string[] values) {
            this.Invoke("setAutoscaleClusterByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleClusterByLocationAsync(string location, string[] names, string[] values) {
            this.setAutoscaleClusterByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleClusterByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setAutoscaleClusterByLocationOperationCompleted == null)) {
                this.setAutoscaleClusterByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleClusterByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleClusterByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleClusterByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleClusterByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleClusterByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleClusterByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatacenter", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleDatacenter(string[] names, string[] values) {
            this.Invoke("setAutoscaleDatacenter", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleDatacenterAsync(string[] names, string[] values) {
            this.setAutoscaleDatacenterAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleDatacenterAsync(string[] names, string[] values, object userState) {
            if ((this.setAutoscaleDatacenterOperationCompleted == null)) {
                this.setAutoscaleDatacenterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleDatacenterOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleDatacenter", new object[] {
                        names,
                        values}, this.setAutoscaleDatacenterOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleDatacenterOperationCompleted(object arg) {
            if ((this.setAutoscaleDatacenterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleDatacenterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatacenterByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleDatacenterByLocation(string location, string[] names, string[] values) {
            this.Invoke("setAutoscaleDatacenterByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleDatacenterByLocationAsync(string location, string[] names, string[] values) {
            this.setAutoscaleDatacenterByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleDatacenterByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setAutoscaleDatacenterByLocationOperationCompleted == null)) {
                this.setAutoscaleDatacenterByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleDatacenterByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleDatacenterByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleDatacenterByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleDatacenterByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleDatacenterByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleDatacenterByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatastore", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleDatastore(string[] names, string[] values) {
            this.Invoke("setAutoscaleDatastore", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleDatastoreAsync(string[] names, string[] values) {
            this.setAutoscaleDatastoreAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleDatastoreAsync(string[] names, string[] values, object userState) {
            if ((this.setAutoscaleDatastoreOperationCompleted == null)) {
                this.setAutoscaleDatastoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleDatastoreOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleDatastore", new object[] {
                        names,
                        values}, this.setAutoscaleDatastoreOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleDatastoreOperationCompleted(object arg) {
            if ((this.setAutoscaleDatastoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleDatastoreCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatastoreByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleDatastoreByLocation(string location, string[] names, string[] values) {
            this.Invoke("setAutoscaleDatastoreByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleDatastoreByLocationAsync(string location, string[] names, string[] values) {
            this.setAutoscaleDatastoreByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleDatastoreByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setAutoscaleDatastoreByLocationOperationCompleted == null)) {
                this.setAutoscaleDatastoreByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleDatastoreByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleDatastoreByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleDatastoreByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleDatastoreByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleDatastoreByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleDatastoreByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleEnabled", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleEnabled(string[] names, bool[] values) {
            this.Invoke("setAutoscaleEnabled", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleEnabledAsync(string[] names, bool[] values) {
            this.setAutoscaleEnabledAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleEnabledAsync(string[] names, bool[] values, object userState) {
            if ((this.setAutoscaleEnabledOperationCompleted == null)) {
                this.setAutoscaleEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleEnabledOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleEnabled", new object[] {
                        names,
                        values}, this.setAutoscaleEnabledOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleEnabledOperationCompleted(object arg) {
            if ((this.setAutoscaleEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleEnabledCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleEnabledByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleEnabledByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setAutoscaleEnabledByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleEnabledByLocationAsync(string location, string[] names, bool[] values) {
            this.setAutoscaleEnabledByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleEnabledByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setAutoscaleEnabledByLocationOperationCompleted == null)) {
                this.setAutoscaleEnabledByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleEnabledByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleEnabledByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleEnabledByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleEnabledByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleEnabledByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleEnabledByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleExternal", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleExternal(string[] names, bool[] values) {
            this.Invoke("setAutoscaleExternal", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleExternalAsync(string[] names, bool[] values) {
            this.setAutoscaleExternalAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleExternalAsync(string[] names, bool[] values, object userState) {
            if ((this.setAutoscaleExternalOperationCompleted == null)) {
                this.setAutoscaleExternalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleExternalOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleExternal", new object[] {
                        names,
                        values}, this.setAutoscaleExternalOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleExternalOperationCompleted(object arg) {
            if ((this.setAutoscaleExternalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleExternalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleExternalByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleExternalByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setAutoscaleExternalByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleExternalByLocationAsync(string location, string[] names, bool[] values) {
            this.setAutoscaleExternalByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleExternalByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setAutoscaleExternalByLocationOperationCompleted == null)) {
                this.setAutoscaleExternalByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleExternalByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleExternalByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleExternalByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleExternalByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleExternalByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleExternalByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleHysteresis", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleHysteresis(string[] names, uint[] values) {
            this.Invoke("setAutoscaleHysteresis", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleHysteresisAsync(string[] names, uint[] values) {
            this.setAutoscaleHysteresisAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleHysteresisAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleHysteresisOperationCompleted == null)) {
                this.setAutoscaleHysteresisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleHysteresisOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleHysteresis", new object[] {
                        names,
                        values}, this.setAutoscaleHysteresisOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleHysteresisOperationCompleted(object arg) {
            if ((this.setAutoscaleHysteresisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleHysteresisCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleHysteresisByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleHysteresisByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleHysteresisByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleHysteresisByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleHysteresisByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleHysteresisByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleHysteresisByLocationOperationCompleted == null)) {
                this.setAutoscaleHysteresisByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleHysteresisByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleHysteresisByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleHysteresisByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleHysteresisByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleHysteresisByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleHysteresisByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleImageid", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleImageid(string[] names, string[] values) {
            this.Invoke("setAutoscaleImageid", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleImageidAsync(string[] names, string[] values) {
            this.setAutoscaleImageidAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleImageidAsync(string[] names, string[] values, object userState) {
            if ((this.setAutoscaleImageidOperationCompleted == null)) {
                this.setAutoscaleImageidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleImageidOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleImageid", new object[] {
                        names,
                        values}, this.setAutoscaleImageidOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleImageidOperationCompleted(object arg) {
            if ((this.setAutoscaleImageidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleImageidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleImageidByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleImageidByLocation(string location, string[] names, string[] values) {
            this.Invoke("setAutoscaleImageidByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleImageidByLocationAsync(string location, string[] names, string[] values) {
            this.setAutoscaleImageidByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleImageidByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setAutoscaleImageidByLocationOperationCompleted == null)) {
                this.setAutoscaleImageidByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleImageidByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleImageidByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleImageidByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleImageidByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleImageidByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleImageidByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleIpstouse", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleIpstouse(string[] names, PoolAutoscaleIpstouse[] values) {
            this.Invoke("setAutoscaleIpstouse", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleIpstouseAsync(string[] names, PoolAutoscaleIpstouse[] values) {
            this.setAutoscaleIpstouseAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleIpstouseAsync(string[] names, PoolAutoscaleIpstouse[] values, object userState) {
            if ((this.setAutoscaleIpstouseOperationCompleted == null)) {
                this.setAutoscaleIpstouseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleIpstouseOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleIpstouse", new object[] {
                        names,
                        values}, this.setAutoscaleIpstouseOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleIpstouseOperationCompleted(object arg) {
            if ((this.setAutoscaleIpstouseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleIpstouseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleIpstouseByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleIpstouseByLocation(string location, string[] names, PoolAutoscaleIpstouse[] values) {
            this.Invoke("setAutoscaleIpstouseByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleIpstouseByLocationAsync(string location, string[] names, PoolAutoscaleIpstouse[] values) {
            this.setAutoscaleIpstouseByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleIpstouseByLocationAsync(string location, string[] names, PoolAutoscaleIpstouse[] values, object userState) {
            if ((this.setAutoscaleIpstouseByLocationOperationCompleted == null)) {
                this.setAutoscaleIpstouseByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleIpstouseByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleIpstouseByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleIpstouseByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleIpstouseByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleIpstouseByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleIpstouseByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleLastnodeIdletime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleLastnodeIdletime(string[] names, uint[] values) {
            this.Invoke("setAutoscaleLastnodeIdletime", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleLastnodeIdletimeAsync(string[] names, uint[] values) {
            this.setAutoscaleLastnodeIdletimeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleLastnodeIdletimeAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleLastnodeIdletimeOperationCompleted == null)) {
                this.setAutoscaleLastnodeIdletimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleLastnodeIdletimeOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleLastnodeIdletime", new object[] {
                        names,
                        values}, this.setAutoscaleLastnodeIdletimeOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleLastnodeIdletimeOperationCompleted(object arg) {
            if ((this.setAutoscaleLastnodeIdletimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleLastnodeIdletimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleLastnodeIdletimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleLastnodeIdletimeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleLastnodeIdletimeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleLastnodeIdletimeByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleLastnodeIdletimeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleLastnodeIdletimeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleLastnodeIdletimeByLocationOperationCompleted == null)) {
                this.setAutoscaleLastnodeIdletimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleLastnodeIdletimeByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleLastnodeIdletimeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleLastnodeIdletimeByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleLastnodeIdletimeByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleLastnodeIdletimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleLastnodeIdletimeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMaxNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleMaxNodes(string[] names, uint[] values) {
            this.Invoke("setAutoscaleMaxNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleMaxNodesAsync(string[] names, uint[] values) {
            this.setAutoscaleMaxNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleMaxNodesAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleMaxNodesOperationCompleted == null)) {
                this.setAutoscaleMaxNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleMaxNodesOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleMaxNodes", new object[] {
                        names,
                        values}, this.setAutoscaleMaxNodesOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleMaxNodesOperationCompleted(object arg) {
            if ((this.setAutoscaleMaxNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleMaxNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMaxNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleMaxNodesByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleMaxNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleMaxNodesByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleMaxNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleMaxNodesByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleMaxNodesByLocationOperationCompleted == null)) {
                this.setAutoscaleMaxNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleMaxNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleMaxNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleMaxNodesByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleMaxNodesByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleMaxNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleMaxNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMinNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleMinNodes(string[] names, uint[] values) {
            this.Invoke("setAutoscaleMinNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleMinNodesAsync(string[] names, uint[] values) {
            this.setAutoscaleMinNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleMinNodesAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleMinNodesOperationCompleted == null)) {
                this.setAutoscaleMinNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleMinNodesOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleMinNodes", new object[] {
                        names,
                        values}, this.setAutoscaleMinNodesOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleMinNodesOperationCompleted(object arg) {
            if ((this.setAutoscaleMinNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleMinNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMinNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleMinNodesByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleMinNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleMinNodesByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleMinNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleMinNodesByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleMinNodesByLocationOperationCompleted == null)) {
                this.setAutoscaleMinNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleMinNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleMinNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleMinNodesByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleMinNodesByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleMinNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleMinNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleName", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleName(string[] names, string[] values) {
            this.Invoke("setAutoscaleName", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleNameAsync(string[] names, string[] values) {
            this.setAutoscaleNameAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleNameAsync(string[] names, string[] values, object userState) {
            if ((this.setAutoscaleNameOperationCompleted == null)) {
                this.setAutoscaleNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleNameOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleName", new object[] {
                        names,
                        values}, this.setAutoscaleNameOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleNameOperationCompleted(object arg) {
            if ((this.setAutoscaleNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleNameByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleNameByLocation(string location, string[] names, string[] values) {
            this.Invoke("setAutoscaleNameByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleNameByLocationAsync(string location, string[] names, string[] values) {
            this.setAutoscaleNameByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleNameByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setAutoscaleNameByLocationOperationCompleted == null)) {
                this.setAutoscaleNameByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleNameByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleNameByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleNameByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleNameByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleNameByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleNameByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscalePort", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscalePort(string[] names, uint[] values) {
            this.Invoke("setAutoscalePort", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscalePortAsync(string[] names, uint[] values) {
            this.setAutoscalePortAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscalePortAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscalePortOperationCompleted == null)) {
                this.setAutoscalePortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscalePortOperationCompleted);
            }
            this.InvokeAsync("setAutoscalePort", new object[] {
                        names,
                        values}, this.setAutoscalePortOperationCompleted, userState);
        }
        
        private void OnsetAutoscalePortOperationCompleted(object arg) {
            if ((this.setAutoscalePortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscalePortCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscalePortByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscalePortByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscalePortByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscalePortByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscalePortByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscalePortByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscalePortByLocationOperationCompleted == null)) {
                this.setAutoscalePortByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscalePortByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscalePortByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscalePortByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscalePortByLocationOperationCompleted(object arg) {
            if ((this.setAutoscalePortByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscalePortByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleRefractory", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleRefractory(string[] names, uint[] values) {
            this.Invoke("setAutoscaleRefractory", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleRefractoryAsync(string[] names, uint[] values) {
            this.setAutoscaleRefractoryAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleRefractoryAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleRefractoryOperationCompleted == null)) {
                this.setAutoscaleRefractoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleRefractoryOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleRefractory", new object[] {
                        names,
                        values}, this.setAutoscaleRefractoryOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleRefractoryOperationCompleted(object arg) {
            if ((this.setAutoscaleRefractoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleRefractoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleRefractoryByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleRefractoryByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleRefractoryByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleRefractoryByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleRefractoryByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleRefractoryByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleRefractoryByLocationOperationCompleted == null)) {
                this.setAutoscaleRefractoryByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleRefractoryByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleRefractoryByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleRefractoryByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleRefractoryByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleRefractoryByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleRefractoryByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleResponseTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleResponseTime(string[] names, uint[] values) {
            this.Invoke("setAutoscaleResponseTime", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleResponseTimeAsync(string[] names, uint[] values) {
            this.setAutoscaleResponseTimeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleResponseTimeAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleResponseTimeOperationCompleted == null)) {
                this.setAutoscaleResponseTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleResponseTimeOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleResponseTime", new object[] {
                        names,
                        values}, this.setAutoscaleResponseTimeOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleResponseTimeOperationCompleted(object arg) {
            if ((this.setAutoscaleResponseTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleResponseTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleResponseTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleResponseTimeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleResponseTimeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleResponseTimeByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleResponseTimeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleResponseTimeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleResponseTimeByLocationOperationCompleted == null)) {
                this.setAutoscaleResponseTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleResponseTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleResponseTimeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleResponseTimeByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleResponseTimeByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleResponseTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleResponseTimeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaledownLevel", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleScaledownLevel(string[] names, uint[] values) {
            this.Invoke("setAutoscaleScaledownLevel", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleScaledownLevelAsync(string[] names, uint[] values) {
            this.setAutoscaleScaledownLevelAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleScaledownLevelAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleScaledownLevelOperationCompleted == null)) {
                this.setAutoscaleScaledownLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleScaledownLevelOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleScaledownLevel", new object[] {
                        names,
                        values}, this.setAutoscaleScaledownLevelOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleScaledownLevelOperationCompleted(object arg) {
            if ((this.setAutoscaleScaledownLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleScaledownLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaledownLevelByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleScaledownLevelByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleScaledownLevelByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleScaledownLevelByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleScaledownLevelByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleScaledownLevelByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleScaledownLevelByLocationOperationCompleted == null)) {
                this.setAutoscaleScaledownLevelByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleScaledownLevelByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleScaledownLevelByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleScaledownLevelByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleScaledownLevelByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleScaledownLevelByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleScaledownLevelByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaleupLevel", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleScaleupLevel(string[] names, uint[] values) {
            this.Invoke("setAutoscaleScaleupLevel", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleScaleupLevelAsync(string[] names, uint[] values) {
            this.setAutoscaleScaleupLevelAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleScaleupLevelAsync(string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleScaleupLevelOperationCompleted == null)) {
                this.setAutoscaleScaleupLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleScaleupLevelOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleScaleupLevel", new object[] {
                        names,
                        values}, this.setAutoscaleScaleupLevelOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleScaleupLevelOperationCompleted(object arg) {
            if ((this.setAutoscaleScaleupLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleScaleupLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaleupLevelByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleScaleupLevelByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setAutoscaleScaleupLevelByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleScaleupLevelByLocationAsync(string location, string[] names, uint[] values) {
            this.setAutoscaleScaleupLevelByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleScaleupLevelByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setAutoscaleScaleupLevelByLocationOperationCompleted == null)) {
                this.setAutoscaleScaleupLevelByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleScaleupLevelByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleScaleupLevelByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleScaleupLevelByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleScaleupLevelByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleScaleupLevelByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleScaleupLevelByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleSizeid", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleSizeid(string[] names, string[] values) {
            this.Invoke("setAutoscaleSizeid", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleSizeidAsync(string[] names, string[] values) {
            this.setAutoscaleSizeidAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleSizeidAsync(string[] names, string[] values, object userState) {
            if ((this.setAutoscaleSizeidOperationCompleted == null)) {
                this.setAutoscaleSizeidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleSizeidOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleSizeid", new object[] {
                        names,
                        values}, this.setAutoscaleSizeidOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleSizeidOperationCompleted(object arg) {
            if ((this.setAutoscaleSizeidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleSizeidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleSizeidByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setAutoscaleSizeidByLocation(string location, string[] names, string[] values) {
            this.Invoke("setAutoscaleSizeidByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setAutoscaleSizeidByLocationAsync(string location, string[] names, string[] values) {
            this.setAutoscaleSizeidByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setAutoscaleSizeidByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setAutoscaleSizeidByLocationOperationCompleted == null)) {
                this.setAutoscaleSizeidByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoscaleSizeidByLocationOperationCompleted);
            }
            this.InvokeAsync("setAutoscaleSizeidByLocation", new object[] {
                        location,
                        names,
                        values}, this.setAutoscaleSizeidByLocationOperationCompleted, userState);
        }
        
        private void OnsetAutoscaleSizeidByLocationOperationCompleted(object arg) {
            if ((this.setAutoscaleSizeidByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoscaleSizeidByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setBandwidthClass", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setBandwidthClass(string[] names, string[] values) {
            this.Invoke("setBandwidthClass", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setBandwidthClassAsync(string[] names, string[] values) {
            this.setBandwidthClassAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setBandwidthClassAsync(string[] names, string[] values, object userState) {
            if ((this.setBandwidthClassOperationCompleted == null)) {
                this.setBandwidthClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetBandwidthClassOperationCompleted);
            }
            this.InvokeAsync("setBandwidthClass", new object[] {
                        names,
                        values}, this.setBandwidthClassOperationCompleted, userState);
        }
        
        private void OnsetBandwidthClassOperationCompleted(object arg) {
            if ((this.setBandwidthClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setBandwidthClassCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setBandwidthClassByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setBandwidthClassByLocation(string location, string[] names, string[] values) {
            this.Invoke("setBandwidthClassByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setBandwidthClassByLocationAsync(string location, string[] names, string[] values) {
            this.setBandwidthClassByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setBandwidthClassByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setBandwidthClassByLocationOperationCompleted == null)) {
                this.setBandwidthClassByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetBandwidthClassByLocationOperationCompleted);
            }
            this.InvokeAsync("setBandwidthClassByLocation", new object[] {
                        location,
                        names,
                        values}, this.setBandwidthClassByLocationOperationCompleted, userState);
        }
        
        private void OnsetBandwidthClassByLocationOperationCompleted(object arg) {
            if ((this.setBandwidthClassByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setBandwidthClassByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setDisabledNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setDisabledNodes(string[] names, string[][] nodes) {
            this.Invoke("setDisabledNodes", new object[] {
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void setDisabledNodesAsync(string[] names, string[][] nodes) {
            this.setDisabledNodesAsync(names, nodes, null);
        }
        
        /// <remarks/>
        public void setDisabledNodesAsync(string[] names, string[][] nodes, object userState) {
            if ((this.setDisabledNodesOperationCompleted == null)) {
                this.setDisabledNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDisabledNodesOperationCompleted);
            }
            this.InvokeAsync("setDisabledNodes", new object[] {
                        names,
                        nodes}, this.setDisabledNodesOperationCompleted, userState);
        }
        
        private void OnsetDisabledNodesOperationCompleted(object arg) {
            if ((this.setDisabledNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDisabledNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setDisabledNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setDisabledNodesByLocation(string location, string[] names, string[][] nodes) {
            this.Invoke("setDisabledNodesByLocation", new object[] {
                        location,
                        names,
                        nodes});
        }
        
        /// <remarks/>
        public void setDisabledNodesByLocationAsync(string location, string[] names, string[][] nodes) {
            this.setDisabledNodesByLocationAsync(location, names, nodes, null);
        }
        
        /// <remarks/>
        public void setDisabledNodesByLocationAsync(string location, string[] names, string[][] nodes, object userState) {
            if ((this.setDisabledNodesByLocationOperationCompleted == null)) {
                this.setDisabledNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDisabledNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("setDisabledNodesByLocation", new object[] {
                        location,
                        names,
                        nodes}, this.setDisabledNodesByLocationOperationCompleted, userState);
        }
        
        private void OnsetDisabledNodesByLocationOperationCompleted(object arg) {
            if ((this.setDisabledNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDisabledNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setDrainingNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setDrainingNodes(string[] names, string[][] values) {
            this.Invoke("setDrainingNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setDrainingNodesAsync(string[] names, string[][] values) {
            this.setDrainingNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setDrainingNodesAsync(string[] names, string[][] values, object userState) {
            if ((this.setDrainingNodesOperationCompleted == null)) {
                this.setDrainingNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDrainingNodesOperationCompleted);
            }
            this.InvokeAsync("setDrainingNodes", new object[] {
                        names,
                        values}, this.setDrainingNodesOperationCompleted, userState);
        }
        
        private void OnsetDrainingNodesOperationCompleted(object arg) {
            if ((this.setDrainingNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDrainingNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setDrainingNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setDrainingNodesByLocation(string location, string[] names, string[][] values) {
            this.Invoke("setDrainingNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setDrainingNodesByLocationAsync(string location, string[] names, string[][] values) {
            this.setDrainingNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setDrainingNodesByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.setDrainingNodesByLocationOperationCompleted == null)) {
                this.setDrainingNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDrainingNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("setDrainingNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.setDrainingNodesByLocationOperationCompleted, userState);
        }
        
        private void OnsetDrainingNodesByLocationOperationCompleted(object arg) {
            if ((this.setDrainingNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDrainingNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setErrorFile", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setErrorFile(string[] names, string[] values) {
            this.Invoke("setErrorFile", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setErrorFileAsync(string[] names, string[] values) {
            this.setErrorFileAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setErrorFileAsync(string[] names, string[] values, object userState) {
            if ((this.setErrorFileOperationCompleted == null)) {
                this.setErrorFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetErrorFileOperationCompleted);
            }
            this.InvokeAsync("setErrorFile", new object[] {
                        names,
                        values}, this.setErrorFileOperationCompleted, userState);
        }
        
        private void OnsetErrorFileOperationCompleted(object arg) {
            if ((this.setErrorFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setErrorFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setFTPSupportRfc2428", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setFTPSupportRfc2428(string[] names, bool[] values) {
            this.Invoke("setFTPSupportRfc2428", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setFTPSupportRfc2428Async(string[] names, bool[] values) {
            this.setFTPSupportRfc2428Async(names, values, null);
        }
        
        /// <remarks/>
        public void setFTPSupportRfc2428Async(string[] names, bool[] values, object userState) {
            if ((this.setFTPSupportRfc2428OperationCompleted == null)) {
                this.setFTPSupportRfc2428OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFTPSupportRfc2428OperationCompleted);
            }
            this.InvokeAsync("setFTPSupportRfc2428", new object[] {
                        names,
                        values}, this.setFTPSupportRfc2428OperationCompleted, userState);
        }
        
        private void OnsetFTPSupportRfc2428OperationCompleted(object arg) {
            if ((this.setFTPSupportRfc2428Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFTPSupportRfc2428Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setFTPSupportRfc2428ByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setFTPSupportRfc2428ByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setFTPSupportRfc2428ByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setFTPSupportRfc2428ByLocationAsync(string location, string[] names, bool[] values) {
            this.setFTPSupportRfc2428ByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setFTPSupportRfc2428ByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setFTPSupportRfc2428ByLocationOperationCompleted == null)) {
                this.setFTPSupportRfc2428ByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFTPSupportRfc2428ByLocationOperationCompleted);
            }
            this.InvokeAsync("setFTPSupportRfc2428ByLocation", new object[] {
                        location,
                        names,
                        values}, this.setFTPSupportRfc2428ByLocationOperationCompleted, userState);
        }
        
        private void OnsetFTPSupportRfc2428ByLocationOperationCompleted(object arg) {
            if ((this.setFTPSupportRfc2428ByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFTPSupportRfc2428ByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setFailpool", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setFailpool(string[] names, string[] values) {
            this.Invoke("setFailpool", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setFailpoolAsync(string[] names, string[] values) {
            this.setFailpoolAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setFailpoolAsync(string[] names, string[] values, object userState) {
            if ((this.setFailpoolOperationCompleted == null)) {
                this.setFailpoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFailpoolOperationCompleted);
            }
            this.InvokeAsync("setFailpool", new object[] {
                        names,
                        values}, this.setFailpoolOperationCompleted, userState);
        }
        
        private void OnsetFailpoolOperationCompleted(object arg) {
            if ((this.setFailpoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFailpoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setFailpoolByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setFailpoolByLocation(string location, string[] names, string[] values) {
            this.Invoke("setFailpoolByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setFailpoolByLocationAsync(string location, string[] names, string[] values) {
            this.setFailpoolByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setFailpoolByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setFailpoolByLocationOperationCompleted == null)) {
                this.setFailpoolByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFailpoolByLocationOperationCompleted);
            }
            this.InvokeAsync("setFailpoolByLocation", new object[] {
                        location,
                        names,
                        values}, this.setFailpoolByLocationOperationCompleted, userState);
        }
        
        private void OnsetFailpoolByLocationOperationCompleted(object arg) {
            if ((this.setFailpoolByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFailpoolByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setKeepalive", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setKeepalive(string[] names, bool[] values) {
            this.Invoke("setKeepalive", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setKeepaliveAsync(string[] names, bool[] values) {
            this.setKeepaliveAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setKeepaliveAsync(string[] names, bool[] values, object userState) {
            if ((this.setKeepaliveOperationCompleted == null)) {
                this.setKeepaliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetKeepaliveOperationCompleted);
            }
            this.InvokeAsync("setKeepalive", new object[] {
                        names,
                        values}, this.setKeepaliveOperationCompleted, userState);
        }
        
        private void OnsetKeepaliveOperationCompleted(object arg) {
            if ((this.setKeepaliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setKeepaliveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setKeepaliveByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setKeepaliveByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setKeepaliveByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setKeepaliveByLocationAsync(string location, string[] names, bool[] values) {
            this.setKeepaliveByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setKeepaliveByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setKeepaliveByLocationOperationCompleted == null)) {
                this.setKeepaliveByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetKeepaliveByLocationOperationCompleted);
            }
            this.InvokeAsync("setKeepaliveByLocation", new object[] {
                        location,
                        names,
                        values}, this.setKeepaliveByLocationOperationCompleted, userState);
        }
        
        private void OnsetKeepaliveByLocationOperationCompleted(object arg) {
            if ((this.setKeepaliveByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setKeepaliveByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setKeepaliveNonIdempotent", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setKeepaliveNonIdempotent(string[] names, bool[] values) {
            this.Invoke("setKeepaliveNonIdempotent", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setKeepaliveNonIdempotentAsync(string[] names, bool[] values) {
            this.setKeepaliveNonIdempotentAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setKeepaliveNonIdempotentAsync(string[] names, bool[] values, object userState) {
            if ((this.setKeepaliveNonIdempotentOperationCompleted == null)) {
                this.setKeepaliveNonIdempotentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetKeepaliveNonIdempotentOperationCompleted);
            }
            this.InvokeAsync("setKeepaliveNonIdempotent", new object[] {
                        names,
                        values}, this.setKeepaliveNonIdempotentOperationCompleted, userState);
        }
        
        private void OnsetKeepaliveNonIdempotentOperationCompleted(object arg) {
            if ((this.setKeepaliveNonIdempotentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setKeepaliveNonIdempotentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setKeepaliveNonIdempotentByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setKeepaliveNonIdempotentByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setKeepaliveNonIdempotentByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setKeepaliveNonIdempotentByLocationAsync(string location, string[] names, bool[] values) {
            this.setKeepaliveNonIdempotentByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setKeepaliveNonIdempotentByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setKeepaliveNonIdempotentByLocationOperationCompleted == null)) {
                this.setKeepaliveNonIdempotentByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetKeepaliveNonIdempotentByLocationOperationCompleted);
            }
            this.InvokeAsync("setKeepaliveNonIdempotentByLocation", new object[] {
                        location,
                        names,
                        values}, this.setKeepaliveNonIdempotentByLocationOperationCompleted, userState);
        }
        
        private void OnsetKeepaliveNonIdempotentByLocationOperationCompleted(object arg) {
            if ((this.setKeepaliveNonIdempotentByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setKeepaliveNonIdempotentByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setLoadBalancingAlgorithm", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setLoadBalancingAlgorithm(string[] names, PoolLoadBalancingAlgorithm[] values) {
            this.Invoke("setLoadBalancingAlgorithm", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setLoadBalancingAlgorithmAsync(string[] names, PoolLoadBalancingAlgorithm[] values) {
            this.setLoadBalancingAlgorithmAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setLoadBalancingAlgorithmAsync(string[] names, PoolLoadBalancingAlgorithm[] values, object userState) {
            if ((this.setLoadBalancingAlgorithmOperationCompleted == null)) {
                this.setLoadBalancingAlgorithmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetLoadBalancingAlgorithmOperationCompleted);
            }
            this.InvokeAsync("setLoadBalancingAlgorithm", new object[] {
                        names,
                        values}, this.setLoadBalancingAlgorithmOperationCompleted, userState);
        }
        
        private void OnsetLoadBalancingAlgorithmOperationCompleted(object arg) {
            if ((this.setLoadBalancingAlgorithmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setLoadBalancingAlgorithmCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setLoadBalancingAlgorithmByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setLoadBalancingAlgorithmByLocation(string location, string[] names, PoolLoadBalancingAlgorithm[] values) {
            this.Invoke("setLoadBalancingAlgorithmByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setLoadBalancingAlgorithmByLocationAsync(string location, string[] names, PoolLoadBalancingAlgorithm[] values) {
            this.setLoadBalancingAlgorithmByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setLoadBalancingAlgorithmByLocationAsync(string location, string[] names, PoolLoadBalancingAlgorithm[] values, object userState) {
            if ((this.setLoadBalancingAlgorithmByLocationOperationCompleted == null)) {
                this.setLoadBalancingAlgorithmByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetLoadBalancingAlgorithmByLocationOperationCompleted);
            }
            this.InvokeAsync("setLoadBalancingAlgorithmByLocation", new object[] {
                        location,
                        names,
                        values}, this.setLoadBalancingAlgorithmByLocationOperationCompleted, userState);
        }
        
        private void OnsetLoadBalancingAlgorithmByLocationOperationCompleted(object arg) {
            if ((this.setLoadBalancingAlgorithmByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setLoadBalancingAlgorithmByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxConnectTime(string[] names, uint[] values) {
            this.Invoke("setMaxConnectTime", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxConnectTimeAsync(string[] names, uint[] values) {
            this.setMaxConnectTimeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setMaxConnectTimeAsync(string[] names, uint[] values, object userState) {
            if ((this.setMaxConnectTimeOperationCompleted == null)) {
                this.setMaxConnectTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxConnectTimeOperationCompleted);
            }
            this.InvokeAsync("setMaxConnectTime", new object[] {
                        names,
                        values}, this.setMaxConnectTimeOperationCompleted, userState);
        }
        
        private void OnsetMaxConnectTimeOperationCompleted(object arg) {
            if ((this.setMaxConnectTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxConnectTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxConnectTimeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setMaxConnectTimeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxConnectTimeByLocationAsync(string location, string[] names, uint[] values) {
            this.setMaxConnectTimeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setMaxConnectTimeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setMaxConnectTimeByLocationOperationCompleted == null)) {
                this.setMaxConnectTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxConnectTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("setMaxConnectTimeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setMaxConnectTimeByLocationOperationCompleted, userState);
        }
        
        private void OnsetMaxConnectTimeByLocationOperationCompleted(object arg) {
            if ((this.setMaxConnectTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxConnectTimeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectionsPernode", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxConnectionsPernode(string[] names, uint[] values) {
            this.Invoke("setMaxConnectionsPernode", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxConnectionsPernodeAsync(string[] names, uint[] values) {
            this.setMaxConnectionsPernodeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setMaxConnectionsPernodeAsync(string[] names, uint[] values, object userState) {
            if ((this.setMaxConnectionsPernodeOperationCompleted == null)) {
                this.setMaxConnectionsPernodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxConnectionsPernodeOperationCompleted);
            }
            this.InvokeAsync("setMaxConnectionsPernode", new object[] {
                        names,
                        values}, this.setMaxConnectionsPernodeOperationCompleted, userState);
        }
        
        private void OnsetMaxConnectionsPernodeOperationCompleted(object arg) {
            if ((this.setMaxConnectionsPernodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxConnectionsPernodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectionsPernodeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxConnectionsPernodeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setMaxConnectionsPernodeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxConnectionsPernodeByLocationAsync(string location, string[] names, uint[] values) {
            this.setMaxConnectionsPernodeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setMaxConnectionsPernodeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setMaxConnectionsPernodeByLocationOperationCompleted == null)) {
                this.setMaxConnectionsPernodeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxConnectionsPernodeByLocationOperationCompleted);
            }
            this.InvokeAsync("setMaxConnectionsPernodeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setMaxConnectionsPernodeByLocationOperationCompleted, userState);
        }
        
        private void OnsetMaxConnectionsPernodeByLocationOperationCompleted(object arg) {
            if ((this.setMaxConnectionsPernodeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxConnectionsPernodeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxIdleConnectionsPerNode", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxIdleConnectionsPerNode(string[] names, uint[] values) {
            this.Invoke("setMaxIdleConnectionsPerNode", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxIdleConnectionsPerNodeAsync(string[] names, uint[] values) {
            this.setMaxIdleConnectionsPerNodeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setMaxIdleConnectionsPerNodeAsync(string[] names, uint[] values, object userState) {
            if ((this.setMaxIdleConnectionsPerNodeOperationCompleted == null)) {
                this.setMaxIdleConnectionsPerNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxIdleConnectionsPerNodeOperationCompleted);
            }
            this.InvokeAsync("setMaxIdleConnectionsPerNode", new object[] {
                        names,
                        values}, this.setMaxIdleConnectionsPerNodeOperationCompleted, userState);
        }
        
        private void OnsetMaxIdleConnectionsPerNodeOperationCompleted(object arg) {
            if ((this.setMaxIdleConnectionsPerNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxIdleConnectionsPerNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxIdleConnectionsPerNodeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxIdleConnectionsPerNodeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setMaxIdleConnectionsPerNodeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxIdleConnectionsPerNodeByLocationAsync(string location, string[] names, uint[] values) {
            this.setMaxIdleConnectionsPerNodeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setMaxIdleConnectionsPerNodeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setMaxIdleConnectionsPerNodeByLocationOperationCompleted == null)) {
                this.setMaxIdleConnectionsPerNodeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxIdleConnectionsPerNodeByLocationOperationCompleted);
            }
            this.InvokeAsync("setMaxIdleConnectionsPerNodeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setMaxIdleConnectionsPerNodeByLocationOperationCompleted, userState);
        }
        
        private void OnsetMaxIdleConnectionsPerNodeByLocationOperationCompleted(object arg) {
            if ((this.setMaxIdleConnectionsPerNodeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxIdleConnectionsPerNodeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxKeepalivesPerNode", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxKeepalivesPerNode(string[] names, uint[] values) {
            this.Invoke("setMaxKeepalivesPerNode", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxKeepalivesPerNodeAsync(string[] names, uint[] values) {
            this.setMaxKeepalivesPerNodeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setMaxKeepalivesPerNodeAsync(string[] names, uint[] values, object userState) {
            if ((this.setMaxKeepalivesPerNodeOperationCompleted == null)) {
                this.setMaxKeepalivesPerNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxKeepalivesPerNodeOperationCompleted);
            }
            this.InvokeAsync("setMaxKeepalivesPerNode", new object[] {
                        names,
                        values}, this.setMaxKeepalivesPerNodeOperationCompleted, userState);
        }
        
        private void OnsetMaxKeepalivesPerNodeOperationCompleted(object arg) {
            if ((this.setMaxKeepalivesPerNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxKeepalivesPerNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxKeepalivesPerNodeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxKeepalivesPerNodeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setMaxKeepalivesPerNodeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxKeepalivesPerNodeByLocationAsync(string location, string[] names, uint[] values) {
            this.setMaxKeepalivesPerNodeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setMaxKeepalivesPerNodeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setMaxKeepalivesPerNodeByLocationOperationCompleted == null)) {
                this.setMaxKeepalivesPerNodeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxKeepalivesPerNodeByLocationOperationCompleted);
            }
            this.InvokeAsync("setMaxKeepalivesPerNodeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setMaxKeepalivesPerNodeByLocationOperationCompleted, userState);
        }
        
        private void OnsetMaxKeepalivesPerNodeByLocationOperationCompleted(object arg) {
            if ((this.setMaxKeepalivesPerNodeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxKeepalivesPerNodeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxQueueSize", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxQueueSize(string[] names, uint[] values) {
            this.Invoke("setMaxQueueSize", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxQueueSizeAsync(string[] names, uint[] values) {
            this.setMaxQueueSizeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setMaxQueueSizeAsync(string[] names, uint[] values, object userState) {
            if ((this.setMaxQueueSizeOperationCompleted == null)) {
                this.setMaxQueueSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxQueueSizeOperationCompleted);
            }
            this.InvokeAsync("setMaxQueueSize", new object[] {
                        names,
                        values}, this.setMaxQueueSizeOperationCompleted, userState);
        }
        
        private void OnsetMaxQueueSizeOperationCompleted(object arg) {
            if ((this.setMaxQueueSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxQueueSizeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxQueueSizeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxQueueSizeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setMaxQueueSizeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxQueueSizeByLocationAsync(string location, string[] names, uint[] values) {
            this.setMaxQueueSizeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setMaxQueueSizeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setMaxQueueSizeByLocationOperationCompleted == null)) {
                this.setMaxQueueSizeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxQueueSizeByLocationOperationCompleted);
            }
            this.InvokeAsync("setMaxQueueSizeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setMaxQueueSizeByLocationOperationCompleted, userState);
        }
        
        private void OnsetMaxQueueSizeByLocationOperationCompleted(object arg) {
            if ((this.setMaxQueueSizeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxQueueSizeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxReplyTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxReplyTime(string[] names, uint[] values) {
            this.Invoke("setMaxReplyTime", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxReplyTimeAsync(string[] names, uint[] values) {
            this.setMaxReplyTimeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setMaxReplyTimeAsync(string[] names, uint[] values, object userState) {
            if ((this.setMaxReplyTimeOperationCompleted == null)) {
                this.setMaxReplyTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxReplyTimeOperationCompleted);
            }
            this.InvokeAsync("setMaxReplyTime", new object[] {
                        names,
                        values}, this.setMaxReplyTimeOperationCompleted, userState);
        }
        
        private void OnsetMaxReplyTimeOperationCompleted(object arg) {
            if ((this.setMaxReplyTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxReplyTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMaxReplyTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMaxReplyTimeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setMaxReplyTimeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMaxReplyTimeByLocationAsync(string location, string[] names, uint[] values) {
            this.setMaxReplyTimeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setMaxReplyTimeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setMaxReplyTimeByLocationOperationCompleted == null)) {
                this.setMaxReplyTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMaxReplyTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("setMaxReplyTimeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setMaxReplyTimeByLocationOperationCompleted, userState);
        }
        
        private void OnsetMaxReplyTimeByLocationOperationCompleted(object arg) {
            if ((this.setMaxReplyTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMaxReplyTimeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMonitors", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMonitors(string[] names, string[][] values) {
            this.Invoke("setMonitors", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMonitorsAsync(string[] names, string[][] values) {
            this.setMonitorsAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setMonitorsAsync(string[] names, string[][] values, object userState) {
            if ((this.setMonitorsOperationCompleted == null)) {
                this.setMonitorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMonitorsOperationCompleted);
            }
            this.InvokeAsync("setMonitors", new object[] {
                        names,
                        values}, this.setMonitorsOperationCompleted, userState);
        }
        
        private void OnsetMonitorsOperationCompleted(object arg) {
            if ((this.setMonitorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMonitorsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setMonitorsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setMonitorsByLocation(string location, string[] names, string[][] values) {
            this.Invoke("setMonitorsByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setMonitorsByLocationAsync(string location, string[] names, string[][] values) {
            this.setMonitorsByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setMonitorsByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.setMonitorsByLocationOperationCompleted == null)) {
                this.setMonitorsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMonitorsByLocationOperationCompleted);
            }
            this.InvokeAsync("setMonitorsByLocation", new object[] {
                        location,
                        names,
                        values}, this.setMonitorsByLocationOperationCompleted, userState);
        }
        
        private void OnsetMonitorsByLocationOperationCompleted(object arg) {
            if ((this.setMonitorsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMonitorsByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnClose", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeConnClose(string[] names, bool[] values) {
            this.Invoke("setNodeConnClose", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeConnCloseAsync(string[] names, bool[] values) {
            this.setNodeConnCloseAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setNodeConnCloseAsync(string[] names, bool[] values, object userState) {
            if ((this.setNodeConnCloseOperationCompleted == null)) {
                this.setNodeConnCloseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeConnCloseOperationCompleted);
            }
            this.InvokeAsync("setNodeConnClose", new object[] {
                        names,
                        values}, this.setNodeConnCloseOperationCompleted, userState);
        }
        
        private void OnsetNodeConnCloseOperationCompleted(object arg) {
            if ((this.setNodeConnCloseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeConnCloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnCloseByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeConnCloseByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setNodeConnCloseByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeConnCloseByLocationAsync(string location, string[] names, bool[] values) {
            this.setNodeConnCloseByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setNodeConnCloseByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setNodeConnCloseByLocationOperationCompleted == null)) {
                this.setNodeConnCloseByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeConnCloseByLocationOperationCompleted);
            }
            this.InvokeAsync("setNodeConnCloseByLocation", new object[] {
                        location,
                        names,
                        values}, this.setNodeConnCloseByLocationOperationCompleted, userState);
        }
        
        private void OnsetNodeConnCloseByLocationOperationCompleted(object arg) {
            if ((this.setNodeConnCloseByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeConnCloseByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnectionAttempts", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeConnectionAttempts(string[] names, uint[] values) {
            this.Invoke("setNodeConnectionAttempts", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeConnectionAttemptsAsync(string[] names, uint[] values) {
            this.setNodeConnectionAttemptsAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setNodeConnectionAttemptsAsync(string[] names, uint[] values, object userState) {
            if ((this.setNodeConnectionAttemptsOperationCompleted == null)) {
                this.setNodeConnectionAttemptsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeConnectionAttemptsOperationCompleted);
            }
            this.InvokeAsync("setNodeConnectionAttempts", new object[] {
                        names,
                        values}, this.setNodeConnectionAttemptsOperationCompleted, userState);
        }
        
        private void OnsetNodeConnectionAttemptsOperationCompleted(object arg) {
            if ((this.setNodeConnectionAttemptsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeConnectionAttemptsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnectionAttemptsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeConnectionAttemptsByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setNodeConnectionAttemptsByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeConnectionAttemptsByLocationAsync(string location, string[] names, uint[] values) {
            this.setNodeConnectionAttemptsByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setNodeConnectionAttemptsByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setNodeConnectionAttemptsByLocationOperationCompleted == null)) {
                this.setNodeConnectionAttemptsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeConnectionAttemptsByLocationOperationCompleted);
            }
            this.InvokeAsync("setNodeConnectionAttemptsByLocation", new object[] {
                        location,
                        names,
                        values}, this.setNodeConnectionAttemptsByLocationOperationCompleted, userState);
        }
        
        private void OnsetNodeConnectionAttemptsByLocationOperationCompleted(object arg) {
            if ((this.setNodeConnectionAttemptsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeConnectionAttemptsByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeFailTime", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeFailTime(string[] names, uint[] values) {
            this.Invoke("setNodeFailTime", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeFailTimeAsync(string[] names, uint[] values) {
            this.setNodeFailTimeAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setNodeFailTimeAsync(string[] names, uint[] values, object userState) {
            if ((this.setNodeFailTimeOperationCompleted == null)) {
                this.setNodeFailTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeFailTimeOperationCompleted);
            }
            this.InvokeAsync("setNodeFailTime", new object[] {
                        names,
                        values}, this.setNodeFailTimeOperationCompleted, userState);
        }
        
        private void OnsetNodeFailTimeOperationCompleted(object arg) {
            if ((this.setNodeFailTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeFailTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeFailTimeByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeFailTimeByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setNodeFailTimeByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeFailTimeByLocationAsync(string location, string[] names, uint[] values) {
            this.setNodeFailTimeByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setNodeFailTimeByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setNodeFailTimeByLocationOperationCompleted == null)) {
                this.setNodeFailTimeByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeFailTimeByLocationOperationCompleted);
            }
            this.InvokeAsync("setNodeFailTimeByLocation", new object[] {
                        location,
                        names,
                        values}, this.setNodeFailTimeByLocationOperationCompleted, userState);
        }
        
        private void OnsetNodeFailTimeByLocationOperationCompleted(object arg) {
            if ((this.setNodeFailTimeByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeFailTimeByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeUseNagle", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeUseNagle(string[] names, bool[] values) {
            this.Invoke("setNodeUseNagle", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeUseNagleAsync(string[] names, bool[] values) {
            this.setNodeUseNagleAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setNodeUseNagleAsync(string[] names, bool[] values, object userState) {
            if ((this.setNodeUseNagleOperationCompleted == null)) {
                this.setNodeUseNagleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeUseNagleOperationCompleted);
            }
            this.InvokeAsync("setNodeUseNagle", new object[] {
                        names,
                        values}, this.setNodeUseNagleOperationCompleted, userState);
        }
        
        private void OnsetNodeUseNagleOperationCompleted(object arg) {
            if ((this.setNodeUseNagleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeUseNagleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodeUseNagleByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodeUseNagleByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setNodeUseNagleByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodeUseNagleByLocationAsync(string location, string[] names, bool[] values) {
            this.setNodeUseNagleByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setNodeUseNagleByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setNodeUseNagleByLocationOperationCompleted == null)) {
                this.setNodeUseNagleByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodeUseNagleByLocationOperationCompleted);
            }
            this.InvokeAsync("setNodeUseNagleByLocation", new object[] {
                        location,
                        names,
                        values}, this.setNodeUseNagleByLocationOperationCompleted, userState);
        }
        
        private void OnsetNodeUseNagleByLocationOperationCompleted(object arg) {
            if ((this.setNodeUseNagleByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodeUseNagleByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodes(string[] names, string[][] values) {
            this.Invoke("setNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodesAsync(string[] names, string[][] values) {
            this.setNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setNodesAsync(string[] names, string[][] values, object userState) {
            if ((this.setNodesOperationCompleted == null)) {
                this.setNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodesOperationCompleted);
            }
            this.InvokeAsync("setNodes", new object[] {
                        names,
                        values}, this.setNodesOperationCompleted, userState);
        }
        
        private void OnsetNodesOperationCompleted(object arg) {
            if ((this.setNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodesByLocation(string location, string[] names, string[][] values) {
            this.Invoke("setNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNodesByLocationAsync(string location, string[] names, string[][] values) {
            this.setNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setNodesByLocationAsync(string location, string[] names, string[][] values, object userState) {
            if ((this.setNodesByLocationOperationCompleted == null)) {
                this.setNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("setNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.setNodesByLocationOperationCompleted, userState);
        }
        
        private void OnsetNodesByLocationOperationCompleted(object arg) {
            if ((this.setNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodesPriorityValue", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodesPriorityValue(string[] names, PoolPriorityValueDefinition[][] node_values) {
            this.Invoke("setNodesPriorityValue", new object[] {
                        names,
                        node_values});
        }
        
        /// <remarks/>
        public void setNodesPriorityValueAsync(string[] names, PoolPriorityValueDefinition[][] node_values) {
            this.setNodesPriorityValueAsync(names, node_values, null);
        }
        
        /// <remarks/>
        public void setNodesPriorityValueAsync(string[] names, PoolPriorityValueDefinition[][] node_values, object userState) {
            if ((this.setNodesPriorityValueOperationCompleted == null)) {
                this.setNodesPriorityValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodesPriorityValueOperationCompleted);
            }
            this.InvokeAsync("setNodesPriorityValue", new object[] {
                        names,
                        node_values}, this.setNodesPriorityValueOperationCompleted, userState);
        }
        
        private void OnsetNodesPriorityValueOperationCompleted(object arg) {
            if ((this.setNodesPriorityValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodesPriorityValueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodesPriorityValueByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodesPriorityValueByLocation(string location, string[] names, PoolPriorityValueDefinition[][] node_values) {
            this.Invoke("setNodesPriorityValueByLocation", new object[] {
                        location,
                        names,
                        node_values});
        }
        
        /// <remarks/>
        public void setNodesPriorityValueByLocationAsync(string location, string[] names, PoolPriorityValueDefinition[][] node_values) {
            this.setNodesPriorityValueByLocationAsync(location, names, node_values, null);
        }
        
        /// <remarks/>
        public void setNodesPriorityValueByLocationAsync(string location, string[] names, PoolPriorityValueDefinition[][] node_values, object userState) {
            if ((this.setNodesPriorityValueByLocationOperationCompleted == null)) {
                this.setNodesPriorityValueByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodesPriorityValueByLocationOperationCompleted);
            }
            this.InvokeAsync("setNodesPriorityValueByLocation", new object[] {
                        location,
                        names,
                        node_values}, this.setNodesPriorityValueByLocationOperationCompleted, userState);
        }
        
        private void OnsetNodesPriorityValueByLocationOperationCompleted(object arg) {
            if ((this.setNodesPriorityValueByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodesPriorityValueByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodesWeightings", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodesWeightings(string[] names, PoolWeightingsDefinition[][] nodes_values) {
            this.Invoke("setNodesWeightings", new object[] {
                        names,
                        nodes_values});
        }
        
        /// <remarks/>
        public void setNodesWeightingsAsync(string[] names, PoolWeightingsDefinition[][] nodes_values) {
            this.setNodesWeightingsAsync(names, nodes_values, null);
        }
        
        /// <remarks/>
        public void setNodesWeightingsAsync(string[] names, PoolWeightingsDefinition[][] nodes_values, object userState) {
            if ((this.setNodesWeightingsOperationCompleted == null)) {
                this.setNodesWeightingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodesWeightingsOperationCompleted);
            }
            this.InvokeAsync("setNodesWeightings", new object[] {
                        names,
                        nodes_values}, this.setNodesWeightingsOperationCompleted, userState);
        }
        
        private void OnsetNodesWeightingsOperationCompleted(object arg) {
            if ((this.setNodesWeightingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodesWeightingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNodesWeightingsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNodesWeightingsByLocation(string location, string[] names, PoolWeightingsDefinition[][] nodes_values) {
            this.Invoke("setNodesWeightingsByLocation", new object[] {
                        location,
                        names,
                        nodes_values});
        }
        
        /// <remarks/>
        public void setNodesWeightingsByLocationAsync(string location, string[] names, PoolWeightingsDefinition[][] nodes_values) {
            this.setNodesWeightingsByLocationAsync(location, names, nodes_values, null);
        }
        
        /// <remarks/>
        public void setNodesWeightingsByLocationAsync(string location, string[] names, PoolWeightingsDefinition[][] nodes_values, object userState) {
            if ((this.setNodesWeightingsByLocationOperationCompleted == null)) {
                this.setNodesWeightingsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNodesWeightingsByLocationOperationCompleted);
            }
            this.InvokeAsync("setNodesWeightingsByLocation", new object[] {
                        location,
                        names,
                        nodes_values}, this.setNodesWeightingsByLocationOperationCompleted, userState);
        }
        
        private void OnsetNodesWeightingsByLocationOperationCompleted(object arg) {
            if ((this.setNodesWeightingsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNodesWeightingsByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setNote", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setNote(string[] names, string[] values) {
            this.Invoke("setNote", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setNoteAsync(string[] names, string[] values) {
            this.setNoteAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setNoteAsync(string[] names, string[] values, object userState) {
            if ((this.setNoteOperationCompleted == null)) {
                this.setNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetNoteOperationCompleted);
            }
            this.InvokeAsync("setNote", new object[] {
                        names,
                        values}, this.setNoteOperationCompleted, userState);
        }
        
        private void OnsetNoteOperationCompleted(object arg) {
            if ((this.setNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setNoteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPassiveMonitoring", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPassiveMonitoring(string[] names, bool[] values) {
            this.Invoke("setPassiveMonitoring", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPassiveMonitoringAsync(string[] names, bool[] values) {
            this.setPassiveMonitoringAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setPassiveMonitoringAsync(string[] names, bool[] values, object userState) {
            if ((this.setPassiveMonitoringOperationCompleted == null)) {
                this.setPassiveMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPassiveMonitoringOperationCompleted);
            }
            this.InvokeAsync("setPassiveMonitoring", new object[] {
                        names,
                        values}, this.setPassiveMonitoringOperationCompleted, userState);
        }
        
        private void OnsetPassiveMonitoringOperationCompleted(object arg) {
            if ((this.setPassiveMonitoringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPassiveMonitoringCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPassiveMonitoringByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPassiveMonitoringByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setPassiveMonitoringByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPassiveMonitoringByLocationAsync(string location, string[] names, bool[] values) {
            this.setPassiveMonitoringByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setPassiveMonitoringByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setPassiveMonitoringByLocationOperationCompleted == null)) {
                this.setPassiveMonitoringByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPassiveMonitoringByLocationOperationCompleted);
            }
            this.InvokeAsync("setPassiveMonitoringByLocation", new object[] {
                        location,
                        names,
                        values}, this.setPassiveMonitoringByLocationOperationCompleted, userState);
        }
        
        private void OnsetPassiveMonitoringByLocationOperationCompleted(object arg) {
            if ((this.setPassiveMonitoringByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPassiveMonitoringByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPersistence", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPersistence(string[] names, string[] values) {
            this.Invoke("setPersistence", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPersistenceAsync(string[] names, string[] values) {
            this.setPersistenceAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setPersistenceAsync(string[] names, string[] values, object userState) {
            if ((this.setPersistenceOperationCompleted == null)) {
                this.setPersistenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPersistenceOperationCompleted);
            }
            this.InvokeAsync("setPersistence", new object[] {
                        names,
                        values}, this.setPersistenceOperationCompleted, userState);
        }
        
        private void OnsetPersistenceOperationCompleted(object arg) {
            if ((this.setPersistenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPersistenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPersistenceByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPersistenceByLocation(string location, string[] names, string[] values) {
            this.Invoke("setPersistenceByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPersistenceByLocationAsync(string location, string[] names, string[] values) {
            this.setPersistenceByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setPersistenceByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setPersistenceByLocationOperationCompleted == null)) {
                this.setPersistenceByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPersistenceByLocationOperationCompleted);
            }
            this.InvokeAsync("setPersistenceByLocation", new object[] {
                        location,
                        names,
                        values}, this.setPersistenceByLocationOperationCompleted, userState);
        }
        
        private void OnsetPersistenceByLocationOperationCompleted(object arg) {
            if ((this.setPersistenceByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPersistenceByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPriorityEnabled", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPriorityEnabled(string[] names, bool[] values) {
            this.Invoke("setPriorityEnabled", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPriorityEnabledAsync(string[] names, bool[] values) {
            this.setPriorityEnabledAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setPriorityEnabledAsync(string[] names, bool[] values, object userState) {
            if ((this.setPriorityEnabledOperationCompleted == null)) {
                this.setPriorityEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPriorityEnabledOperationCompleted);
            }
            this.InvokeAsync("setPriorityEnabled", new object[] {
                        names,
                        values}, this.setPriorityEnabledOperationCompleted, userState);
        }
        
        private void OnsetPriorityEnabledOperationCompleted(object arg) {
            if ((this.setPriorityEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPriorityEnabledCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPriorityEnabledByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPriorityEnabledByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setPriorityEnabledByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPriorityEnabledByLocationAsync(string location, string[] names, bool[] values) {
            this.setPriorityEnabledByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setPriorityEnabledByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setPriorityEnabledByLocationOperationCompleted == null)) {
                this.setPriorityEnabledByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPriorityEnabledByLocationOperationCompleted);
            }
            this.InvokeAsync("setPriorityEnabledByLocation", new object[] {
                        location,
                        names,
                        values}, this.setPriorityEnabledByLocationOperationCompleted, userState);
        }
        
        private void OnsetPriorityEnabledByLocationOperationCompleted(object arg) {
            if ((this.setPriorityEnabledByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPriorityEnabledByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPriorityNodes", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPriorityNodes(string[] names, uint[] values) {
            this.Invoke("setPriorityNodes", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPriorityNodesAsync(string[] names, uint[] values) {
            this.setPriorityNodesAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setPriorityNodesAsync(string[] names, uint[] values, object userState) {
            if ((this.setPriorityNodesOperationCompleted == null)) {
                this.setPriorityNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPriorityNodesOperationCompleted);
            }
            this.InvokeAsync("setPriorityNodes", new object[] {
                        names,
                        values}, this.setPriorityNodesOperationCompleted, userState);
        }
        
        private void OnsetPriorityNodesOperationCompleted(object arg) {
            if ((this.setPriorityNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPriorityNodesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setPriorityNodesByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setPriorityNodesByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setPriorityNodesByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setPriorityNodesByLocationAsync(string location, string[] names, uint[] values) {
            this.setPriorityNodesByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setPriorityNodesByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setPriorityNodesByLocationOperationCompleted == null)) {
                this.setPriorityNodesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPriorityNodesByLocationOperationCompleted);
            }
            this.InvokeAsync("setPriorityNodesByLocation", new object[] {
                        location,
                        names,
                        values}, this.setPriorityNodesByLocationOperationCompleted, userState);
        }
        
        private void OnsetPriorityNodesByLocationOperationCompleted(object arg) {
            if ((this.setPriorityNodesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPriorityNodesByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setQueueTimeout", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setQueueTimeout(string[] names, uint[] values) {
            this.Invoke("setQueueTimeout", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setQueueTimeoutAsync(string[] names, uint[] values) {
            this.setQueueTimeoutAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setQueueTimeoutAsync(string[] names, uint[] values, object userState) {
            if ((this.setQueueTimeoutOperationCompleted == null)) {
                this.setQueueTimeoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetQueueTimeoutOperationCompleted);
            }
            this.InvokeAsync("setQueueTimeout", new object[] {
                        names,
                        values}, this.setQueueTimeoutOperationCompleted, userState);
        }
        
        private void OnsetQueueTimeoutOperationCompleted(object arg) {
            if ((this.setQueueTimeoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setQueueTimeoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setQueueTimeoutByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setQueueTimeoutByLocation(string location, string[] names, uint[] values) {
            this.Invoke("setQueueTimeoutByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setQueueTimeoutByLocationAsync(string location, string[] names, uint[] values) {
            this.setQueueTimeoutByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setQueueTimeoutByLocationAsync(string location, string[] names, uint[] values, object userState) {
            if ((this.setQueueTimeoutByLocationOperationCompleted == null)) {
                this.setQueueTimeoutByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetQueueTimeoutByLocationOperationCompleted);
            }
            this.InvokeAsync("setQueueTimeoutByLocation", new object[] {
                        location,
                        names,
                        values}, this.setQueueTimeoutByLocationOperationCompleted, userState);
        }
        
        private void OnsetQueueTimeoutByLocationOperationCompleted(object arg) {
            if ((this.setQueueTimeoutByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setQueueTimeoutByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSMTPSendStartTLS", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSMTPSendStartTLS(string[] names, bool[] values) {
            this.Invoke("setSMTPSendStartTLS", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSMTPSendStartTLSAsync(string[] names, bool[] values) {
            this.setSMTPSendStartTLSAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setSMTPSendStartTLSAsync(string[] names, bool[] values, object userState) {
            if ((this.setSMTPSendStartTLSOperationCompleted == null)) {
                this.setSMTPSendStartTLSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSMTPSendStartTLSOperationCompleted);
            }
            this.InvokeAsync("setSMTPSendStartTLS", new object[] {
                        names,
                        values}, this.setSMTPSendStartTLSOperationCompleted, userState);
        }
        
        private void OnsetSMTPSendStartTLSOperationCompleted(object arg) {
            if ((this.setSMTPSendStartTLSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSMTPSendStartTLSCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSMTPSendStartTLSByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSMTPSendStartTLSByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setSMTPSendStartTLSByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSMTPSendStartTLSByLocationAsync(string location, string[] names, bool[] values) {
            this.setSMTPSendStartTLSByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setSMTPSendStartTLSByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setSMTPSendStartTLSByLocationOperationCompleted == null)) {
                this.setSMTPSendStartTLSByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSMTPSendStartTLSByLocationOperationCompleted);
            }
            this.InvokeAsync("setSMTPSendStartTLSByLocation", new object[] {
                        location,
                        names,
                        values}, this.setSMTPSendStartTLSByLocationOperationCompleted, userState);
        }
        
        private void OnsetSMTPSendStartTLSByLocationOperationCompleted(object arg) {
            if ((this.setSMTPSendStartTLSByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSMTPSendStartTLSByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLClientAuth", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLClientAuth(string[] names, bool[] values) {
            this.Invoke("setSSLClientAuth", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLClientAuthAsync(string[] names, bool[] values) {
            this.setSSLClientAuthAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setSSLClientAuthAsync(string[] names, bool[] values, object userState) {
            if ((this.setSSLClientAuthOperationCompleted == null)) {
                this.setSSLClientAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLClientAuthOperationCompleted);
            }
            this.InvokeAsync("setSSLClientAuth", new object[] {
                        names,
                        values}, this.setSSLClientAuthOperationCompleted, userState);
        }
        
        private void OnsetSSLClientAuthOperationCompleted(object arg) {
            if ((this.setSSLClientAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLClientAuthCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLClientAuthByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLClientAuthByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setSSLClientAuthByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLClientAuthByLocationAsync(string location, string[] names, bool[] values) {
            this.setSSLClientAuthByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setSSLClientAuthByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setSSLClientAuthByLocationOperationCompleted == null)) {
                this.setSSLClientAuthByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLClientAuthByLocationOperationCompleted);
            }
            this.InvokeAsync("setSSLClientAuthByLocation", new object[] {
                        location,
                        names,
                        values}, this.setSSLClientAuthByLocationOperationCompleted, userState);
        }
        
        private void OnsetSSLClientAuthByLocationOperationCompleted(object arg) {
            if ((this.setSSLClientAuthByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLClientAuthByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLEncrypt", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLEncrypt(string[] names, bool[] values) {
            this.Invoke("setSSLEncrypt", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLEncryptAsync(string[] names, bool[] values) {
            this.setSSLEncryptAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setSSLEncryptAsync(string[] names, bool[] values, object userState) {
            if ((this.setSSLEncryptOperationCompleted == null)) {
                this.setSSLEncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLEncryptOperationCompleted);
            }
            this.InvokeAsync("setSSLEncrypt", new object[] {
                        names,
                        values}, this.setSSLEncryptOperationCompleted, userState);
        }
        
        private void OnsetSSLEncryptOperationCompleted(object arg) {
            if ((this.setSSLEncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLEncryptCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLEncryptByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLEncryptByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setSSLEncryptByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLEncryptByLocationAsync(string location, string[] names, bool[] values) {
            this.setSSLEncryptByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setSSLEncryptByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setSSLEncryptByLocationOperationCompleted == null)) {
                this.setSSLEncryptByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLEncryptByLocationOperationCompleted);
            }
            this.InvokeAsync("setSSLEncryptByLocation", new object[] {
                        location,
                        names,
                        values}, this.setSSLEncryptByLocationOperationCompleted, userState);
        }
        
        private void OnsetSSLEncryptByLocationOperationCompleted(object arg) {
            if ((this.setSSLEncryptByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLEncryptByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLEnhance", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLEnhance(string[] names, bool[] values) {
            this.Invoke("setSSLEnhance", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLEnhanceAsync(string[] names, bool[] values) {
            this.setSSLEnhanceAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setSSLEnhanceAsync(string[] names, bool[] values, object userState) {
            if ((this.setSSLEnhanceOperationCompleted == null)) {
                this.setSSLEnhanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLEnhanceOperationCompleted);
            }
            this.InvokeAsync("setSSLEnhance", new object[] {
                        names,
                        values}, this.setSSLEnhanceOperationCompleted, userState);
        }
        
        private void OnsetSSLEnhanceOperationCompleted(object arg) {
            if ((this.setSSLEnhanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLEnhanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLEnhanceByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLEnhanceByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setSSLEnhanceByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLEnhanceByLocationAsync(string location, string[] names, bool[] values) {
            this.setSSLEnhanceByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setSSLEnhanceByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setSSLEnhanceByLocationOperationCompleted == null)) {
                this.setSSLEnhanceByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLEnhanceByLocationOperationCompleted);
            }
            this.InvokeAsync("setSSLEnhanceByLocation", new object[] {
                        location,
                        names,
                        values}, this.setSSLEnhanceByLocationOperationCompleted, userState);
        }
        
        private void OnsetSSLEnhanceByLocationOperationCompleted(object arg) {
            if ((this.setSSLEnhanceByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLEnhanceByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLSendCloseAlerts", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLSendCloseAlerts(string[] names, bool[] values) {
            this.Invoke("setSSLSendCloseAlerts", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLSendCloseAlertsAsync(string[] names, bool[] values) {
            this.setSSLSendCloseAlertsAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setSSLSendCloseAlertsAsync(string[] names, bool[] values, object userState) {
            if ((this.setSSLSendCloseAlertsOperationCompleted == null)) {
                this.setSSLSendCloseAlertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLSendCloseAlertsOperationCompleted);
            }
            this.InvokeAsync("setSSLSendCloseAlerts", new object[] {
                        names,
                        values}, this.setSSLSendCloseAlertsOperationCompleted, userState);
        }
        
        private void OnsetSSLSendCloseAlertsOperationCompleted(object arg) {
            if ((this.setSSLSendCloseAlertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLSendCloseAlertsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLSendCloseAlertsByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLSendCloseAlertsByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setSSLSendCloseAlertsByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLSendCloseAlertsByLocationAsync(string location, string[] names, bool[] values) {
            this.setSSLSendCloseAlertsByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setSSLSendCloseAlertsByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setSSLSendCloseAlertsByLocationOperationCompleted == null)) {
                this.setSSLSendCloseAlertsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLSendCloseAlertsByLocationOperationCompleted);
            }
            this.InvokeAsync("setSSLSendCloseAlertsByLocation", new object[] {
                        location,
                        names,
                        values}, this.setSSLSendCloseAlertsByLocationOperationCompleted, userState);
        }
        
        private void OnsetSSLSendCloseAlertsByLocationOperationCompleted(object arg) {
            if ((this.setSSLSendCloseAlertsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLSendCloseAlertsByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLServerNameExtension", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLServerNameExtension(string[] names, bool[] values) {
            this.Invoke("setSSLServerNameExtension", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLServerNameExtensionAsync(string[] names, bool[] values) {
            this.setSSLServerNameExtensionAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setSSLServerNameExtensionAsync(string[] names, bool[] values, object userState) {
            if ((this.setSSLServerNameExtensionOperationCompleted == null)) {
                this.setSSLServerNameExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLServerNameExtensionOperationCompleted);
            }
            this.InvokeAsync("setSSLServerNameExtension", new object[] {
                        names,
                        values}, this.setSSLServerNameExtensionOperationCompleted, userState);
        }
        
        private void OnsetSSLServerNameExtensionOperationCompleted(object arg) {
            if ((this.setSSLServerNameExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLServerNameExtensionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLServerNameExtensionByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLServerNameExtensionByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setSSLServerNameExtensionByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLServerNameExtensionByLocationAsync(string location, string[] names, bool[] values) {
            this.setSSLServerNameExtensionByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setSSLServerNameExtensionByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setSSLServerNameExtensionByLocationOperationCompleted == null)) {
                this.setSSLServerNameExtensionByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLServerNameExtensionByLocationOperationCompleted);
            }
            this.InvokeAsync("setSSLServerNameExtensionByLocation", new object[] {
                        location,
                        names,
                        values}, this.setSSLServerNameExtensionByLocationOperationCompleted, userState);
        }
        
        private void OnsetSSLServerNameExtensionByLocationOperationCompleted(object arg) {
            if ((this.setSSLServerNameExtensionByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLServerNameExtensionByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLStrictVerify", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLStrictVerify(string[] names, bool[] values) {
            this.Invoke("setSSLStrictVerify", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLStrictVerifyAsync(string[] names, bool[] values) {
            this.setSSLStrictVerifyAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setSSLStrictVerifyAsync(string[] names, bool[] values, object userState) {
            if ((this.setSSLStrictVerifyOperationCompleted == null)) {
                this.setSSLStrictVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLStrictVerifyOperationCompleted);
            }
            this.InvokeAsync("setSSLStrictVerify", new object[] {
                        names,
                        values}, this.setSSLStrictVerifyOperationCompleted, userState);
        }
        
        private void OnsetSSLStrictVerifyOperationCompleted(object arg) {
            if ((this.setSSLStrictVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLStrictVerifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setSSLStrictVerifyByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setSSLStrictVerifyByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setSSLStrictVerifyByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setSSLStrictVerifyByLocationAsync(string location, string[] names, bool[] values) {
            this.setSSLStrictVerifyByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setSSLStrictVerifyByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setSSLStrictVerifyByLocationOperationCompleted == null)) {
                this.setSSLStrictVerifyByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSSLStrictVerifyByLocationOperationCompleted);
            }
            this.InvokeAsync("setSSLStrictVerifyByLocation", new object[] {
                        location,
                        names,
                        values}, this.setSSLStrictVerifyByLocationOperationCompleted, userState);
        }
        
        private void OnsetSSLStrictVerifyByLocationOperationCompleted(object arg) {
            if ((this.setSSLStrictVerifyByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSSLStrictVerifyByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setTransparent", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setTransparent(string[] names, bool[] values) {
            this.Invoke("setTransparent", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setTransparentAsync(string[] names, bool[] values) {
            this.setTransparentAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setTransparentAsync(string[] names, bool[] values, object userState) {
            if ((this.setTransparentOperationCompleted == null)) {
                this.setTransparentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTransparentOperationCompleted);
            }
            this.InvokeAsync("setTransparent", new object[] {
                        names,
                        values}, this.setTransparentOperationCompleted, userState);
        }
        
        private void OnsetTransparentOperationCompleted(object arg) {
            if ((this.setTransparentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTransparentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setTransparentByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setTransparentByLocation(string location, string[] names, bool[] values) {
            this.Invoke("setTransparentByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setTransparentByLocationAsync(string location, string[] names, bool[] values) {
            this.setTransparentByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setTransparentByLocationAsync(string location, string[] names, bool[] values, object userState) {
            if ((this.setTransparentByLocationOperationCompleted == null)) {
                this.setTransparentByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTransparentByLocationOperationCompleted);
            }
            this.InvokeAsync("setTransparentByLocation", new object[] {
                        location,
                        names,
                        values}, this.setTransparentByLocationOperationCompleted, userState);
        }
        
        private void OnsetTransparentByLocationOperationCompleted(object arg) {
            if ((this.setTransparentByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTransparentByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFrom", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setUDPAcceptFrom(string[] names, PoolUDPAcceptFrom[] values) {
            this.Invoke("setUDPAcceptFrom", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setUDPAcceptFromAsync(string[] names, PoolUDPAcceptFrom[] values) {
            this.setUDPAcceptFromAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setUDPAcceptFromAsync(string[] names, PoolUDPAcceptFrom[] values, object userState) {
            if ((this.setUDPAcceptFromOperationCompleted == null)) {
                this.setUDPAcceptFromOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUDPAcceptFromOperationCompleted);
            }
            this.InvokeAsync("setUDPAcceptFrom", new object[] {
                        names,
                        values}, this.setUDPAcceptFromOperationCompleted, userState);
        }
        
        private void OnsetUDPAcceptFromOperationCompleted(object arg) {
            if ((this.setUDPAcceptFromCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUDPAcceptFromCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFromByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setUDPAcceptFromByLocation(string location, string[] names, PoolUDPAcceptFrom[] values) {
            this.Invoke("setUDPAcceptFromByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setUDPAcceptFromByLocationAsync(string location, string[] names, PoolUDPAcceptFrom[] values) {
            this.setUDPAcceptFromByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setUDPAcceptFromByLocationAsync(string location, string[] names, PoolUDPAcceptFrom[] values, object userState) {
            if ((this.setUDPAcceptFromByLocationOperationCompleted == null)) {
                this.setUDPAcceptFromByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUDPAcceptFromByLocationOperationCompleted);
            }
            this.InvokeAsync("setUDPAcceptFromByLocation", new object[] {
                        location,
                        names,
                        values}, this.setUDPAcceptFromByLocationOperationCompleted, userState);
        }
        
        private void OnsetUDPAcceptFromByLocationOperationCompleted(object arg) {
            if ((this.setUDPAcceptFromByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUDPAcceptFromByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFromIPMask", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setUDPAcceptFromIPMask(string[] names, string[] values) {
            this.Invoke("setUDPAcceptFromIPMask", new object[] {
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setUDPAcceptFromIPMaskAsync(string[] names, string[] values) {
            this.setUDPAcceptFromIPMaskAsync(names, values, null);
        }
        
        /// <remarks/>
        public void setUDPAcceptFromIPMaskAsync(string[] names, string[] values, object userState) {
            if ((this.setUDPAcceptFromIPMaskOperationCompleted == null)) {
                this.setUDPAcceptFromIPMaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUDPAcceptFromIPMaskOperationCompleted);
            }
            this.InvokeAsync("setUDPAcceptFromIPMask", new object[] {
                        names,
                        values}, this.setUDPAcceptFromIPMaskOperationCompleted, userState);
        }
        
        private void OnsetUDPAcceptFromIPMaskOperationCompleted(object arg) {
            if ((this.setUDPAcceptFromIPMaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUDPAcceptFromIPMaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFromIPMaskByLocation", RequestNamespace="http://soap.zeus.com/zxtm/1.0/Pool/", ResponseNamespace="http://soap.zeus.com/zxtm/1.0/Pool/")]
        public void setUDPAcceptFromIPMaskByLocation(string location, string[] names, string[] values) {
            this.Invoke("setUDPAcceptFromIPMaskByLocation", new object[] {
                        location,
                        names,
                        values});
        }
        
        /// <remarks/>
        public void setUDPAcceptFromIPMaskByLocationAsync(string location, string[] names, string[] values) {
            this.setUDPAcceptFromIPMaskByLocationAsync(location, names, values, null);
        }
        
        /// <remarks/>
        public void setUDPAcceptFromIPMaskByLocationAsync(string location, string[] names, string[] values, object userState) {
            if ((this.setUDPAcceptFromIPMaskByLocationOperationCompleted == null)) {
                this.setUDPAcceptFromIPMaskByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUDPAcceptFromIPMaskByLocationOperationCompleted);
            }
            this.InvokeAsync("setUDPAcceptFromIPMaskByLocation", new object[] {
                        location,
                        names,
                        values}, this.setUDPAcceptFromIPMaskByLocationOperationCompleted, userState);
        }
        
        private void OnsetUDPAcceptFromIPMaskByLocationOperationCompleted(object arg) {
            if ((this.setUDPAcceptFromIPMaskByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUDPAcceptFromIPMaskByLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(TypeName="Pool.AutoscaleIpstouse", Namespace="http://soap.zeus.com/zxtm/1.0/")]
    public enum PoolAutoscaleIpstouse {
        
        /// <remarks/>
        publicips,
        
        /// <remarks/>
        privateips,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(TypeName="Pool.LoadBalancingAlgorithm", Namespace="http://soap.zeus.com/zxtm/1.0/")]
    public enum PoolLoadBalancingAlgorithm {
        
        /// <remarks/>
        roundrobin,
        
        /// <remarks/>
        wroundrobin,
        
        /// <remarks/>
        cells,
        
        /// <remarks/>
        connections,
        
        /// <remarks/>
        wconnections,
        
        /// <remarks/>
        responsetimes,
        
        /// <remarks/>
        random,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(TypeName="Pool.PriorityValueDefinition", Namespace="http://soap.zeus.com/zxtm/1.0/")]
    public partial class PoolPriorityValueDefinition {
        
        private string nodeField;
        
        private int priorityField;
        
        /// <remarks/>
        public string node {
            get {
                return this.nodeField;
            }
            set {
                this.nodeField = value;
            }
        }
        
        /// <remarks/>
        public int priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(TypeName="Pool.WeightingsDefinition", Namespace="http://soap.zeus.com/zxtm/1.0/")]
    public partial class PoolWeightingsDefinition {
        
        private string nodeField;
        
        private int weightingField;
        
        /// <remarks/>
        public string node {
            get {
                return this.nodeField;
            }
            set {
                this.nodeField = value;
            }
        }
        
        /// <remarks/>
        public int weighting {
            get {
                return this.weightingField;
            }
            set {
                this.weightingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(TypeName="Pool.UDPAcceptFrom", Namespace="http://soap.zeus.com/zxtm/1.0/")]
    public enum PoolUDPAcceptFrom {
        
        /// <remarks/>
        dest_only,
        
        /// <remarks/>
        dest_ip_only,
        
        /// <remarks/>
        ip_mask,
        
        /// <remarks/>
        all,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addAutoScaledPoolCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addDrainingNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addDrainingNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addMonitorsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addMonitorsByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void addPoolCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void copyPoolCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void deletePoolCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void disableNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void disableNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void enableNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void enableNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleCloudcredentialsCompletedEventHandler(object sender, getAutoscaleCloudcredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleCloudcredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleCloudcredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleCloudcredentialsByLocationCompletedEventHandler(object sender, getAutoscaleCloudcredentialsByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleCloudcredentialsByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleCloudcredentialsByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleClusterCompletedEventHandler(object sender, getAutoscaleClusterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleClusterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleClusterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleClusterByLocationCompletedEventHandler(object sender, getAutoscaleClusterByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleClusterByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleClusterByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleDatacenterCompletedEventHandler(object sender, getAutoscaleDatacenterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleDatacenterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleDatacenterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleDatacenterByLocationCompletedEventHandler(object sender, getAutoscaleDatacenterByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleDatacenterByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleDatacenterByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleDatastoreCompletedEventHandler(object sender, getAutoscaleDatastoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleDatastoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleDatastoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleDatastoreByLocationCompletedEventHandler(object sender, getAutoscaleDatastoreByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleDatastoreByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleDatastoreByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleEnabledCompletedEventHandler(object sender, getAutoscaleEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleEnabledByLocationCompletedEventHandler(object sender, getAutoscaleEnabledByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleEnabledByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleEnabledByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleExternalCompletedEventHandler(object sender, getAutoscaleExternalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleExternalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleExternalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleExternalByLocationCompletedEventHandler(object sender, getAutoscaleExternalByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleExternalByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleExternalByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleHysteresisCompletedEventHandler(object sender, getAutoscaleHysteresisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleHysteresisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleHysteresisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleHysteresisByLocationCompletedEventHandler(object sender, getAutoscaleHysteresisByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleHysteresisByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleHysteresisByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleImageidCompletedEventHandler(object sender, getAutoscaleImageidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleImageidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleImageidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleImageidByLocationCompletedEventHandler(object sender, getAutoscaleImageidByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleImageidByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleImageidByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleIpstouseCompletedEventHandler(object sender, getAutoscaleIpstouseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleIpstouseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleIpstouseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolAutoscaleIpstouse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolAutoscaleIpstouse[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleIpstouseByLocationCompletedEventHandler(object sender, getAutoscaleIpstouseByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleIpstouseByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleIpstouseByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolAutoscaleIpstouse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolAutoscaleIpstouse[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleLastnodeIdletimeCompletedEventHandler(object sender, getAutoscaleLastnodeIdletimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleLastnodeIdletimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleLastnodeIdletimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleLastnodeIdletimeByLocationCompletedEventHandler(object sender, getAutoscaleLastnodeIdletimeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleLastnodeIdletimeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleLastnodeIdletimeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleMaxNodesCompletedEventHandler(object sender, getAutoscaleMaxNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleMaxNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleMaxNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleMaxNodesByLocationCompletedEventHandler(object sender, getAutoscaleMaxNodesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleMaxNodesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleMaxNodesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleMinNodesCompletedEventHandler(object sender, getAutoscaleMinNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleMinNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleMinNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleMinNodesByLocationCompletedEventHandler(object sender, getAutoscaleMinNodesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleMinNodesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleMinNodesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleNameCompletedEventHandler(object sender, getAutoscaleNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleNameByLocationCompletedEventHandler(object sender, getAutoscaleNameByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleNameByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleNameByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscalePortCompletedEventHandler(object sender, getAutoscalePortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscalePortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscalePortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscalePortByLocationCompletedEventHandler(object sender, getAutoscalePortByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscalePortByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscalePortByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleRefractoryCompletedEventHandler(object sender, getAutoscaleRefractoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleRefractoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleRefractoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleRefractoryByLocationCompletedEventHandler(object sender, getAutoscaleRefractoryByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleRefractoryByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleRefractoryByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleResponseTimeCompletedEventHandler(object sender, getAutoscaleResponseTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleResponseTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleResponseTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleResponseTimeByLocationCompletedEventHandler(object sender, getAutoscaleResponseTimeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleResponseTimeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleResponseTimeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleScaledownLevelCompletedEventHandler(object sender, getAutoscaleScaledownLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleScaledownLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleScaledownLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleScaledownLevelByLocationCompletedEventHandler(object sender, getAutoscaleScaledownLevelByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleScaledownLevelByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleScaledownLevelByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleScaleupLevelCompletedEventHandler(object sender, getAutoscaleScaleupLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleScaleupLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleScaleupLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleScaleupLevelByLocationCompletedEventHandler(object sender, getAutoscaleScaleupLevelByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleScaleupLevelByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleScaleupLevelByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleSizeidCompletedEventHandler(object sender, getAutoscaleSizeidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleSizeidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleSizeidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAutoscaleSizeidByLocationCompletedEventHandler(object sender, getAutoscaleSizeidByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoscaleSizeidByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoscaleSizeidByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getBandwidthClassCompletedEventHandler(object sender, getBandwidthClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBandwidthClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBandwidthClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getBandwidthClassByLocationCompletedEventHandler(object sender, getBandwidthClassByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBandwidthClassByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBandwidthClassByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getDisabledNodesCompletedEventHandler(object sender, getDisabledNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDisabledNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDisabledNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getDisabledNodesByLocationCompletedEventHandler(object sender, getDisabledNodesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDisabledNodesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDisabledNodesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getDrainingNodesCompletedEventHandler(object sender, getDrainingNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDrainingNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDrainingNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getDrainingNodesByLocationCompletedEventHandler(object sender, getDrainingNodesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDrainingNodesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDrainingNodesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getErrorFileCompletedEventHandler(object sender, getErrorFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getErrorFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getErrorFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getFTPSupportRfc2428CompletedEventHandler(object sender, getFTPSupportRfc2428CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFTPSupportRfc2428CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFTPSupportRfc2428CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getFTPSupportRfc2428ByLocationCompletedEventHandler(object sender, getFTPSupportRfc2428ByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFTPSupportRfc2428ByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFTPSupportRfc2428ByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getFailpoolCompletedEventHandler(object sender, getFailpoolCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFailpoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFailpoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getFailpoolByLocationCompletedEventHandler(object sender, getFailpoolByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFailpoolByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFailpoolByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getKeepaliveCompletedEventHandler(object sender, getKeepaliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getKeepaliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getKeepaliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getKeepaliveByLocationCompletedEventHandler(object sender, getKeepaliveByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getKeepaliveByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getKeepaliveByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getKeepaliveNonIdempotentCompletedEventHandler(object sender, getKeepaliveNonIdempotentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getKeepaliveNonIdempotentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getKeepaliveNonIdempotentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getKeepaliveNonIdempotentByLocationCompletedEventHandler(object sender, getKeepaliveNonIdempotentByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getKeepaliveNonIdempotentByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getKeepaliveNonIdempotentByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getLoadBalancingAlgorithmCompletedEventHandler(object sender, getLoadBalancingAlgorithmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLoadBalancingAlgorithmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLoadBalancingAlgorithmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolLoadBalancingAlgorithm[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolLoadBalancingAlgorithm[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getLoadBalancingAlgorithmByLocationCompletedEventHandler(object sender, getLoadBalancingAlgorithmByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLoadBalancingAlgorithmByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLoadBalancingAlgorithmByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolLoadBalancingAlgorithm[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolLoadBalancingAlgorithm[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxConnectTimeCompletedEventHandler(object sender, getMaxConnectTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxConnectTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxConnectTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxConnectTimeByLocationCompletedEventHandler(object sender, getMaxConnectTimeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxConnectTimeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxConnectTimeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxConnectionsPernodeCompletedEventHandler(object sender, getMaxConnectionsPernodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxConnectionsPernodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxConnectionsPernodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxConnectionsPernodeByLocationCompletedEventHandler(object sender, getMaxConnectionsPernodeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxConnectionsPernodeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxConnectionsPernodeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxIdleConnectionsPerNodeCompletedEventHandler(object sender, getMaxIdleConnectionsPerNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxIdleConnectionsPerNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxIdleConnectionsPerNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxIdleConnectionsPerNodeByLocationCompletedEventHandler(object sender, getMaxIdleConnectionsPerNodeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxIdleConnectionsPerNodeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxIdleConnectionsPerNodeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxKeepalivesPerNodeCompletedEventHandler(object sender, getMaxKeepalivesPerNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxKeepalivesPerNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxKeepalivesPerNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxKeepalivesPerNodeByLocationCompletedEventHandler(object sender, getMaxKeepalivesPerNodeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxKeepalivesPerNodeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxKeepalivesPerNodeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxQueueSizeCompletedEventHandler(object sender, getMaxQueueSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxQueueSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxQueueSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxQueueSizeByLocationCompletedEventHandler(object sender, getMaxQueueSizeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxQueueSizeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxQueueSizeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxReplyTimeCompletedEventHandler(object sender, getMaxReplyTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxReplyTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxReplyTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMaxReplyTimeByLocationCompletedEventHandler(object sender, getMaxReplyTimeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMaxReplyTimeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMaxReplyTimeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMonitorsCompletedEventHandler(object sender, getMonitorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMonitorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMonitorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMonitorsByLocationCompletedEventHandler(object sender, getMonitorsByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMonitorsByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMonitorsByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeConnCloseCompletedEventHandler(object sender, getNodeConnCloseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeConnCloseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeConnCloseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeConnCloseByLocationCompletedEventHandler(object sender, getNodeConnCloseByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeConnCloseByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeConnCloseByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeConnectionAttemptsCompletedEventHandler(object sender, getNodeConnectionAttemptsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeConnectionAttemptsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeConnectionAttemptsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeConnectionAttemptsByLocationCompletedEventHandler(object sender, getNodeConnectionAttemptsByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeConnectionAttemptsByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeConnectionAttemptsByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeFailTimeCompletedEventHandler(object sender, getNodeFailTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeFailTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeFailTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeFailTimeByLocationCompletedEventHandler(object sender, getNodeFailTimeByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeFailTimeByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeFailTimeByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeUseNagleCompletedEventHandler(object sender, getNodeUseNagleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeUseNagleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeUseNagleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodeUseNagleByLocationCompletedEventHandler(object sender, getNodeUseNagleByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodeUseNagleByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodeUseNagleByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesCompletedEventHandler(object sender, getNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesByLocationCompletedEventHandler(object sender, getNodesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesConnectionCountsCompletedEventHandler(object sender, getNodesConnectionCountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesConnectionCountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesConnectionCountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesLastUsedCompletedEventHandler(object sender, getNodesLastUsedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesLastUsedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesLastUsedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesPriorityValueCompletedEventHandler(object sender, getNodesPriorityValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesPriorityValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesPriorityValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolPriorityValueDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolPriorityValueDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesPriorityValueByLocationCompletedEventHandler(object sender, getNodesPriorityValueByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesPriorityValueByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesPriorityValueByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolPriorityValueDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolPriorityValueDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesWeightingsCompletedEventHandler(object sender, getNodesWeightingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesWeightingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesWeightingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolWeightingsDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolWeightingsDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNodesWeightingsByLocationCompletedEventHandler(object sender, getNodesWeightingsByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNodesWeightingsByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNodesWeightingsByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolWeightingsDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolWeightingsDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getNoteCompletedEventHandler(object sender, getNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPassiveMonitoringCompletedEventHandler(object sender, getPassiveMonitoringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPassiveMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPassiveMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPassiveMonitoringByLocationCompletedEventHandler(object sender, getPassiveMonitoringByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPassiveMonitoringByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPassiveMonitoringByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPersistenceCompletedEventHandler(object sender, getPersistenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersistenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersistenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPersistenceByLocationCompletedEventHandler(object sender, getPersistenceByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersistenceByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPersistenceByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPoolNamesCompletedEventHandler(object sender, getPoolNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPoolNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPoolNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPriorityEnabledCompletedEventHandler(object sender, getPriorityEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPriorityEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPriorityEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPriorityEnabledByLocationCompletedEventHandler(object sender, getPriorityEnabledByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPriorityEnabledByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPriorityEnabledByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPriorityNodesCompletedEventHandler(object sender, getPriorityNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPriorityNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPriorityNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPriorityNodesByLocationCompletedEventHandler(object sender, getPriorityNodesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPriorityNodesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPriorityNodesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPriorityValuesCompletedEventHandler(object sender, getPriorityValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPriorityValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPriorityValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolPriorityValueDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolPriorityValueDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getPriorityValuesByLocationCompletedEventHandler(object sender, getPriorityValuesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPriorityValuesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPriorityValuesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolPriorityValueDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolPriorityValueDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getQueueTimeoutCompletedEventHandler(object sender, getQueueTimeoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getQueueTimeoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getQueueTimeoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getQueueTimeoutByLocationCompletedEventHandler(object sender, getQueueTimeoutByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getQueueTimeoutByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getQueueTimeoutByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSMTPSendStartTLSCompletedEventHandler(object sender, getSMTPSendStartTLSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSMTPSendStartTLSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSMTPSendStartTLSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSMTPSendStartTLSByLocationCompletedEventHandler(object sender, getSMTPSendStartTLSByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSMTPSendStartTLSByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSMTPSendStartTLSByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLClientAuthCompletedEventHandler(object sender, getSSLClientAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLClientAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLClientAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLClientAuthByLocationCompletedEventHandler(object sender, getSSLClientAuthByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLClientAuthByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLClientAuthByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLEncryptCompletedEventHandler(object sender, getSSLEncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLEncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLEncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLEncryptByLocationCompletedEventHandler(object sender, getSSLEncryptByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLEncryptByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLEncryptByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLEnhanceCompletedEventHandler(object sender, getSSLEnhanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLEnhanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLEnhanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLEnhanceByLocationCompletedEventHandler(object sender, getSSLEnhanceByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLEnhanceByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLEnhanceByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLSendCloseAlertsCompletedEventHandler(object sender, getSSLSendCloseAlertsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLSendCloseAlertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLSendCloseAlertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLSendCloseAlertsByLocationCompletedEventHandler(object sender, getSSLSendCloseAlertsByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLSendCloseAlertsByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLSendCloseAlertsByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLServerNameExtensionCompletedEventHandler(object sender, getSSLServerNameExtensionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLServerNameExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLServerNameExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLServerNameExtensionByLocationCompletedEventHandler(object sender, getSSLServerNameExtensionByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLServerNameExtensionByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLServerNameExtensionByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLStrictVerifyCompletedEventHandler(object sender, getSSLStrictVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLStrictVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLStrictVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getSSLStrictVerifyByLocationCompletedEventHandler(object sender, getSSLStrictVerifyByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSSLStrictVerifyByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSSLStrictVerifyByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getTransparentCompletedEventHandler(object sender, getTransparentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTransparentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTransparentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getTransparentByLocationCompletedEventHandler(object sender, getTransparentByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTransparentByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTransparentByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getUDPAcceptFromCompletedEventHandler(object sender, getUDPAcceptFromCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUDPAcceptFromCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUDPAcceptFromCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolUDPAcceptFrom[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolUDPAcceptFrom[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getUDPAcceptFromByLocationCompletedEventHandler(object sender, getUDPAcceptFromByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUDPAcceptFromByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUDPAcceptFromByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolUDPAcceptFrom[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolUDPAcceptFrom[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getUDPAcceptFromIPMaskCompletedEventHandler(object sender, getUDPAcceptFromIPMaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUDPAcceptFromIPMaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUDPAcceptFromIPMaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getUDPAcceptFromIPMaskByLocationCompletedEventHandler(object sender, getUDPAcceptFromIPMaskByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUDPAcceptFromIPMaskByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUDPAcceptFromIPMaskByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getWeightingsCompletedEventHandler(object sender, getWeightingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWeightingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWeightingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolWeightingsDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolWeightingsDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getWeightingsByLocationCompletedEventHandler(object sender, getWeightingsByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getWeightingsByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getWeightingsByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PoolWeightingsDefinition[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PoolWeightingsDefinition[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeDrainingNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeDrainingNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeMonitorsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeMonitorsByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void removeNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void renamePoolCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleCloudcredentialsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleCloudcredentialsByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleClusterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleClusterByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleDatacenterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleDatacenterByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleDatastoreCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleDatastoreByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleEnabledCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleEnabledByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleExternalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleExternalByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleHysteresisCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleHysteresisByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleImageidCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleImageidByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleIpstouseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleIpstouseByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleLastnodeIdletimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleLastnodeIdletimeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleMaxNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleMaxNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleMinNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleMinNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleNameByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscalePortCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscalePortByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleRefractoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleRefractoryByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleResponseTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleResponseTimeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleScaledownLevelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleScaledownLevelByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleScaleupLevelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleScaleupLevelByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleSizeidCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setAutoscaleSizeidByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setBandwidthClassCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setBandwidthClassByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setDisabledNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setDisabledNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setDrainingNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setDrainingNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setErrorFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setFTPSupportRfc2428CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setFTPSupportRfc2428ByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setFailpoolCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setFailpoolByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setKeepaliveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setKeepaliveByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setKeepaliveNonIdempotentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setKeepaliveNonIdempotentByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setLoadBalancingAlgorithmCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setLoadBalancingAlgorithmByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxConnectTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxConnectTimeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxConnectionsPernodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxConnectionsPernodeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxIdleConnectionsPerNodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxIdleConnectionsPerNodeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxKeepalivesPerNodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxKeepalivesPerNodeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxQueueSizeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxQueueSizeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxReplyTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMaxReplyTimeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMonitorsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setMonitorsByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeConnCloseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeConnCloseByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeConnectionAttemptsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeConnectionAttemptsByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeFailTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeFailTimeByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeUseNagleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodeUseNagleByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodesPriorityValueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodesPriorityValueByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodesWeightingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNodesWeightingsByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setNoteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPassiveMonitoringCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPassiveMonitoringByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPersistenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPersistenceByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPriorityEnabledCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPriorityEnabledByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPriorityNodesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setPriorityNodesByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setQueueTimeoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setQueueTimeoutByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSMTPSendStartTLSCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSMTPSendStartTLSByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLClientAuthCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLClientAuthByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLEncryptCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLEncryptByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLEnhanceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLEnhanceByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLSendCloseAlertsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLSendCloseAlertsByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLServerNameExtensionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLServerNameExtensionByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLStrictVerifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setSSLStrictVerifyByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTransparentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setTransparentByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setUDPAcceptFromCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setUDPAcceptFromByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setUDPAcceptFromIPMaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void setUDPAcceptFromIPMaskByLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591